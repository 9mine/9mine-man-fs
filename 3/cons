<action name=CONS(3)>CONS(3)</action>                                                   <action name=CONS(3)>CONS(3)</action>

NAME
<style color=#00ffffff size=1>.</style>            cons - console device

SYNOPSIS
<style color=#00ffffff size=1>.</style>            bind #c /dev

<style color=#00ffffff size=1>.</style>            /dev/cons
<style color=#00ffffff size=1>.</style>            /dev/consctl
<style color=#00ffffff size=1>.</style>            /dev/drivers
<style color=#00ffffff size=1>.</style>            /dev/jit
<style color=#00ffffff size=1>.</style>            /dev/keyboard
<style color=#00ffffff size=1>.</style>            /dev/klog
<style color=#00ffffff size=1>.</style>            /dev/kprint
<style color=#00ffffff size=1>.</style>            /dev/memory
<style color=#00ffffff size=1>.</style>            /dev/msec
<style color=#00ffffff size=1>.</style>            /dev/null
<style color=#00ffffff size=1>.</style>            /dev/notquiterandom
<style color=#00ffffff size=1>.</style>            /dev/pointer
<style color=#00ffffff size=1>.</style>            /dev/random
<style color=#00ffffff size=1>.</style>            /dev/scancode
<style color=#00ffffff size=1>.</style>            /dev/sysctl
<style color=#00ffffff size=1>.</style>            /dev/sysname
<style color=#00ffffff size=1>.</style>            /dev/time
<style color=#00ffffff size=1>.</style>            /dev/user

DESCRIPTION
<style color=#00ffffff size=1>.</style>            The console device serves a one-level directory giving
<style color=#00ffffff size=1>.</style>            access to the console and miscellaneous information.

<style color=#00ffffff size=1>.</style>            Reading the cons file returns characters typed on the
<style color=#00ffffff size=1>.</style>            keyboard. Normally, characters are buffered to enable erase
<style color=#00ffffff size=1>.</style>            and kill processing. A control-U, `^U', typed at the
<style color=#00ffffff size=1>.</style>            keyboard kills the current input line (removes all
<style color=#00ffffff size=1>.</style>            characters from the buffer of characters not yet read via
<style color=#00ffffff size=1>.</style>            cons), and a backspace erases the previous non-kill,
<style color=#00ffffff size=1>.</style>            non-erase character from the input buffer. Killing and
<style color=#00ffffff size=1>.</style>            erasing only delete characters back to, but not including,
<style color=#00ffffff size=1>.</style>            the last newline. Typed keystrokes produce 21-bit runes that
<style color=#00ffffff size=1>.</style>            are translated into the variable-length UTF encoding (see
<style color=#00ffffff size=1>.</style>            <action name=utf(6)>utf(6)</action>) before putting them into the buffer. A read of
<style color=#00ffffff size=1>.</style>            length greater than zero causes the process to wait until a
<style color=#00ffffff size=1>.</style>            newline or a ``^D'' ends the buffer, and then returns as
<style color=#00ffffff size=1>.</style>            much of the buffer as the argument to read allows, but only
<style color=#00ffffff size=1>.</style>            up to one complete line. A terminating ``^D'' is not put
<style color=#00ffffff size=1>.</style>            into the buffer. If part of the line remains, the next read
<style color=#00ffffff size=1>.</style>            will return bytes from that remainder and not part of any
<style color=#00ffffff size=1>.</style>            new line that has been typed since. A single line containing
<style color=#00ffffff size=1>.</style>            a ``^D'' can be used as an end of file indication to
<style color=#00ffffff size=1>.</style>            programs that take interactive input.

<style color=#00ffffff size=1>.</style>            If the string rawon has been written to the consctl file and
<style color=#00ffffff size=1>.</style>            the file is still open, cons is in raw mode: characters are
<style color=#00ffffff size=1>.</style>            not echoed as they are typed, backspace, ``^U'' and ``^D''
<style color=#00ffffff size=1>.</style>            are not treated specially, and characters are available to
<style color=#00ffffff size=1>.</style>            read as soon as they are typed. Ordinary mode is reentered
<style color=#00ffffff size=1>.</style>            when rawoff is written to consctl or this file is closed.

<style color=#00ffffff size=1>.</style>            A write to cons causes the characters to be printed on the
<style color=#00ffffff size=1>.</style>            console screen.

<style color=#00ffffff size=1>.</style>            The keyboard file returns the underlying tokens produced by
<style color=#00ffffff size=1>.</style>            the keyboard hardware as they are produced\; in the emulation
<style color=#00ffffff size=1>.</style>            environment, it is like an always-raw cons file.

<style color=#00ffffff size=1>.</style>            The null file throws away anything written to it and always
<style color=#00ffffff size=1>.</style>            returns zero bytes when read.

<style color=#00ffffff size=1>.</style>            The klog file returns the tail of messages written by the
<style color=#00ffffff size=1>.</style>            native kernel debugging function kprint (mainly used when
<style color=#00ffffff size=1>.</style>            debugging interrupt handlers in device drivers). It is
<style color=#00ffffff size=1>.</style>            available only in native kernel implementations.

<style color=#00ffffff size=1>.</style>            The kprint file returns console output: messages written by
<style color=#00ffffff size=1>.</style>            kernel print statements and messages written by processes to
<style color=#00ffffff size=1>.</style>            this driver's cons file. Until kprint is opened, system
<style color=#00ffffff size=1>.</style>            console output is handled normally. Once kprint has been
<style color=#00ffffff size=1>.</style>            opened, if the machine's console is a serial line, the data
<style color=#00ffffff size=1>.</style>            is sent both to the serial console and to kprint\; if the
<style color=#00ffffff size=1>.</style>            console is a graphics screen, the data is sent only to
<style color=#00ffffff size=1>.</style>            kprint.

<style color=#00ffffff size=1>.</style>            A read of the pointer file returns the status of the mouse
<style color=#00ffffff size=1>.</style>            or other pointing device: its position and button state. The
<style color=#00ffffff size=1>.</style>            read blocks until the state has changed since the last read.
<style color=#00ffffff size=1>.</style>            The read returns 49 bytes: the letter m followed by four
<style color=#00ffffff size=1>.</style>            fields containing decimal integers, each 11 characters wide
<style color=#00ffffff size=1>.</style>            followed by a blank. The integers are: x and y, coordinates
<style color=#00ffffff size=1>.</style>            of the pointer on the screen\; a bit mask with the 1, 2, and
<style color=#00ffffff size=1>.</style>            4 bits when the pointer's left, middle, and right buttons,
<style color=#00ffffff size=1>.</style>            respectively, are down\; and a time stamp in units of
<style color=#00ffffff size=1>.</style>            milliseconds.

<style color=#00ffffff size=1>.</style>            Writing to the pointer file, using the same format, causes
<style color=#00ffffff size=1>.</style>            the pointer to move to the specified x, y position (the
<style color=#00ffffff size=1>.</style>            button and millisecond fields are ignored, and optional). If
<style color=#00ffffff size=1>.</style>            there is a visible image representing the pointer's
<style color=#00ffffff size=1>.</style>            position, that will move too.

<style color=#00ffffff size=1>.</style>            The random device returns as many bytes of random data as
<style color=#00ffffff size=1>.</style>            are requested in the read.

<style color=#00ffffff size=1>.</style>            The notquiterandom device returns as many bytes of
<style color=#00ffffff size=1>.</style>            pseudo-random data as are requested in the read\; this is
<style color=#00ffffff size=1>.</style>            typically faster than random but the results are more
<style color=#00ffffff size=1>.</style>            predictable.

<style color=#00ffffff size=1>.</style>            The scancode device provides access to the raw scan codes of
<style color=#00ffffff size=1>.</style>            the primary keyboard . While it is open, key strokes are
<style color=#00ffffff size=1>.</style>            diverted from cons and keyboard . The first <action name=read(2)>read(2)</action> after
<style color=#00ffffff size=1>.</style>            opening returns an identifier string which defines the
<style color=#00ffffff size=1>.</style>            format of data delivered by subsequent reads. Known ones are
<style color=#00ffffff size=1>.</style>            defined in <action name=scancode(6)>scancode(6)</action>. The most common format is a single
<style color=#00ffffff size=1>.</style>            byte per scan code, where the top bit is 1 for up and 0 for
<style color=#00ffffff size=1>.</style>            down, and the bottom 7 bits are the scan code. Some input
<style color=#00ffffff size=1>.</style>            devices have a larger scan code space\; in this case scan
<style color=#00ffffff size=1>.</style>            codes are often delivered as two byte little endian
<style color=#00ffffff size=1>.</style>            quantities, where the top bit is the up/down signifier, and
<style color=#00ffffff size=1>.</style>            the bottom 15 bits are the scan code. In all cases the
<style color=#00ffffff size=1>.</style>            meaning of the individual scan codes is device specific.

<style color=#00ffffff size=1>.</style>            The rest of the files contain (mostly) read-only strings.
<style color=#00ffffff size=1>.</style>            Each string has a fixed length: a read (see sys-<action name=read(2)>read(2)</action>) of
<style color=#00ffffff size=1>.</style>            more than that gives a result of that fixed length (the
<style color=#00ffffff size=1>.</style>            result does not include a terminating zero byte)\; a read of
<style color=#00ffffff size=1>.</style>            less than that length leaves the file offset so the rest of
<style color=#00ffffff size=1>.</style>            the string (but no more) will be read the next time. To
<style color=#00ffffff size=1>.</style>            reread the file without closing it, seek must be used to
<style color=#00ffffff size=1>.</style>            reset the offset. When the file contains numeric data, each
<style color=#00ffffff size=1>.</style>            number is formatted in decimal as an 11-digit number with
<style color=#00ffffff size=1>.</style>            leading blanks and one trailing blank: twelve bytes total.

<style color=#00ffffff size=1>.</style>            The sysctl file can be read to return the current Inferno
<style color=#00ffffff size=1>.</style>            version. Writing the string reboot to it attempts to reboot
<style color=#00ffffff size=1>.</style>            the system, writing halt attempts to halt the system.
<style color=#00ffffff size=1>.</style>            Writing nobroken ensures that broken processes have all
<style color=#00ffffff size=1>.</style>            associated memory freed before being destroyed, writing
<style color=#00ffffff size=1>.</style>            broken ensures that they are left in this state to allow
<style color=#00ffffff size=1>.</style>            debugging (the default). Only the privileged user is allowed
<style color=#00ffffff size=1>.</style>            to write to this file.

<style color=#00ffffff size=1>.</style>            The sysname file holds the textual name of the machine. It
<style color=#00ffffff size=1>.</style>            can only be written by the privileged user.

<style color=#00ffffff size=1>.</style>            The user file contains the name of the user associated with
<style color=#00ffffff size=1>.</style>            the current process. It can only be written by the
<style color=#00ffffff size=1>.</style>            privileged user. In the emulation environment, writing to
<style color=#00ffffff size=1>.</style>            this file also attempts to set the user id in the host
<style color=#00ffffff size=1>.</style>            operating system to the specified value.

<style color=#00ffffff size=1>.</style>            The memory file returns a formatted presentation of the
<style color=#00ffffff size=1>.</style>            state of the memory allocation pools in the system. Each
<style color=#00ffffff size=1>.</style>            line of output returned reports, for a single pool, the
<style color=#00ffffff size=1>.</style>            amount of memory in use, the upper size limit, the high
<style color=#00ffffff size=1>.</style>            water mark, the number of allocations done, the number of
<style color=#00ffffff size=1>.</style>            frees done, the number of extensions done, the largest chunk
<style color=#00ffffff size=1>.</style>            available and the name of the pool.

<style color=#00ffffff size=1>.</style>            The drivers file returns a list of the device drivers loaded
<style color=#00ffffff size=1>.</style>            in the system. Each line gives the name of the device for
<style color=#00ffffff size=1>.</style>            <action name=bind(1)>bind(1)</action>, such as #c, followed by the name of the driver as
<style color=#00ffffff size=1>.</style>            used in the system configuration file.

<style color=#00ffffff size=1>.</style>            The other files served by the cons device are all single
<style color=#00ffffff size=1>.</style>            numbers:

<style color=#00ffffff size=1>.</style>            jit  non-zero if `just in time' compilation is configured
<style color=#00ffffff size=1>.</style>                 (can be written to change the state). Writing 0 turns
<style color=#00ffffff size=1>.</style>                 off JIT compilation, 1 turns it on and larger values
<style color=#00ffffff size=1>.</style>                 give increasingly detailed traces of the compilation
<style color=#00ffffff size=1>.</style>                 for debugging purposes.

<style color=#00ffffff size=1>.</style>            msec the value of a millisecond counter

<style color=#00ffffff size=1>.</style>            time number of microseconds since the epoch 00:00:00 GMT,
<style color=#00ffffff size=1>.</style>                 Jan. 1, 1970. (Can be written once by the privileged
<style color=#00ffffff size=1>.</style>                 user, to set at boot time.)

SOURCE
<style color=#00ffffff size=1>.</style>            /emu/port/devcons.c
<style color=#00ffffff size=1>.</style>            /os/port/devcons.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=draw(3)>draw(3)</action>, <action name=keyboard(6)>keyboard(6)</action>, <action name=utf(6)>utf(6)</action>, eve(10.2)

BUGS
<style color=#00ffffff size=1>.</style>            For debugging, on native systems only, two control-T's
<style color=#00ffffff size=1>.</style>            followed by a letter generate console output: ``^T^Tp''
<style color=#00ffffff size=1>.</style>            prints data about kernel processes, ``^T^Ts'' prints the
<style color=#00ffffff size=1>.</style>            kernel stack, ``^T^Tx'' prints data about memory allocation.

<style color=#00ffffff size=1>.</style>            The system can be rebooted by typing `^T^Tr'.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
