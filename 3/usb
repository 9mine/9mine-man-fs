<action name=USB(3)>USB(3)</action>                                                     <action name=USB(3)>USB(3)</action>

NAME
<style color=#00ffffff size=1>.</style>            usb - USB device interface

SYNOPSYS
<style color=#00ffffff size=1>.</style>            bind -a '#U' /dev

<style color=#00ffffff size=1>.</style>            /dev/usbctl
<style color=#00ffffff size=1>.</style>            /dev/usbdata
<style color=#00ffffff size=1>.</style>            /dev/usbstat
<style color=#00ffffff size=1>.</style>            /dev/usbaddr
<style color=#00ffffff size=1>.</style>            /dev/usbframe
<style color=#00ffffff size=1>.</style>            /dev/usbsetup

DESCRIPTION
<style color=#00ffffff size=1>.</style>            The USB device serves a one-level directory, giving access
<style color=#00ffffff size=1>.</style>            to six files. They provide an interface to the device
<style color=#00ffffff size=1>.</style>            (slave) mode of the 823/850 USB controller, allowing an
<style color=#00ffffff size=1>.</style>            Inferno system to provide services to the USB host. The
<style color=#00ffffff size=1>.</style>            controller's endpoints are configured as follows. Endpoint 0
<style color=#00ffffff size=1>.</style>            is the default USB control endpoint, as required by the USB
<style color=#00ffffff size=1>.</style>            standard. Endpoint 1 responds to bulk output requests from
<style color=#00ffffff size=1>.</style>            the host\; endpoint 2 responds to bulk input requests from
<style color=#00ffffff size=1>.</style>            the host\; endpoint 3 is unused.

<style color=#00ffffff size=1>.</style>            The data file usbdata provides read and write access to
<style color=#00ffffff size=1>.</style>            endpoints 1 and 2. When the file is read, it returns data
<style color=#00ffffff size=1>.</style>            written to endpoint 1 by the USB host. Data written to the
<style color=#00ffffff size=1>.</style>            file is provided in response to the host's read requests on
<style color=#00ffffff size=1>.</style>            endpoint 2. Output data is converted to packets limited to
<style color=#00ffffff size=1>.</style>            the maximum packet length for the endpoint (see the maxpkt
<style color=#00ffffff size=1>.</style>            control request, below), which is 1023 bytes by default.
<style color=#00ffffff size=1>.</style>            Note that zero length records can be transmitted and
<style color=#00ffffff size=1>.</style>            received on USB.

<style color=#00ffffff size=1>.</style>            The file usbsetup provides read and write access to endpoint
<style color=#00ffffff size=1>.</style>            0. When the file is read, it returns SETUP requests from the
<style color=#00ffffff size=1>.</style>            host. If a given request requires a reply, the reply must be
<style color=#00ffffff size=1>.</style>            written to the file (host requests will automatically be
<style color=#00ffffff size=1>.</style>            NAKd until then). Requests and replies are in binary form as
<style color=#00ffffff size=1>.</style>            defined in the USB specification, except for the reset
<style color=#00ffffff size=1>.</style>            message described below. The driver itself interprets all
<style color=#00ffffff size=1>.</style>            SET_ADDRESS requests from the host, and sets the
<style color=#00ffffff size=1>.</style>            controller's address accordingly. That request will
<style color=#00ffffff size=1>.</style>            therefore not be visible on the usbsetup file.

<style color=#00ffffff size=1>.</style>            A USB bus or device reset sets the controller's USB address
<style color=#00ffffff size=1>.</style>            to zero, the USB `default address' for configuration. It
<style color=#00ffffff size=1>.</style>            also resets all data toggles to DATA0. A subsequent read of
<style color=#00ffffff size=1>.</style>            usbsetup will return the following special 8-byte reset
<style color=#00ffffff size=1>.</style>            message:

<style color=#00ffffff size=1>.</style>                 byte 16rFF, byte 16rFF, byte 'r', byte 'e',
<style color=#00ffffff size=1>.</style>                 byte 's', byte 'e', byte 't', byte '\n'

<style color=#00ffffff size=1>.</style>            which does not resemble a normal SETUP message. Further
<style color=#00ffffff size=1>.</style>            reads and writes on usbdata will return errors until that
<style color=#00ffffff size=1>.</style>            file has been closed and reopened.

<style color=#00ffffff size=1>.</style>            The control file usbctl receives textual commands to set
<style color=#00ffffff size=1>.</style>            device parameters and responses:

<style color=#00ffffff size=1>.</style>            maxpktn nb
<style color=#00ffffff size=1>.</style>                 Set the maximum packet size for endpoint n to nb bytes.
<style color=#00ffffff size=1>.</style>                 Nb must be between 8 and 64 bytes for the control
<style color=#00ffffff size=1>.</style>                 endpoint 0, and between 1 and 1023 bytes for the other
<style color=#00ffffff size=1>.</style>                 endpoints. The default is 8 bytes for endpoint 0 and
<style color=#00ffffff size=1>.</style>                 1023 bytes for the others.

<style color=#00ffffff size=1>.</style>            rdtogn t
<style color=#00ffffff size=1>.</style>                 Set the data toggle for input in endpoint n to t, which
<style color=#00ffffff size=1>.</style>                 must be either 0 (DATA0) or 1 (DATA1).

<style color=#00ffffff size=1>.</style>            stalln
<style color=#00ffffff size=1>.</style>                 Cause endpoint n to respond to host IN and OUT tokens
<style color=#00ffffff size=1>.</style>                 by stalling.

<style color=#00ffffff size=1>.</style>            unstalln
<style color=#00ffffff size=1>.</style>                 Cancel the effect of a previous stall request on
<style color=#00ffffff size=1>.</style>                 endpoint n.

<style color=#00ffffff size=1>.</style>            wrtogn t
<style color=#00ffffff size=1>.</style>                 Set the data toggle for the next packet output by
<style color=#00ffffff size=1>.</style>                 endpoint n to t, which must be either 0 (DATA0) or 1
<style color=#00ffffff size=1>.</style>                 (DATA1).

<style color=#00ffffff size=1>.</style>            Stalling an endpoint causes IN and OUT transactions from the
<style color=#00ffffff size=1>.</style>            host to return a `stalled' error status. On the control
<style color=#00ffffff size=1>.</style>            endpoint (endpoint 0), however, SETUP transactions will
<style color=#00ffffff size=1>.</style>            still arrive on usbsetup, and the arrival of a SETUP will
<style color=#00ffffff size=1>.</style>            automatically clear the `stalled' status for the endpoint,
<style color=#00ffffff size=1>.</style>            allowing an application to reject a control request (by
<style color=#00ffffff size=1>.</style>            stalling the subsequent status transaction) without stalling
<style color=#00ffffff size=1>.</style>            the control endpoint by rejecting subsequent SETUP
<style color=#00ffffff size=1>.</style>            transactions.

<style color=#00ffffff size=1>.</style>            The status file usbstat is a read-only file, containing one
<style color=#00ffffff size=1>.</style>            line of statistics for each endpoint, giving: endpoint
<style color=#00ffffff size=1>.</style>            number\; data toggles\; maximum packet size\; count of input
<style color=#00ffffff size=1>.</style>            and output bytes and packets\; and counts of various error
<style color=#00ffffff size=1>.</style>            conditions.

<style color=#00ffffff size=1>.</style>            The read-only file usbaddr contains a single number giving
<style color=#00ffffff size=1>.</style>            the current device address.

<style color=#00ffffff size=1>.</style>            The read-only file usbframe contains a single line giving
<style color=#00ffffff size=1>.</style>            the current USB frame number.

SOURCE
<style color=#00ffffff size=1>.</style>            /os/mpc/devusb.c

<style color=#00ffffff size=1>.</style>                                Inferno Manual
