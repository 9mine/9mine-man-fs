<action name=VERSION(5)>VERSION(5)</action>                                             <action name=VERSION(5)>VERSION(5)</action>

NAME
<style color=#00ffffff size=1>.</style>            version - negotiate protocol version

SYNOPSIS
<style color=#00ffffff size=1>.</style>            size\[4\] Tversion tag\[2\] msize\[4\] version\[s\]
<style color=#00ffffff size=1>.</style>            size\[4\] Rversion tag\[2\] msize\[4\] version\[s\]

DESCRIPTION
<style color=#00ffffff size=1>.</style>            The version request negotiates the protocol version and
<style color=#00ffffff size=1>.</style>            message size to be used on the connection and initializes
<style color=#00ffffff size=1>.</style>            the connection for I/O. Tversion must be the first message
<style color=#00ffffff size=1>.</style>            sent on the 9P connection, and the client cannot issue any
<style color=#00ffffff size=1>.</style>            further requests until it has received the Rversion reply.
<style color=#00ffffff size=1>.</style>            The tag should be NOTAG (value (ushort)~0) for a version
<style color=#00ffffff size=1>.</style>            message.

<style color=#00ffffff size=1>.</style>            The client suggests a maximum message size, msize, that is
<style color=#00ffffff size=1>.</style>            the maximum length, in bytes, it will ever generate or
<style color=#00ffffff size=1>.</style>            expect to receive in a single 9P message. This count
<style color=#00ffffff size=1>.</style>            includes all 9P protocol data, starting from the size field
<style color=#00ffffff size=1>.</style>            and extending through the message, but excludes enveloping
<style color=#00ffffff size=1>.</style>            transport protocols. The server responds with its own
<style color=#00ffffff size=1>.</style>            maximum, msize, which must be less than or equal to the
<style color=#00ffffff size=1>.</style>            client's value. Thenceforth, both sides of the connection
<style color=#00ffffff size=1>.</style>            must honor this limit.

<style color=#00ffffff size=1>.</style>            The version string identifies the level of the protocol. The
<style color=#00ffffff size=1>.</style>            string must always begin with the two characters ``9P''. If
<style color=#00ffffff size=1>.</style>            the server does not understand the client's version string,
<style color=#00ffffff size=1>.</style>            it should respond with an Rversion message (not Rerror) with
<style color=#00ffffff size=1>.</style>            the version string the 7 characters ``unknown''.

<style color=#00ffffff size=1>.</style>            The server may respond with the client's version string, or
<style color=#00ffffff size=1>.</style>            a version string identifying an earlier defined protocol
<style color=#00ffffff size=1>.</style>            version. Currently, the only defined version is the 6
<style color=#00ffffff size=1>.</style>            characters ``9P2000''. Version strings are defined such
<style color=#00ffffff size=1>.</style>            that, if the client string contains one or more period
<style color=#00ffffff size=1>.</style>            characters, the initial substring up to but not including
<style color=#00ffffff size=1>.</style>            any single period in the version string defines a version of
<style color=#00ffffff size=1>.</style>            the protocol. After stripping any such period-separated
<style color=#00ffffff size=1>.</style>            suffix, the server is allowed to respond with a string of
<style color=#00ffffff size=1>.</style>            the form 9Pnnnn, where nnnn is less than or equal to the
<style color=#00ffffff size=1>.</style>            digits sent by the client.

<style color=#00ffffff size=1>.</style>            The client and server will use the protocol version defined
<style color=#00ffffff size=1>.</style>            by the server's response for all subsequent communication on
<style color=#00ffffff size=1>.</style>            the connection.

<style color=#00ffffff size=1>.</style>            A successful version request initializes the connection. All
<style color=#00ffffff size=1>.</style>            outstanding I/O on the connection is aborted\; all active
<style color=#00ffffff size=1>.</style>            fids are freed (`clunked') automatically. The set of
<style color=#00ffffff size=1>.</style>            messages between version requests is called a session.

ENTRY POINTS
<style color=#00ffffff size=1>.</style>            The version message is generated by sys-fversion (2). It is
<style color=#00ffffff size=1>.</style>            also generated automatically, if required, by a mount or
<style color=#00ffffff size=1>.</style>            fauth system call on an uninitialized connection.

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=sys-bind(2)>sys-bind(2)</action>, <action name=sys-fversion(2)>sys-fversion(2)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
