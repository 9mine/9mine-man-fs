STYXSERVER(10.2)                                 STYXSERVER(10.2)

NAME
<style color=#00ffffff size=1>.</style>            Styxserver - C Styx server library

SYNOPSIS
<style color=#00ffffff size=1>.</style>            #include <lib9.h>
<style color=#00ffffff size=1>.</style>            #include <styx.h>
<style color=#00ffffff size=1>.</style>            #include <styxserver.h>
<style color=#00ffffff size=1>.</style>            #define Qroot	0

<style color=#00ffffff size=1>.</style>            #define MSGMAX	((((8192+128)*2)+3) & ~3)

<style color=#00ffffff size=1>.</style>            extern char Enomem\[\]\;	/* out of memory */
<style color=#00ffffff size=1>.</style>            extern char Eperm\[\]\;		/* permission denied */
<style color=#00ffffff size=1>.</style>            extern char Enodev\[\]\;	/* no free devices */
<style color=#00ffffff size=1>.</style>            extern char Ehungup\[\]\;	/* i/o on hungup channel */
<style color=#00ffffff size=1>.</style>            extern char Eexist\[\]\;		/* file exists */
<style color=#00ffffff size=1>.</style>            extern char Enonexist\[\]\;	/* file does not exist */
<style color=#00ffffff size=1>.</style>            extern char Ebadcmd\[\]\;	/* bad command */
<style color=#00ffffff size=1>.</style>            extern char Ebadarg\[\]\;	/* bad arguments */

<style color=#00ffffff size=1>.</style>            typedef uvlong	Path\;
<style color=#00ffffff size=1>.</style>            typedef struct Styxserver	Styxserver\;
<style color=#00ffffff size=1>.</style>            typedef struct Styxops Styxops\;
<style color=#00ffffff size=1>.</style>            typedef struct Styxfile Styxfile\;
<style color=#00ffffff size=1>.</style>            typedef struct Client Client\;

<style color=#00ffffff size=1>.</style>            struct Styxserver
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            	Styxops *ops\;
<style color=#00ffffff size=1>.</style>            	Path qidgen\;
<style color=#00ffffff size=1>.</style>            	int connfd\;
<style color=#00ffffff size=1>.</style>            	Client *clients\;
<style color=#00ffffff size=1>.</style>            	Client *curc\;
<style color=#00ffffff size=1>.</style>            	Styxfile *root\;
<style color=#00ffffff size=1>.</style>            	Styxfile **ftab\;
<style color=#00ffffff size=1>.</style>            	void	*priv\;	/* private */
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            struct Client
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            	Styxserver *server\;
<style color=#00ffffff size=1>.</style>            	Client *next\;
<style color=#00ffffff size=1>.</style>            	int		fd\;
<style color=#00ffffff size=1>.</style>            	char	msg\[MSGMAX\]\;
<style color=#00ffffff size=1>.</style>            	uint		nread\;		/* valid bytes in msg (including nc)*/
<style color=#00ffffff size=1>.</style>            	int		nc\;		/* bytes consumed from front of msg by convM2S */
<style color=#00ffffff size=1>.</style>            	char	data\[MSGMAX\]\;	/* Tread/Rread data */
<style color=#00ffffff size=1>.</style>            	int		state\;
<style color=#00ffffff size=1>.</style>            	Fid		*fids\;
<style color=#00ffffff size=1>.</style>            	char		*uname\;	/* uid */
<style color=#00ffffff size=1>.</style>            	char		*aname\;	/* attach name */
<style color=#00ffffff size=1>.</style>            	void		*u\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            struct Styxops
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            	char *(*newclient)(Client *c)\;
<style color=#00ffffff size=1>.</style>            	char *(*freeclient)(Client *c)\;

<style color=#00ffffff size=1>.</style>            	char *(*attach)(char *uname, char *aname)\;
<style color=#00ffffff size=1>.</style>            	char *(*walk)(Qid *qid, char *name)\;
<style color=#00ffffff size=1>.</style>            	char *(*open)(Qid *qid, int mode)\;
<style color=#00ffffff size=1>.</style>            	char *(*create)(Qid *qid, char *name, int perm, int mode)\;
<style color=#00ffffff size=1>.</style>            	char *(*read)(Qid qid, char *buf, ulong *n, vlong offset)\;
<style color=#00ffffff size=1>.</style>            	char *(*write)(Qid qid, char *buf, ulong *n, vlong offset)\;
<style color=#00ffffff size=1>.</style>            	char *(*close)(Qid qid, int mode)\;
<style color=#00ffffff size=1>.</style>            	char *(*remove)(Qid qid)\;
<style color=#00ffffff size=1>.</style>            	char *(*stat)(Qid qid, Dir *d)\;
<style color=#00ffffff size=1>.</style>            	char *(*wstat)(Qid qid, Dir *d)\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            struct Styxfile
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            	Dir	d\;
<style color=#00ffffff size=1>.</style>            	Styxfile *parent\;
<style color=#00ffffff size=1>.</style>            	Styxfile *child\;
<style color=#00ffffff size=1>.</style>            	Styxfile *sibling\;
<style color=#00ffffff size=1>.</style>            	Styxfile *next\;
<style color=#00ffffff size=1>.</style>            	int ref\;
<style color=#00ffffff size=1>.</style>            	int open\;
<style color=#00ffffff size=1>.</style>            	void	*u\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            void styxsetowner(char *user)\;
<style color=#00ffffff size=1>.</style>            char *styxinit(Styxserver *server, Styxops *ops, char *port, int perm, int needfile)\;
<style color=#00ffffff size=1>.</style>            char *styxwait(Styxserver *server)\;
<style color=#00ffffff size=1>.</style>            char *styxprocess(Styxserver *server)\;
<style color=#00ffffff size=1>.</style>            char *styxend(Styxserver *server)\;

<style color=#00ffffff size=1>.</style>            Client *styxclient(Styxserver *server)\;

<style color=#00ffffff size=1>.</style>            Styxfile *styxaddfile(Styxserver *server, Path pqid, Path qid, char *name,
<style color=#00ffffff size=1>.</style>            					int mode, char *owner)\;
<style color=#00ffffff size=1>.</style>            Styxfile *styxadddir(Styxserver *server, Path pqid, Path qid, char *name,
<style color=#00ffffff size=1>.</style>            					int mode, char *owner)\;
<style color=#00ffffff size=1>.</style>            int styxrmfile(Styxserver *server, Path qid)\;
<style color=#00ffffff size=1>.</style>            Styxfile *styxfindfile(Styxserver *server, Path qid)\;

<style color=#00ffffff size=1>.</style>            int	styxperm(Styxfile *file, char *uid, int mode)\;
<style color=#00ffffff size=1>.</style>            long styxreadstr(ulong off, char *buf, ulong n, char *str)\;
<style color=#00ffffff size=1>.</style>            Qid styxqid(int path, int isdir)\;
<style color=#00ffffff size=1>.</style>            void *styxmalloc(int bytes)\;
<style color=#00ffffff size=1>.</style>            void styxfree(void *p)\;
<style color=#00ffffff size=1>.</style>            void styxdebug(void)\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            The C Styx server library provides a small suite of
<style color=#00ffffff size=1>.</style>            functions to enable the production of a file server based on
<style color=#00ffffff size=1>.</style>            the Inferno Styx protocol. The following elements define the
<style color=#00ffffff size=1>.</style>            primary routines in the interface:

<style color=#00ffffff size=1>.</style>            styxinit(server, ops, port, perm, needfile)
<style color=#00ffffff size=1>.</style>                 Initializes the interface given a pointer to a
<style color=#00ffffff size=1>.</style>                 Styxserver structure server , a callback table of
<style color=#00ffffff size=1>.</style>                 operations ops , a port number port to announce the
<style color=#00ffffff size=1>.</style>                 file service on and the permissions perm on the root
<style color=#00ffffff size=1>.</style>                 directory. The default permission is 0555 (read and
<style color=#00ffffff size=1>.</style>                 execute for user, group and others) if the latter is
<style color=#00ffffff size=1>.</style>                 specified as -1. If the last argument needfile is set
<style color=#00ffffff size=1>.</style>                 to true, the styx library will check that each path
<style color=#00ffffff size=1>.</style>                 number it deals with has a corresponding file
<style color=#00ffffff size=1>.</style>                 associated with it and, if it hasn't, it will issue a
<style color=#00ffffff size=1>.</style>                 "file does not exist" message automatically. In case of
<style color=#00ffffff size=1>.</style>                 an error, the error message is returned, otherwise nil
<style color=#00ffffff size=1>.</style>                 is returned to indicate success. By default, files are
<style color=#00ffffff size=1>.</style>                 owned by inferno\; styxsetowner can be called before
<style color=#00ffffff size=1>.</style>                 styxinit to make user the default owner of files.

<style color=#00ffffff size=1>.</style>            styxwait(server)
<style color=#00ffffff size=1>.</style>                 Waits for communication from a client. Return value as
<style color=#00ffffff size=1>.</style>                 above.

<style color=#00ffffff size=1>.</style>            styxprocess(server)
<style color=#00ffffff size=1>.</style>                 Processes the client message after a successful call to
<style color=#00ffffff size=1>.</style>                 styxwait . This may result in calls to the functions in
<style color=#00ffffff size=1>.</style>                 the table provided to styxinit . Return value as above.

<style color=#00ffffff size=1>.</style>            styxend(server)
<style color=#00ffffff size=1>.</style>                 End all file service. Return value as above.

<style color=#00ffffff size=1>.</style>            styxclient(server)
<style color=#00ffffff size=1>.</style>                 Returns the client whose request is currently being
<style color=#00ffffff size=1>.</style>                 processed.

<style color=#00ffffff size=1>.</style>            The next set of functions allow the creation of a file
<style color=#00ffffff size=1>.</style>            system structure based upon the Styxfile structure. This
<style color=#00ffffff size=1>.</style>            contains a Dir structure d describing the properties of the
<style color=#00ffffff size=1>.</style>            file (defined in lib9.h) and pointers to other files in the
<style color=#00ffffff size=1>.</style>            file tree: parent , child , sibling and next . The ref field
<style color=#00ffffff size=1>.</style>            counts current references to the file. The open field counts
<style color=#00ffffff size=1>.</style>            the current number of opens on the file. Finally the u field
<style color=#00ffffff size=1>.</style>            allows further fields to be tagged onto each file. It is not
<style color=#00ffffff size=1>.</style>            used by the Styx server library.

<style color=#00ffffff size=1>.</style>            Each file must have a unique path number in the server. The
<style color=#00ffffff size=1>.</style>            root of the tree Qroot always has path number zero. It's
<style color=#00ffffff size=1>.</style>            corresponding file is created during library initialization
<style color=#00ffffff size=1>.</style>            and placed in the root field of the server structure. All
<style color=#00ffffff size=1>.</style>            other files must be supplied with a path number to identify
<style color=#00ffffff size=1>.</style>            them. Files are created/deleted as follows:

<style color=#00ffffff size=1>.</style>            styxaddfile(server, ppath, path, name, mode, owner)
<style color=#00ffffff size=1>.</style>                 Add a new file (ie non-directory) with the given path
<style color=#00ffffff size=1>.</style>                 path , name name , mode mode and owner owner to the
<style color=#00ffffff size=1>.</style>                 directory identified by the path ppath . If path is -1
<style color=#00ffffff size=1>.</style>                 the library will generate a unique path number instead.
<style color=#00ffffff size=1>.</style>                 Returns nil if the parent file with path ppath does not
<style color=#00ffffff size=1>.</style>                 exist, if the parent is not a directory, if the path
<style color=#00ffffff size=1>.</style>                 number path already is assigned to a file or if the
<style color=#00ffffff size=1>.</style>                 parent already contains a file of name name .

<style color=#00ffffff size=1>.</style>            styxadddir(server, ppath, path, name, mode, owner)
<style color=#00ffffff size=1>.</style>                 Add a new directory with the given path path , name
<style color=#00ffffff size=1>.</style>                 name , mode mode and owner owner to the directory
<style color=#00ffffff size=1>.</style>                 identified by the path ppath . Returns nil in the same
<style color=#00ffffff size=1>.</style>                 circumstances as styxaddfile .

<style color=#00ffffff size=1>.</style>            styxrmfile(server, path)
<style color=#00ffffff size=1>.</style>                 Remove the file or directory with path path from the
<style color=#00ffffff size=1>.</style>                 file server tree. If the file is a directory, it's
<style color=#00ffffff size=1>.</style>                 contents will be recursively removed. If the file does
<style color=#00ffffff size=1>.</style>                 not exist, -1 is returned, otherwise 0 is returned for
<style color=#00ffffff size=1>.</style>                 success.

<style color=#00ffffff size=1>.</style>            styxfindfile(server, path)
<style color=#00ffffff size=1>.</style>                 Return the file structure corresponding to the file or
<style color=#00ffffff size=1>.</style>                 directory with path path . Nil is returned if the file
<style color=#00ffffff size=1>.</style>                 does not exist.

<style color=#00ffffff size=1>.</style>            If the file system is created in this way the Styx library
<style color=#00ffffff size=1>.</style>            will check read/write/execute permissions, check for invalid
<style color=#00ffffff size=1>.</style>            uses of files and check that path numbers exist in the file
<style color=#00ffffff size=1>.</style>            system (see styxinit for the latter). If it's not feasible
<style color=#00ffffff size=1>.</style>            to do this (for instance if there is a more suitable way of
<style color=#00ffffff size=1>.</style>            describing the file system in question), then all file
<style color=#00ffffff size=1>.</style>            checking must be done as part of the callback functions
<style color=#00ffffff size=1>.</style>            below.

<style color=#00ffffff size=1>.</style>            The library provides a callback mechanism so that the
<style color=#00ffffff size=1>.</style>            implementer of the file server can take corresponding action
<style color=#00ffffff size=1>.</style>            when a particular request is made of the server. All of
<style color=#00ffffff size=1>.</style>            these functions may return an error message which will be
<style color=#00ffffff size=1>.</style>            communicated back to the client. Otherwise they should
<style color=#00ffffff size=1>.</style>            return nil to indicate the success of the operation. Any of
<style color=#00ffffff size=1>.</style>            these functions may be nil in which case the library
<style color=#00ffffff size=1>.</style>            performs a default operation which will be described below.
<style color=#00ffffff size=1>.</style>            These routines use the Qid structure defined in lib9.h to
<style color=#00ffffff size=1>.</style>            describe files. This structure contains the path number(
<style color=#00ffffff size=1>.</style>            path ), a version number( vers ) typically zero and a type(
<style color=#00ffffff size=1>.</style>            type ) which indicates whether the file is a directory,
<style color=#00ffffff size=1>.</style>            append-only etc.

<style color=#00ffffff size=1>.</style>            newclient(c)
<style color=#00ffffff size=1>.</style>                 Called whenever a new client connects to the server.
<style color=#00ffffff size=1>.</style>                 The Client structure c contains mainly private data but
<style color=#00ffffff size=1>.</style>                 the uname field contains a user name and the aname
<style color=#00ffffff size=1>.</style>                 field an attach name if required. The u field may be
<style color=#00ffffff size=1>.</style>                 used to tag further data onto each client. It is not
<style color=#00ffffff size=1>.</style>                 used by the Styx server library.

<style color=#00ffffff size=1>.</style>            freeclient(c)
<style color=#00ffffff size=1>.</style>                 Called whenever a client disconnects from the server.

<style color=#00ffffff size=1>.</style>            attach(uname, aname)
<style color=#00ffffff size=1>.</style>                 Called when a client user first mounts the file server.
<style color=#00ffffff size=1>.</style>                 The uname is the user id and aname is typically the
<style color=#00ffffff size=1>.</style>                 file tree to access if the server provides a choice.
<style color=#00ffffff size=1>.</style>                 The default action is to allow the attach to the root
<style color=#00ffffff size=1>.</style>                 of the file system.

<style color=#00ffffff size=1>.</style>            walk(qid, name)
<style color=#00ffffff size=1>.</style>                 In a directory represented by qid , find a file member
<style color=#00ffffff size=1>.</style>                 whose name is that given and place it's Qid in qid .
<style color=#00ffffff size=1>.</style>                 The default action is to perform the walk using any
<style color=#00ffffff size=1>.</style>                 directory structure provided.

<style color=#00ffffff size=1>.</style>            open(qid, mode)
<style color=#00ffffff size=1>.</style>                 Open the file represented by qid with mode mode . The
<style color=#00ffffff size=1>.</style>                 latter may be one of OREAD, OWRITE, ORDWR etc (see
<style color=#00ffffff size=1>.</style>                 lib9.h). If the Qid of the newly opened file is
<style color=#00ffffff size=1>.</style>                 different from that given (a file server may understand
<style color=#00ffffff size=1>.</style>                 the opening of a file called "new" say to signify the
<style color=#00ffffff size=1>.</style>                 creation of a directory whose Qid is returned instead)
<style color=#00ffffff size=1>.</style>                 place it's Qid in qid . The default action is to
<style color=#00ffffff size=1>.</style>                 nominally allow the open.

<style color=#00ffffff size=1>.</style>            create(qid, name, perm, mode)
<style color=#00ffffff size=1>.</style>                 Create a file in the directory given by qid with name
<style color=#00ffffff size=1>.</style>                 name , permissions perm and mode mode . Place the Qid
<style color=#00ffffff size=1>.</style>                 of the newly created file in qid . The default action
<style color=#00ffffff size=1>.</style>                 is to issue a permission denied message.

<style color=#00ffffff size=1>.</style>            read(qid, buf, n, offset)
<style color=#00ffffff size=1>.</style>                 Read n bytes of the file represented by qid at offset
<style color=#00ffffff size=1>.</style>                 offset and place the result in buf.  Place in n the
<style color=#00ffffff size=1>.</style>                 actual number of bytes read. The default action is to
<style color=#00ffffff size=1>.</style>                 read directories but to issue permission denied on
<style color=#00ffffff size=1>.</style>                 ordinary files.

<style color=#00ffffff size=1>.</style>            write(qid, buf, n, offset)
<style color=#00ffffff size=1>.</style>                 Write n bytes to the file represented by qid at offset
<style color=#00ffffff size=1>.</style>                 offset from the buffer buf.  Place in n the actual
<style color=#00ffffff size=1>.</style>                 number of bytes written. The default action is to issue
<style color=#00ffffff size=1>.</style>                 permission denied.

<style color=#00ffffff size=1>.</style>            close(qid, mode)
<style color=#00ffffff size=1>.</style>                 Close the file represented by qid . The mode it was
<style color=#00ffffff size=1>.</style>                 originally opened with is given by mode . The default
<style color=#00ffffff size=1>.</style>                 action is to allow the close.

<style color=#00ffffff size=1>.</style>            remove(qid)
<style color=#00ffffff size=1>.</style>                 Remove the file represented by qid . The default action
<style color=#00ffffff size=1>.</style>                 is to issue a permission denied message.

<style color=#00ffffff size=1>.</style>            stat(qid, d)
<style color=#00ffffff size=1>.</style>                 Place the information for the file represented by qid
<style color=#00ffffff size=1>.</style>                 in the Dir structure(see lib9.h) d . The default action
<style color=#00ffffff size=1>.</style>                 is to allow the stat using any information in the file
<style color=#00ffffff size=1>.</style>                 tree.

<style color=#00ffffff size=1>.</style>            wstat(qid, d)
<style color=#00ffffff size=1>.</style>                 Update the information for the file represented by qid
<style color=#00ffffff size=1>.</style>                 according to the Dir structure d . The default action
<style color=#00ffffff size=1>.</style>                 is to disallow this with a permission denied message.

<style color=#00ffffff size=1>.</style>            A small number of utility functions are provided:

<style color=#00ffffff size=1>.</style>            styxperm(file, uid, mode)
<style color=#00ffffff size=1>.</style>                 Does the file/directory file allow the user uid the
<style color=#00ffffff size=1>.</style>                 permission given by mode . For example use OREAD for
<style color=#00ffffff size=1>.</style>                 read permission, OWRITE for write permission and ORDWR
<style color=#00ffffff size=1>.</style>                 for both.

<style color=#00ffffff size=1>.</style>            styxreadstr(off, buf, n, str)
<style color=#00ffffff size=1>.</style>                 Read n bytes of data from the string str at offset off
<style color=#00ffffff size=1>.</style>                 and place the result in buf . Returns the actual number
<style color=#00ffffff size=1>.</style>                 of bytes read.

<style color=#00ffffff size=1>.</style>            styxqid(path, isdir)
<style color=#00ffffff size=1>.</style>                 Returns a typical Qid structure with the given path
<style color=#00ffffff size=1>.</style>                 number path and whether the Qid is for a directory
<style color=#00ffffff size=1>.</style>                 isdir .

<style color=#00ffffff size=1>.</style>            styxmalloc(n)
<style color=#00ffffff size=1>.</style>                 Allocate n bytes of memory and return it.

<style color=#00ffffff size=1>.</style>            styxfree(p)
<style color=#00ffffff size=1>.</style>                 Free the memory pointed to by p .

<style color=#00ffffff size=1>.</style>            styxdebug()
<style color=#00ffffff size=1>.</style>                 Print out some of the actions of the server.

EXAMPLE
<style color=#00ffffff size=1>.</style>            A very small file server example is illustrated. First the
<style color=#00ffffff size=1>.</style>            include files and globals.

<style color=#00ffffff size=1>.</style>            	#include <lib9.h>
<style color=#00ffffff size=1>.</style>            	#include "styxserver.h"

<style color=#00ffffff size=1>.</style>            	int nq\;
<style color=#00ffffff size=1>.</style>            	Styxserver *server\;

<style color=#00ffffff size=1>.</style>            The main processing loop:

<style color=#00ffffff size=1>.</style>            	main(int argc, char **argv)
<style color=#00ffffff size=1>.</style>            	{
<style color=#00ffffff size=1>.</style>            		Styxserver s\;

<style color=#00ffffff size=1>.</style>            		server = &s\;
<style color=#00ffffff size=1>.</style>            		styxinit(&s, &ops, "6701", 100, 0555, 0)\;
<style color=#00ffffff size=1>.</style>            		myinit(&s)\;
<style color=#00ffffff size=1>.</style>            		for(\;\;) {
<style color=#00ffffff size=1>.</style>            			styxwait(&s)\;
<style color=#00ffffff size=1>.</style>            			styxprocess(&s)\;
<style color=#00ffffff size=1>.</style>            		}
<style color=#00ffffff size=1>.</style>            		return 0\;
<style color=#00ffffff size=1>.</style>            	}

<style color=#00ffffff size=1>.</style>            Here the port number is 6701 and the root file permissions
<style color=#00ffffff size=1>.</style>            are 0555 - no write permission for anyone which implies that
<style color=#00ffffff size=1>.</style>            files and directories cannot be created in the root
<style color=#00ffffff size=1>.</style>            directory.

<style color=#00ffffff size=1>.</style>            The creation of the directory tree:

<style color=#00ffffff size=1>.</style>            	myinit(Styxserver *s)
<style color=#00ffffff size=1>.</style>            	{
<style color=#00ffffff size=1>.</style>            		styxaddfile(s, Qroot, 1, "fred", 0664, "inferno")\;
<style color=#00ffffff size=1>.</style>            		styxaddfile(s, Qroot, 2, "joe", 0664, "inferno")\;
<style color=#00ffffff size=1>.</style>            		styxadddir(s, Qroot, 3, "adir", 0775, "inferno")\;
<style color=#00ffffff size=1>.</style>            		styxaddfile(s, 3, 4, "bill", 0664, "inferno")\;
<style color=#00ffffff size=1>.</style>            		styxadddir(s, Qroot, 5, "new", 0775, "inferno")\;
<style color=#00ffffff size=1>.</style>            		styxadddir(s, 5, 6, "cdir", 0775, "inferno")\;
<style color=#00ffffff size=1>.</style>            		styxaddfile(s, 6, 7, "cfile", 0664, "inferno")\;
<style color=#00ffffff size=1>.</style>            		nq = 8\;
<style color=#00ffffff size=1>.</style>            	}

<style color=#00ffffff size=1>.</style>            This creates two files fred and joe and two directories adir
<style color=#00ffffff size=1>.</style>            and new at the top level. adir contains a file called bill
<style color=#00ffffff size=1>.</style>            and new contains a directory called cdir which contains a
<style color=#00ffffff size=1>.</style>            file called cfile . Note that each new path number is
<style color=#00ffffff size=1>.</style>            unique.

<style color=#00ffffff size=1>.</style>            The callback functions:

<style color=#00ffffff size=1>.</style>            	Styxops ops = {
<style color=#00ffffff size=1>.</style>            		nil,			/* newclient */
<style color=#00ffffff size=1>.</style>            		nil,			/* freeclient */

<style color=#00ffffff size=1>.</style>            		nil,			/* attach */
<style color=#00ffffff size=1>.</style>            		nil,			/* walk */
<style color=#00ffffff size=1>.</style>            		nil,			/* open */
<style color=#00ffffff size=1>.</style>            		mycreate,		/* create */
<style color=#00ffffff size=1>.</style>            		myread,		/* read */
<style color=#00ffffff size=1>.</style>            		nil,			/* write */
<style color=#00ffffff size=1>.</style>            		nil,			/* close */
<style color=#00ffffff size=1>.</style>            		myremove,	/* remove */
<style color=#00ffffff size=1>.</style>            		nil,			/* stat */
<style color=#00ffffff size=1>.</style>            		nil,			/* wstat */
<style color=#00ffffff size=1>.</style>            	}\;

<style color=#00ffffff size=1>.</style>            Here we choose the defaults most of the time.

<style color=#00ffffff size=1>.</style>            The supplied callback routines:

<style color=#00ffffff size=1>.</style>            	char *
<style color=#00ffffff size=1>.</style>            	mycreate(Qid *qid, char *name, int perm, int mode)
<style color=#00ffffff size=1>.</style>            	{
<style color=#00ffffff size=1>.</style>            		int isdir\;
<style color=#00ffffff size=1>.</style>            		Styxfile *f\;

<style color=#00ffffff size=1>.</style>            		isdir = perm&DMDIR\;
<style color=#00ffffff size=1>.</style>            		if(isdir)
<style color=#00ffffff size=1>.</style>            			f = styxadddir(server, qid->path, nq++, name , perm, "inferno")\;
<style color=#00ffffff size=1>.</style>            		else
<style color=#00ffffff size=1>.</style>            			f = styxaddfile(server, qid->path, nq++, name, perm, "inferno")\;
<style color=#00ffffff size=1>.</style>            		if(f == nil)
<style color=#00ffffff size=1>.</style>            			return Eexist\;
<style color=#00ffffff size=1>.</style>            		*qid = f->d.qid\;
<style color=#00ffffff size=1>.</style>            		return nil\;
<style color=#00ffffff size=1>.</style>            	}

<style color=#00ffffff size=1>.</style>            	char *
<style color=#00ffffff size=1>.</style>            	myremove(Qid qid)
<style color=#00ffffff size=1>.</style>            	{
<style color=#00ffffff size=1>.</style>            		Styxfile *f\;

<style color=#00ffffff size=1>.</style>            		f = styxfindfile(server, qid.path)\;
<style color=#00ffffff size=1>.</style>            		if(f != nil && (f->d.qid.type&QTDIR) && f->child != nil)
<style color=#00ffffff size=1>.</style>            			return "directory not empty"\;

<style color=#00ffffff size=1>.</style>            		if(styxrmfile(server, qid.path) < 0)
<style color=#00ffffff size=1>.</style>            			return Enonexist\;
<style color=#00ffffff size=1>.</style>            		return nil\;
<style color=#00ffffff size=1>.</style>            	}

<style color=#00ffffff size=1>.</style>            	char *
<style color=#00ffffff size=1>.</style>            	myread(Qid qid, char *d, ulong *n, vlong offset)
<style color=#00ffffff size=1>.</style>            	{
<style color=#00ffffff size=1>.</style>            		if(qid.path != 1){
<style color=#00ffffff size=1>.</style>            			*n = 0\;
<style color=#00ffffff size=1>.</style>            			return nil\;
<style color=#00ffffff size=1>.</style>            		}
<style color=#00ffffff size=1>.</style>            		*n = styxreadstr(offset, d, *n, "abcdeghijklmn")\;
<style color=#00ffffff size=1>.</style>            		return nil\;
<style color=#00ffffff size=1>.</style>            	}

<style color=#00ffffff size=1>.</style>            Permission checking for walk (need execute permission on
<style color=#00ffffff size=1>.</style>            directory), open (the given mode must be compatible with the
<style color=#00ffffff size=1>.</style>            file permissions), create and remove (both of which need
<style color=#00ffffff size=1>.</style>            write permission on directory) is done automatically
<style color=#00ffffff size=1>.</style>            whenever possible. The functions mycreate and myremove below
<style color=#00ffffff size=1>.</style>            therefore can omit these checks.

<style color=#00ffffff size=1>.</style>            The function mycreate simply creates a directory or file and
<style color=#00ffffff size=1>.</style>            if the file cannot be added to the directory tree it returns
<style color=#00ffffff size=1>.</style>            a 'file exists' error string. It sets the Qid for the newly
<style color=#00ffffff size=1>.</style>            created file before returning.

<style color=#00ffffff size=1>.</style>            The function myremove first checks to see if the file
<style color=#00ffffff size=1>.</style>            represents a non-empty directory, in which case it disallows
<style color=#00ffffff size=1>.</style>            it's removal. Otherwise it removes the file if it can find
<style color=#00ffffff size=1>.</style>            it and returns a 'file does not exist' error string if it
<style color=#00ffffff size=1>.</style>            can't.

<style color=#00ffffff size=1>.</style>            The function myread considers all files to be empty except
<style color=#00ffffff size=1>.</style>            for fred which notionally contains abcdefghijklmn . Note
<style color=#00ffffff size=1>.</style>            that the number of bytes read is returned in the argument n
<style color=#00ffffff size=1>.</style>            .

<style color=#00ffffff size=1>.</style>            Once this file server is running, the root can be accessed
<style color=#00ffffff size=1>.</style>            by doing for example

<style color=#00ffffff size=1>.</style>            	mount -A tcp!<address>!6701 /n/remote

<style color=#00ffffff size=1>.</style>            under Inferno. Here <address> is the address of the machine
<style color=#00ffffff size=1>.</style>            running the file server (or the loopback address 127.0.0.1
<style color=#00ffffff size=1>.</style>            if it's all on one machine). The -A option is used to
<style color=#00ffffff size=1>.</style>            prevent authentication which is not supported at the moment.
<style color=#00ffffff size=1>.</style>            Then we can do

<style color=#00ffffff size=1>.</style>            	cd /n/remote
<style color=#00ffffff size=1>.</style>            	ls
<style color=#00ffffff size=1>.</style>            	adir
<style color=#00ffffff size=1>.</style>            	fred
<style color=#00ffffff size=1>.</style>            	joe
<style color=#00ffffff size=1>.</style>            	new
<style color=#00ffffff size=1>.</style>            	...

<style color=#00ffffff size=1>.</style>            For a more complicated file server see
<style color=#00ffffff size=1>.</style>            /tools/styxtest/styxtest.c.

<style color=#00ffffff size=1>.</style>            The file /tools/styxtest/mkfile shows how to compile and
<style color=#00ffffff size=1>.</style>            link the file server sources.

SOURCE
<style color=#00ffffff size=1>.</style>            /Nt/386/include/lib9.h
<style color=#00ffffff size=1>.</style>            /tools/libstyx/styxserver.h
<style color=#00ffffff size=1>.</style>            /tools/libstyx/styxserver.c
<style color=#00ffffff size=1>.</style>            /tools/styxtest/styxtest.c
<style color=#00ffffff size=1>.</style>            /tools/styxtest/styxtest0.c

BUGS
<style color=#00ffffff size=1>.</style>            Currently the library is available under Windows, Linux and
<style color=#00ffffff size=1>.</style>            Solaris only.
<style color=#00ffffff size=1>.</style>            Authentication is not supported.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
