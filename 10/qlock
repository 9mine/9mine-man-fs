QLOCK(10.2)                                           QLOCK(10.2)

NAME
<style color=#00ffffff size=1>.</style>            qlock, qunlock, canqlock, rlock, runlock, wlock, wunlock -
<style color=#00ffffff size=1>.</style>            serial synchronisation

SYNOPSIS
<style color=#00ffffff size=1>.</style>            void	qlock(QLock *l)

<style color=#00ffffff size=1>.</style>            void	qunlock(QLock *l)

<style color=#00ffffff size=1>.</style>            int	canqlock(QLock *l)

<style color=#00ffffff size=1>.</style>            void	rlock(RWlock *l)

<style color=#00ffffff size=1>.</style>            void	runlock(RWlock *l)

<style color=#00ffffff size=1>.</style>            int	canrlock(RWlock *l)

<style color=#00ffffff size=1>.</style>            void	wlock(RWlock *l)

<style color=#00ffffff size=1>.</style>            void	wunlock(RWlock *l)

DESCRIPTION
<style color=#00ffffff size=1>.</style>            The primitive locking functions described in lock(10.2)
<style color=#00ffffff size=1>.</style>            guarantee mutual exclusion, but they implement spin locks,
<style color=#00ffffff size=1>.</style>            and should not be used if the process might sleep(10.2)
<style color=#00ffffff size=1>.</style>            within a critical section. The following functions serialise
<style color=#00ffffff size=1>.</style>            access to a resource by forming an orderly queue of
<style color=#00ffffff size=1>.</style>            processes.

<style color=#00ffffff size=1>.</style>            Each resource to be controlled is given an associated QLock
<style color=#00ffffff size=1>.</style>            structure\; it is usually most straightforward to put the
<style color=#00ffffff size=1>.</style>            QLock in the structure that represents the resource. It must
<style color=#00ffffff size=1>.</style>            be initialised to zero before use (as guaranteed for global
<style color=#00ffffff size=1>.</style>            variables and for structures allocated by malloc).

<style color=#00ffffff size=1>.</style>            On return from qlock, the process has acquired the lock l,
<style color=#00ffffff size=1>.</style>            and can assume exclusive access to the associated resource.
<style color=#00ffffff size=1>.</style>            If the lock is not immediately available, the requesting
<style color=#00ffffff size=1>.</style>            process is placed on a FIFO queue of processes that have
<style color=#00ffffff size=1>.</style>            requested the lock. Processes on this list are blocked in
<style color=#00ffffff size=1>.</style>            the ``Queueing'' state.

<style color=#00ffffff size=1>.</style>            Qunlock unlocks l and schedules the first process queued for
<style color=#00ffffff size=1>.</style>            it (if any).

<style color=#00ffffff size=1>.</style>            Canqlock is a non-blocking form of qlock. It tries to obtain
<style color=#00ffffff size=1>.</style>            the lock l and returns true if successful, and 0 otherwise\;
<style color=#00ffffff size=1>.</style>            it always returns immediately.

<style color=#00ffffff size=1>.</style>            RWlock is a form of lock for resources that have distinct
<style color=#00ffffff size=1>.</style>            readers and writers. It allows concurrent readers but gives
<style color=#00ffffff size=1>.</style>            each writer exclusive access. A caller announces its read or
<style color=#00ffffff size=1>.</style>            write intentions by choice of lock (and unlock) function\;
<style color=#00ffffff size=1>.</style>            the system assumes the caller will not modify a structure
<style color=#00ffffff size=1>.</style>            accessed under read lock.

<style color=#00ffffff size=1>.</style>            Rlock acquires l for reading. The holder can read but agrees
<style color=#00ffffff size=1>.</style>            not to modify the resource. There may be several concurrent
<style color=#00ffffff size=1>.</style>            readers. Canrlock is non-blocking: it returns non-zero if it
<style color=#00ffffff size=1>.</style>            successfully acquired the lock immediately, and 0 if the
<style color=#00ffffff size=1>.</style>            resource was unavailable.

<style color=#00ffffff size=1>.</style>            Runlock returns a read lock\; the last reader out enables the
<style color=#00ffffff size=1>.</style>            first writer waiting (if any).

<style color=#00ffffff size=1>.</style>            Wlock acquires a write lock. The holder of such a lock may
<style color=#00ffffff size=1>.</style>            assume exclusive access to the resource, and is allowed to
<style color=#00ffffff size=1>.</style>            modify it.

<style color=#00ffffff size=1>.</style>            Wunlock returns a write lock. The next pending process,
<style color=#00ffffff size=1>.</style>            whether reader or writer, is scheduled.

SOURCE
<style color=#00ffffff size=1>.</style>            /os/port/qlock.c
<style color=#00ffffff size=1>.</style>            /os/emu/port/lock.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            lock(10.2), splhi(10.2)

<style color=#00ffffff size=1>.</style>                                Inferno Manual
