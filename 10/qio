QIO(10.2)                                               QIO(10.2)

NAME
<style color=#00ffffff size=1>.</style>            qio: qget, qdiscard, qconsume, qpass, qproduce, qcopy,
<style color=#00ffffff size=1>.</style>            qopen, qbread, qread, qbwrite, qwrite, qiwrite, qfree,
<style color=#00ffffff size=1>.</style>            qclose, qhangup, qreopen, qlen, qwindow, qcanread,
<style color=#00ffffff size=1>.</style>            qsetlimit, qnoblock, qflush, qfull - queued I/O for devices

SYNOPSIS
<style color=#00ffffff size=1>.</style>            Queue*	qopen(int limit,int msg, void (*kick)(void*),void
<style color=#00ffffff size=1>.</style>            *arg)

<style color=#00ffffff size=1>.</style>            void	qhangup(Queue *q, char *reason)

<style color=#00ffffff size=1>.</style>            void	qclose(Queue *q)

<style color=#00ffffff size=1>.</style>            void	qreopen(Queue *q)

<style color=#00ffffff size=1>.</style>            void	qfree(Queue *q)

<style color=#00ffffff size=1>.</style>            long	qbwrite(Queue *q, Block *b)

<style color=#00ffffff size=1>.</style>            long	qwrite(Queue *q, void *buf, int len)

<style color=#00ffffff size=1>.</style>            int	qpass(Queue *q, Block *b)

<style color=#00ffffff size=1>.</style>            int	qpassnolim(Queue *q, Block *b)

<style color=#00ffffff size=1>.</style>            int	qproduce(Queue *q, void	*buf, int len)

<style color=#00ffffff size=1>.</style>            int	qiwrite(Queue *q, void *buf, int len)

<style color=#00ffffff size=1>.</style>            Block*	qbread(Queue *q, int len)

<style color=#00ffffff size=1>.</style>            long	qread(Queue *q, void *buf, int len)

<style color=#00ffffff size=1>.</style>            Block*	qcopy(Queue *q, int len, ulong offset)

<style color=#00ffffff size=1>.</style>            Block*	qget(Queue *q)

<style color=#00ffffff size=1>.</style>            int	qconsume(Queue *q, void *buf, int len)

<style color=#00ffffff size=1>.</style>            int	qdiscard(Queue *q, int len)

<style color=#00ffffff size=1>.</style>            void	qflush(Queue *q)

<style color=#00ffffff size=1>.</style>            int	qlen(Queue *q)

<style color=#00ffffff size=1>.</style>            int	qwindow(Queue *q)

<style color=#00ffffff size=1>.</style>            int	qcanread(Queue *q)

<style color=#00ffffff size=1>.</style>            void	qsetlimit(Queue *q, int limit)

<style color=#00ffffff size=1>.</style>            void	qnoblock(Queue *q, int nonblock)

<style color=#00ffffff size=1>.</style>            int	qfull(Queue *q)\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            This suite of functions provides serial data buffering for
<style color=#00ffffff size=1>.</style>            device drivers. Data is stored in a Queue structure as a
<style color=#00ffffff size=1>.</style>            sequence of variable-sized Blocks\; see allocb(10.2).

<style color=#00ffffff size=1>.</style>            Qopen initialises and returns a pointer to a new Queue,
<style color=#00ffffff size=1>.</style>            configuring it according to the following parameters:

<style color=#00ffffff size=1>.</style>            limit  Set the queue limit (high water mark) in bytes.

<style color=#00ffffff size=1>.</style>            msg    Set message mode if non-zero\; otherwise, stream mode
<style color=#00ffffff size=1>.</style>                   (discussed below).

<style color=#00ffffff size=1>.</style>            kick   Optional flow-control function called by qbread to
<style color=#00ffffff size=1>.</style>                   restart writers, and by qbwrite (also qiwrite) to
<style color=#00ffffff size=1>.</style>                   restart readers.

<style color=#00ffffff size=1>.</style>            arg    Argument to pass to kick

<style color=#00ffffff size=1>.</style>            Qhangup marks q as `hung up' for the given reason (Ehungup
<style color=#00ffffff size=1>.</style>            by default). Subsequent attempts to write to the queue raise
<style color=#00ffffff size=1>.</style>            an error(10.2). Qhangup does not flush the queue: subsequent
<style color=#00ffffff size=1>.</style>            read requests are handled normally until the queue empties.
<style color=#00ffffff size=1>.</style>            Qread and the other functions then return their conventional
<style color=#00ffffff size=1>.</style>            values for a hungup stream: 0, -1 or a null pointer,
<style color=#00ffffff size=1>.</style>            depending on the function. After a few such attempts by any
<style color=#00ffffff size=1>.</style>            process, an error(10.2) is raised (typically Ehungup) on
<style color=#00ffffff size=1>.</style>            each subsequent read.

<style color=#00ffffff size=1>.</style>            If queued data is left unread, and not flushed by qflush or
<style color=#00ffffff size=1>.</style>            qclose, the data will again be readable following a
<style color=#00ffffff size=1>.</style>            subsequent qreopen.

<style color=#00ffffff size=1>.</style>            Qclose also marks a given q as `hung up', but removes and
<style color=#00ffffff size=1>.</style>            frees any queued data Blocks. Qclose ignores calls when q is
<style color=#00ffffff size=1>.</style>            null.

<style color=#00ffffff size=1>.</style>            Qreopen makes a closed or hung up queue available for use
<style color=#00ffffff size=1>.</style>            again. The queue's data limit is reset to the limit value
<style color=#00ffffff size=1>.</style>            given when the queue was first created by qopen, cancelling
<style color=#00ffffff size=1>.</style>            the effect of any previous call to qsetlimit.

<style color=#00ffffff size=1>.</style>            Qfree closes q with qclose and frees it. The caller must
<style color=#00ffffff size=1>.</style>            ensure that no references remain\; these functions do not
<style color=#00ffffff size=1>.</style>            keep a reference count.

<style color=#00ffffff size=1>.</style>         Flow control
<style color=#00ffffff size=1>.</style>            The queue I/O routines provide a flow control mechanism to
<style color=#00ffffff size=1>.</style>            coordinate producers and consumers. Each queue has a limit
<style color=#00ffffff size=1>.</style>            on the number of bytes queued, its `high water mark',
<style color=#00ffffff size=1>.</style>            initially set when the queue is created, but adjustable by
<style color=#00ffffff size=1>.</style>            qsetlimit, below. The low water mark is not set explicitly:
<style color=#00ffffff size=1>.</style>            it is always half the current queue limit. When the high
<style color=#00ffffff size=1>.</style>            water mark is exceeded, writes normally block until a reader
<style color=#00ffffff size=1>.</style>            drains the queue below its low water mark\; the writer is
<style color=#00ffffff size=1>.</style>            then allowed to proceed. Conversely, readers normally block
<style color=#00ffffff size=1>.</style>            when the queue is empty, until a writer arrives with data,
<style color=#00ffffff size=1>.</style>            or the queue is closed.

<style color=#00ffffff size=1>.</style>            A queue can be given a kick function when the queue is
<style color=#00ffffff size=1>.</style>            created by qopen. The function is invoked by qread and
<style color=#00ffffff size=1>.</style>            qbread, to prod an output routine when the queue falls below
<style color=#00ffffff size=1>.</style>            the low-water mark, and by qwrite, qbwrite and qiwrite, to
<style color=#00ffffff size=1>.</style>            notify a reader that a queue is no longer empty. Because
<style color=#00ffffff size=1>.</style>            kick is called from the reading (or writing) process, or an
<style color=#00ffffff size=1>.</style>            interrupt handler, it must not block.

<style color=#00ffffff size=1>.</style>            Interrupt handlers must not sleep(10.2), and are therefore
<style color=#00ffffff size=1>.</style>            restricted to using only the non-blocking functions
<style color=#00ffffff size=1>.</style>            described below.

<style color=#00ffffff size=1>.</style>         Stream mode and message mode
<style color=#00ffffff size=1>.</style>            In stream mode, no read will return more than one block of
<style color=#00ffffff size=1>.</style>            data, but a read can split a block that contains more data
<style color=#00ffffff size=1>.</style>            than requested, leaving the remainder in a new block at the
<style color=#00ffffff size=1>.</style>            front of the Queue. Writes of more than the maximum Block
<style color=#00ffffff size=1>.</style>            size (currently 128k bytes) are split into as many Blocks as
<style color=#00ffffff size=1>.</style>            required, each written separately to the queue, in order,
<style color=#00ffffff size=1>.</style>            but with possible flow-control between them. The queue is
<style color=#00ffffff size=1>.</style>            locked meanwhile, however, so that data from other writers
<style color=#00ffffff size=1>.</style>            is not intermingled.

<style color=#00ffffff size=1>.</style>            In message mode, by contrast, a read will return at most one
<style color=#00ffffff size=1>.</style>            block's worth of data, but the remainder of a partially-read
<style color=#00ffffff size=1>.</style>            block will be discarded, not returned to the queue. If a
<style color=#00ffffff size=1>.</style>            write count exceeds the maximum Block size, the excess data
<style color=#00ffffff size=1>.</style>            is discarded: at most a single block can be queued.

<style color=#00ffffff size=1>.</style>            The mode of the queue should be taken into account in the
<style color=#00ffffff size=1>.</style>            descriptions below of the following functions: qwrite,
<style color=#00ffffff size=1>.</style>            qiwrite, qbread and qconsume. No other functions are aware
<style color=#00ffffff size=1>.</style>            of the distinction.

<style color=#00ffffff size=1>.</style>         Write operations (flow controlled)
<style color=#00ffffff size=1>.</style>            Qwrite copies len bytes of data from buf into one or more
<style color=#00ffffff size=1>.</style>            Blocks which it places on the q. Qwrite always returns len.
<style color=#00ffffff size=1>.</style>            It can implement message mode.

<style color=#00ffffff size=1>.</style>            Qbwrite places the single Block b on the tail of q, waking
<style color=#00ffffff size=1>.</style>            any sleeping reader. If the queue is full, the writing
<style color=#00ffffff size=1>.</style>            process blocks until a reader has reduced the queued data to
<style color=#00ffffff size=1>.</style>            the low-water mark\; if the queue is non-blocking (see
<style color=#00ffffff size=1>.</style>            qnoblock below), the data is discarded without notice.
<style color=#00ffffff size=1>.</style>            Qbwrite normally returns len, but raises an error(10.2) if
<style color=#00ffffff size=1>.</style>            the queue is closed (see qhangup and qclose). The block b is
<style color=#00ffffff size=1>.</style>            always freed. Note that b can be empty (zero-length), to
<style color=#00ffffff size=1>.</style>            punctuate the data in a queue. Qbwrite cannot handle a list
<style color=#00ffffff size=1>.</style>            of Blocks\; qpass must be used instead.

<style color=#00ffffff size=1>.</style>         Non-blocking writes
<style color=#00ffffff size=1>.</style>            Qproduce returns -1immediately  if q is full. Otherwise, it
<style color=#00ffffff size=1>.</style>            queues len bytes of data from buf in a single Block on q and
<style color=#00ffffff size=1>.</style>            returns the number of bytes written.

<style color=#00ffffff size=1>.</style>            Qpass attempts to place the list of Blocks headed by b on q,
<style color=#00ffffff size=1>.</style>            returning the number of bytes written if successful. If q
<style color=#00ffffff size=1>.</style>            was full, it frees the Block list b and returns -1.

<style color=#00ffffff size=1>.</style>            Qpassnolim puts the Block list b on q regardless of flow
<style color=#00ffffff size=1>.</style>            control\; it returns the number of bytes in the list b.

<style color=#00ffffff size=1>.</style>            Qiwrite is a variant of qwrite used exclusively by the
<style color=#00ffffff size=1>.</style>            kernel print function, to allow printing by interrupt
<style color=#00ffffff size=1>.</style>            handlers\; qiwrite could be used with care by other routines,
<style color=#00ffffff size=1>.</style>            but qproduce is preferable. Qiwrite writes the len bytes of
<style color=#00ffffff size=1>.</style>            data at buf into the q without regard to flow control\; the
<style color=#00ffffff size=1>.</style>            writer never blocks. The queue is assumed to be open.
<style color=#00ffffff size=1>.</style>            Qiwrite always returns len. It can implement message mode.

<style color=#00ffffff size=1>.</style>         Read operations (flow controlled)
<style color=#00ffffff size=1>.</style>            Qbread blocks until data arrives on q, then returns the
<style color=#00ffffff size=1>.</style>            first Block\; it limits the data returned to len bytes (in
<style color=#00ffffff size=1>.</style>            the manner depending on the mode of q). It returns a null
<style color=#00ffffff size=1>.</style>            pointer if the queue has hung up.

<style color=#00ffffff size=1>.</style>            Qread reads a Block of up to len bytes from q using qbread,
<style color=#00ffffff size=1>.</style>            and copies the data in the Block into buf, then frees the
<style color=#00ffffff size=1>.</style>            Block and returns the number of bytes read. Qread returns 0
<style color=#00ffffff size=1>.</style>            on end of file or error (hangup). It can implement message
<style color=#00ffffff size=1>.</style>            mode.

<style color=#00ffffff size=1>.</style>            Qcopy returns a Block with a copy of data from the queue
<style color=#00ffffff size=1>.</style>            (the data remains on the queue). The copy begins offset
<style color=#00ffffff size=1>.</style>            bytes into the queue's data and proceeds until len bytes
<style color=#00ffffff size=1>.</style>            have been copied or no more data remains. The Block's read
<style color=#00ffffff size=1>.</style>            and write pointers delimit the data copied into it. Qcopy
<style color=#00ffffff size=1>.</style>            can be used by a reliable transport protocol to copy a
<style color=#00ffffff size=1>.</style>            packet for transmission, leaving the data queued for
<style color=#00ffffff size=1>.</style>            possible retransmission, if unacknowledged.

<style color=#00ffffff size=1>.</style>         Non-blocking reads
<style color=#00ffffff size=1>.</style>            Qconsume returns -1 immediately if q is empty. Otherwise, it
<style color=#00ffffff size=1>.</style>            copies up to len bytes from the first Block on the queue
<style color=#00ffffff size=1>.</style>            into buf, returning the number of bytes copied. It can
<style color=#00ffffff size=1>.</style>            implement message mode.

<style color=#00ffffff size=1>.</style>            Qget returns a null pointer immediately if q is empty or
<style color=#00ffffff size=1>.</style>            closed. Otherwise, it returns the first Block on the queue.

<style color=#00ffffff size=1>.</style>         Discard and flush
<style color=#00ffffff size=1>.</style>            Qdiscard removes the first len data bytes from q\; it returns
<style color=#00ffffff size=1>.</style>            the number of bytes actually discarded, in case the queue is
<style color=#00ffffff size=1>.</style>            shorter than len. If the queue drains below the low-water
<style color=#00ffffff size=1>.</style>            mark, qdiscard wakes any sleeping writers. Since it does not
<style color=#00ffffff size=1>.</style>            block, qdiscard can safely be called from interrupt
<style color=#00ffffff size=1>.</style>            handlers. It is useful in transport protocol drivers to
<style color=#00ffffff size=1>.</style>            remove data from the queue once acknowledged.

<style color=#00ffffff size=1>.</style>            Qflush discards all data waiting on q, waking any waiting
<style color=#00ffffff size=1>.</style>            writer.

<style color=#00ffffff size=1>.</style>         Queue status
<style color=#00ffffff size=1>.</style>            The following functions return a Queue's status. Note that
<style color=#00ffffff size=1>.</style>            between a call to one of these functions and another
<style color=#00ffffff size=1>.</style>            operation, the state can change if a driver allows
<style color=#00ffffff size=1>.</style>            concurrent access by either another process or an interrupt
<style color=#00ffffff size=1>.</style>            handler.

<style color=#00ffffff size=1>.</style>            Qlen returns the number of bytes queued on q.

<style color=#00ffffff size=1>.</style>            Qwindow returns the number of bytes that can be written
<style color=#00ffffff size=1>.</style>            before reaching the queue's high-water mark. A return of 0
<style color=#00ffffff size=1>.</style>            means that a write operation will certainly block\; a
<style color=#00ffffff size=1>.</style>            non-zero return gives no guarantees (see qfull, below).

<style color=#00ffffff size=1>.</style>            Qcanread returns 1 if any data queued is queued. A
<style color=#00ffffff size=1>.</style>            subsequent read operation will not block.

<style color=#00ffffff size=1>.</style>            Qfull returns non-zero if q is flow-controlled and a write
<style color=#00ffffff size=1>.</style>            would block or a non-blocking write would return an error.
<style color=#00ffffff size=1>.</style>            (Note that the implementation allows qwindow to return
<style color=#00ffffff size=1>.</style>            non-zero yet qfull to return true.)

<style color=#00ffffff size=1>.</style>         Queue control
<style color=#00ffffff size=1>.</style>            Qsetlimit sets the high water mark for the queue to limit.
<style color=#00ffffff size=1>.</style>            Note that qopen saves the initial queue limit. If the queue
<style color=#00ffffff size=1>.</style>            is closed and reopened (by qreopen) that initial limit is
<style color=#00ffffff size=1>.</style>            restored.

<style color=#00ffffff size=1>.</style>            Qnoblock sets or resets non-blocking mode. If nonblock is
<style color=#00ffffff size=1>.</style>            non-zero, the queue becomes non-blocking, and data written
<style color=#00ffffff size=1>.</style>            to a queue beyond its high water mark is discarded by calls
<style color=#00ffffff size=1>.</style>            that would otherwise block.

SOURCE
<style color=#00ffffff size=1>.</style>            /os/port/qio.c
<style color=#00ffffff size=1>.</style>            /emu/port/qio.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            allocb(10.2), ref(10.2)

<style color=#00ffffff size=1>.</style>                                Inferno Manual
