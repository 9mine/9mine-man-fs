<action name=EXCEPTION(2)>EXCEPTION(2)</action>                                         <action name=EXCEPTION(2)>EXCEPTION(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            exception - obtain data about exceptions and set
<style color=#00ffffff size=1>.</style>            exception-handling modes

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "exception.m"\;
<style color=#00ffffff size=1>.</style>            exc := load Exception Exception->PATH\;

<style color=#00ffffff size=1>.</style>            NOTIFYLEADER, PROPAGATE: con iota\;

<style color=#00ffffff size=1>.</style>            getexc:	fn(pid: int): (int, string, string)\;
<style color=#00ffffff size=1>.</style>            setexcmode:	fn(mode: int): int\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Exception provides functions to fetch data about exceptions
<style color=#00ffffff size=1>.</style>            in other processes and change exception-handling modes. It
<style color=#00ffffff size=1>.</style>            encapsulates exception-related operations on files in prog
<style color=#00ffffff size=1>.</style>            (3).

<style color=#00ffffff size=1>.</style>            When a process incurs an exception, the system saves details
<style color=#00ffffff size=1>.</style>            before processing the exception, following Limbo's rules.
<style color=#00ffffff size=1>.</style>            Getexc returns a tuple (pc, module, description) that
<style color=#00ffffff size=1>.</style>            describes the most recent exception raised in process pid.
<style color=#00ffffff size=1>.</style>            (A process id of -1 is taken to mean the current process.)
<style color=#00ffffff size=1>.</style>            The tuple contains the pc value, the module name, and the
<style color=#00ffffff size=1>.</style>            exception name. The value (0, nil, nil) is returned if no
<style color=#00ffffff size=1>.</style>            exception has occurred.

<style color=#00ffffff size=1>.</style>            By default, when a process incurs an exception that is not
<style color=#00ffffff size=1>.</style>            handled — no exception clause matches that exception — the
<style color=#00ffffff size=1>.</style>            process is stopped in a `Broken' state for debugging, and
<style color=#00ffffff size=1>.</style>            the exception does not propagate further. Setexcmode changes
<style color=#00ffffff size=1>.</style>            the way that the system handles exceptions for the current
<style color=#00ffffff size=1>.</style>            process and those it later spawns. A mode of NOTIFYLEADER
<style color=#00ffffff size=1>.</style>            makes the invoking process the leader of the current process
<style color=#00ffffff size=1>.</style>            group for exception handling. Subsequently, an exception in
<style color=#00ffffff size=1>.</style>            any process in the current process group will atomically
<style color=#00ffffff size=1>.</style>            destroy all processes in the group except the leader, and
<style color=#00ffffff size=1>.</style>            the exception will be raised in the leader. (This works even
<style color=#00ffffff size=1>.</style>            when the leader itself incurs the exception.) A mode of
<style color=#00ffffff size=1>.</style>            PROPAGATE instead causes an exception in any process in the
<style color=#00ffffff size=1>.</style>            group to be raised in all processes in the group, allowing
<style color=#00ffffff size=1>.</style>            them all to initiate local error recovery (ie, within each
<style color=#00ffffff size=1>.</style>            process).

SOURCE
<style color=#00ffffff size=1>.</style>            /appl/lib/exception.b

DIAGNOSTICS
<style color=#00ffffff size=1>.</style>            Both functions return -1 on error and set the system error
<style color=#00ffffff size=1>.</style>            string.

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=prog(3)>prog(3)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
