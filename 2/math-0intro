<action name=MATH-INTRO(2)>MATH-INTRO(2)</action>                                       <action name=MATH-INTRO(2)>MATH-INTRO(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            Math: intro - elementary numerics

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "math.m"\;
<style color=#00ffffff size=1>.</style>            math := load Math Math->PATH\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Inferno's math module and Limbo compiler provide the
<style color=#00ffffff size=1>.</style>            fundamental floating point environment and ``elementary
<style color=#00ffffff size=1>.</style>            functions''.

<style color=#00ffffff size=1>.</style>            Limbo expressions involving only literal and named constants
<style color=#00ffffff size=1>.</style>            are evaluated at compile time with all exceptions ignored.
<style color=#00ffffff size=1>.</style>            However, arithmetic on variables is left to run-time, even
<style color=#00ffffff size=1>.</style>            if data path analysis shows the value to be a compile time
<style color=#00ffffff size=1>.</style>            constant. This implies that tools generating Limbo source
<style color=#00ffffff size=1>.</style>            must do their own simplification, and not expect the
<style color=#00ffffff size=1>.</style>            compiler to change x/x into 1, or -(y-x) into x-y, or even
<style color=#00ffffff size=1>.</style>            x-0 into x.

<style color=#00ffffff size=1>.</style>            Subexpression elimination and other forms of code motion may
<style color=#00ffffff size=1>.</style>            be done by the compiler, but not across calls to the mode
<style color=#00ffffff size=1>.</style>            and status functions described in <action name=math-fp(2)>math-fp(2)</action>. Removal of
<style color=#00ffffff size=1>.</style>            parentheses or factoring is not performed by the compiler.
<style color=#00ffffff size=1>.</style>            The evaluation order of a+b+c follows the parse tree and is
<style color=#00ffffff size=1>.</style>            therefore the same as for (a+b)+c. These rules are the same
<style color=#00ffffff size=1>.</style>            as for Fortran and C.

<style color=#00ffffff size=1>.</style>            Contracted multiply-add instructions (with a single
<style color=#00ffffff size=1>.</style>            rounding) are not generated by the compiler, though they may
<style color=#00ffffff size=1>.</style>            be used in the native BLAS (linear algebra) libraries. All
<style color=#00ffffff size=1>.</style>            arithmetic follows the IEEE floating point standard, except
<style color=#00ffffff size=1>.</style>            that denormalized numbers may be replaced by flush-to-0,
<style color=#00ffffff size=1>.</style>            depending on what the hardware makes feasible.

<style color=#00ffffff size=1>.</style>            Binary/decimal conversion is properly rounded. In
<style color=#00ffffff size=1>.</style>            particular, printing a real using %g and reading it on a
<style color=#00ffffff size=1>.</style>            different machine is guaranteed to recover identical bits,
<style color=#00ffffff size=1>.</style>            including conversions done by the compiler. The one
<style color=#00ffffff size=1>.</style>            exception is that smaller, faster, but sloppier run-time
<style color=#00ffffff size=1>.</style>            conversion routines may be used when mandated by limited
<style color=#00ffffff size=1>.</style>            memory embedded systems. Programmers may assume, however,
<style color=#00ffffff size=1>.</style>            that the features described in these man pages are present
<style color=#00ffffff size=1>.</style>            in all Inferno systems intended for general computing.

SOURCE
<style color=#00ffffff size=1>.</style>            /libinterp/math.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            See <action name=math-fp(2)>math-fp(2)</action> for floating point control and primitive
<style color=#00ffffff size=1>.</style>            arithmetic operations, <action name=math-elem(2)>math-elem(2)</action> for the classical
<style color=#00ffffff size=1>.</style>            elementary functions of applied mathematics, and math-linalg
<style color=#00ffffff size=1>.</style>            (2) for basic linear algebra functions.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
