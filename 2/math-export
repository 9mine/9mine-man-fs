<action name=MATH-EXPORT(2)>MATH-EXPORT(2)</action>                                     <action name=MATH-EXPORT(2)>MATH-EXPORT(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            Math: export_int, export_real, export_real32, import_int,
<style color=#00ffffff size=1>.</style>            import_real, import_real32 - conversion to and from external
<style color=#00ffffff size=1>.</style>            representation

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "math.m"\;
<style color=#00ffffff size=1>.</style>            math := load Math Math->PATH\;

<style color=#00ffffff size=1>.</style>            export_int:    fn(b: array of byte, x: array of int)\;
<style color=#00ffffff size=1>.</style>            export_real32: fn(b: array of byte, x: array of real)\;
<style color=#00ffffff size=1>.</style>            export_real:   fn(b: array of byte, x: array of real)\;

<style color=#00ffffff size=1>.</style>            import_int:    fn(b: array of byte, x: array of int)\;
<style color=#00ffffff size=1>.</style>            import_real32: fn(b: array of byte, x: array of real)\;
<style color=#00ffffff size=1>.</style>            import_real:   fn(b: array of byte, x: array of real)\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            These routines convert between Limbo's internal
<style color=#00ffffff size=1>.</style>            representation of integer and floating-point values, and
<style color=#00ffffff size=1>.</style>            equivalent external representations as arrays of bytes,
<style color=#00ffffff size=1>.</style>            allowing efficient input/output of binary representations.

<style color=#00ffffff size=1>.</style>            Export_int(b, x) converts each integer element of array x
<style color=#00ffffff size=1>.</style>            into a sequence of 4 bytes in array b.

<style color=#00ffffff size=1>.</style>            Export_real(b, x) converts each double-precision
<style color=#00ffffff size=1>.</style>            floating-point element of array x into a sequence of 8 bytes
<style color=#00ffffff size=1>.</style>            in array b.

<style color=#00ffffff size=1>.</style>            Export_real32(b, x) converts each double-precision
<style color=#00ffffff size=1>.</style>            floating-point element of array x to a single-precision
<style color=#00ffffff size=1>.</style>            value, then encodes it as a sequence of 4 bytes in array b.

<style color=#00ffffff size=1>.</style>            Each import_T operation reverses the transformation of the
<style color=#00ffffff size=1>.</style>            corresponding export_T operation, converting an array of
<style color=#00ffffff size=1>.</style>            bytes containing a sequence of external representations into
<style color=#00ffffff size=1>.</style>            an array of values of the appropriate internal form.

<style color=#00ffffff size=1>.</style>            Values are encoded in big-endian order (most significant
<style color=#00ffffff size=1>.</style>            byte first), with floating-point values represented in IEEE
<style color=#00ffffff size=1>.</style>            32-bit or 64-bit form (again, most significant byte first).

SOURCE
<style color=#00ffffff size=1>.</style>            /libinterp/math.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=math-intro(2)>math-intro(2)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
