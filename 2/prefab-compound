<action name=PREFAB-COMPOUND(2)>PREFAB-COMPOUND(2)</action>                             <action name=PREFAB-COMPOUND(2)>PREFAB-COMPOUND(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            prefab: Compound - windows for ITV toolkit

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "draw.m"\;
<style color=#00ffffff size=1>.</style>            include "prefab.m"\;
<style color=#00ffffff size=1>.</style>            prefab := load Prefab Prefab->PATH\;

<style color=#00ffffff size=1>.</style>            Compound: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                image:     ref Draw->Image\;
<style color=#00ffffff size=1>.</style>                environ:   ref Environ\;
<style color=#00ffffff size=1>.</style>                r:         Draw->Rect\;
<style color=#00ffffff size=1>.</style>                title:     ref Element\;
<style color=#00ffffff size=1>.</style>                contents:  ref Element\;
<style color=#00ffffff size=1>.</style>              
<style color=#00ffffff size=1>.</style>                iconbox:   fn(env: ref Environ,
<style color=#00ffffff size=1>.</style>                           p: Draw->Point, title: string, icon,
<style color=#00ffffff size=1>.</style>                           mask: ref Draw->Image):
<style color=#00ffffff size=1>.</style>                           ref Compound\;
<style color=#00ffffff size=1>.</style>                textbox:   fn(env: ref Environ,
<style color=#00ffffff size=1>.</style>                           r: Draw->Rect,  title, text: string):
<style color=#00ffffff size=1>.</style>                           ref Compound\;
<style color=#00ffffff size=1>.</style>                layoutbox: fn(env: ref Environ,
<style color=#00ffffff size=1>.</style>                           r: Draw->Rect,  title: string, lay: list of Layout):
<style color=#00ffffff size=1>.</style>                           ref Compound\;
<style color=#00ffffff size=1>.</style>                box:       fn(env: ref Environ,
<style color=#00ffffff size=1>.</style>                           p: Draw->Point, title, elist: ref Element):
<style color=#00ffffff size=1>.</style>                           ref Compound\;
<style color=#00ffffff size=1>.</style>                draw:      fn(comp: self ref Compound)\;
<style color=#00ffffff size=1>.</style>                redraw:      fn(comp: self ref Compound, r: Draw->Rect)\;
<style color=#00ffffff size=1>.</style>                scroll:    fn(comp: self ref Compound, elem: ref Element,
<style color=#00ffffff size=1>.</style>            			d: Draw->Point)\;
<style color=#00ffffff size=1>.</style>                show:      fn(comp: self ref Compound, elem: ref Element): int\;
<style color=#00ffffff size=1>.</style>                select:    fn(comp: self ref Compound,
<style color=#00ffffff size=1>.</style>                           elem: ref Element, i: int, c: chan of int):
<style color=#00ffffff size=1>.</style>                           (int, int, ref Element)\;
<style color=#00ffffff size=1>.</style>                tagselect: fn(comp: self ref Compound,
<style color=#00ffffff size=1>.</style>                           elem: ref Element, i: int, c: chan of int):
<style color=#00ffffff size=1>.</style>                           (int, int, ref Element)\;
<style color=#00ffffff size=1>.</style>                highlight: fn(comp: self ref Compound,
<style color=#00ffffff size=1>.</style>                           elem: ref Element, on: int)\;
<style color=#00ffffff size=1>.</style>            }\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Compound is the data type defining boxes drawn on the
<style color=#00ffffff size=1>.</style>            screen. Each appears in a new window, Compound.image, and
<style color=#00ffffff size=1>.</style>            holds a (possibly nil) title Element and contents Element.
<style color=#00ffffff size=1>.</style>            It occupies the space on the screen defined by Compound.r.
<style color=#00ffffff size=1>.</style>            Allocating a Compound creates a window but does not draw it\;
<style color=#00ffffff size=1>.</style>            after the Compound is built, Compound.draw must be called to
<style color=#00ffffff size=1>.</style>            make it visible. Compounds have a border around them, drawn
<style color=#00ffffff size=1>.</style>            in Style.edgecolor and contain from top to bottom the title
<style color=#00ffffff size=1>.</style>            (if any), a horizontal line (if there is a title), and the
<style color=#00ffffff size=1>.</style>            contents.

<style color=#00ffffff size=1>.</style>            Compound.iconbox( env , p , title , icon , mask )
<style color=#00ffffff size=1>.</style>                 Creates a Compound whose contents are made by calling
<style color=#00ffffff size=1>.</style>                 Element.icon (see <action name=prefab-element(2)>prefab-element(2)</action>) using the icon and
<style color=#00ffffff size=1>.</style>                 mask. The Compound's upper left corner is at p\; its
<style color=#00ffffff size=1>.</style>                 size is determined by the size of the icon and mask.

<style color=#00ffffff size=1>.</style>            Compound.textbox( env , r , title , text )
<style color=#00ffffff size=1>.</style>                 Creates a Compound whose contents are made by calling
<style color=#00ffffff size=1>.</style>                 Element.text using the supplied text. As with
<style color=#00ffffff size=1>.</style>                 Element.text, the resulting contents Element will be
<style color=#00ffffff size=1>.</style>                 actually a list of text Elements if the text occupies
<style color=#00ffffff size=1>.</style>                 multiple lines on the screen. The rectangle behaves as
<style color=#00ffffff size=1>.</style>                 in Element.text.

<style color=#00ffffff size=1>.</style>            Compound.layoutbox( env , r , title , layoutlist )
<style color=#00ffffff size=1>.</style>                 Like Compound.textbox, but based on Element.layout
<style color=#00ffffff size=1>.</style>                 rather than Element.text.

<style color=#00ffffff size=1>.</style>            Compound.box( env , p , title , element )
<style color=#00ffffff size=1>.</style>                 Creates a Compound whose contents are made from an
<style color=#00ffffff size=1>.</style>                 existing Element. To build complex structures, use the
<style color=#00ffffff size=1>.</style>                 Element-building functions, size the Element
<style color=#00ffffff size=1>.</style>                 appropriately, and use Compound.box. The result is
<style color=#00ffffff size=1>.</style>                 positioned with its upper left corner at p, and with
<style color=#00ffffff size=1>.</style>                 size determined by that of the Element.

<style color=#00ffffff size=1>.</style>            However a Compound is built, its size computation makes
<style color=#00ffffff size=1>.</style>            allowance for the border and title. Moreover, if the
<style color=#00ffffff size=1>.</style>            requested size and placement makes part appear offscreen,
<style color=#00ffffff size=1>.</style>            the result may be moved to display it better.

<style color=#00ffffff size=1>.</style>            Compound.draw()
<style color=#00ffffff size=1>.</style>                 This function uses the description of the title and
<style color=#00ffffff size=1>.</style>                 contents to paint the on-screen image. It takes no
<style color=#00ffffff size=1>.</style>                 arguments\; all the information is included in the
<style color=#00ffffff size=1>.</style>                 description.

<style color=#00ffffff size=1>.</style>            Compound.redraw(r)
<style color=#00ffffff size=1>.</style>                 Like Compound.draw, but restricts the drawing to the
<style color=#00ffffff size=1>.</style>                 specified Rect r.

<style color=#00ffffff size=1>.</style>                 Compound.select( element, index, c ): (int, int,
<style color=#00ffffff size=1>.</style>                 Element) The channel c is a chan of int connected to an
<style color=#00ffffff size=1>.</style>                 IR remote control interface, typically acquired through
<style color=#00ffffff size=1>.</style>                 the program's Context (see <action name=draw-context(2)>draw-context(2)</action>). The
<style color=#00ffffff size=1>.</style>                 element is contained in the Compound, and may be at any
<style color=#00ffffff size=1>.</style>                 level of its structure. It is most usefully a list, but
<style color=#00ffffff size=1>.</style>                 may be a singleton, in which case it behaves like a
<style color=#00ffffff size=1>.</style>                 list of one element. The arrow keys on the remote
<style color=#00ffffff size=1>.</style>                 control scroll through the members of the list, using
<style color=#00ffffff size=1>.</style>                 the Style.highlightcolor associated with each member
<style color=#00ffffff size=1>.</style>                 element to indicate selection. A Select key on the
<style color=#00ffffff size=1>.</style>                 remote control triggers select to return a tuple (key,
<style color=#00ffffff size=1>.</style>                 index, elem)\; key is the key code of the action (here
<style color=#00ffffff size=1>.</style>                 Select), index is the number of the element in the list
<style color=#00ffffff size=1>.</style>                 (ignoring separators), and elem is the list member
<style color=#00ffffff size=1>.</style>                 highlighted when the key was hit. Any other key returns
<style color=#00ffffff size=1>.</style>                 the same tuple with index -1 and the value of the key.
<style color=#00ffffff size=1>.</style>                 The elem returned is always the most recently
<style color=#00ffffff size=1>.</style>                 highlighted, even if the result was not a selection.
<style color=#00ffffff size=1>.</style>                 When select returns, it always restores the default
<style color=#00ffffff size=1>.</style>                 appearance of the list.

<style color=#00ffffff size=1>.</style>                 Compound.tagselect( element, index, c): (int, int,
<style color=#00ffffff size=1>.</style>                 Element) Like Compound.select, but rather than
<style color=#00ffffff size=1>.</style>                 selecting among all the elements of a list, it selects
<style color=#00ffffff size=1>.</style>                 among only those elements with defined tags in the
<style color=#00ffffff size=1>.</style>                 structure contained within the specified element.

<style color=#00ffffff size=1>.</style>            Compound.highlight(element,  on)
<style color=#00ffffff size=1>.</style>                 Set the highlighting to be ``on'' or ``off'' for the
<style color=#00ffffff size=1>.</style>                 element within the compound.

<style color=#00ffffff size=1>.</style>            Compound.scroll(element,  d)
<style color=#00ffffff size=1>.</style>                 Like Element.scroll: scroll the element within the
<style color=#00ffffff size=1>.</style>                 compound. The updated image is redrawn after the
<style color=#00ffffff size=1>.</style>                 scrolling.

<style color=#00ffffff size=1>.</style>                 Compound.show(element,  d) Like Element.show: make sure
<style color=#00ffffff size=1>.</style>                 the element is visible within the rectangle of the
<style color=#00ffffff size=1>.</style>                 top-level Element of the Compound, that is, in effect
<style color=#00ffffff size=1>.</style>                 call Element.show(Compound.contents, element)\;

SOURCE
<style color=#00ffffff size=1>.</style>            /libinterp/prefab.c
<style color=#00ffffff size=1>.</style>            /libprefab/*.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=prefab-element(2)>prefab-element(2)</action>, <action name=prefab-environ(2)>prefab-environ(2)</action>, <action name=prefab-style(2)>prefab-style(2)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
