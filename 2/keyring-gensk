<action name=KEYRING-GENSK(2)>KEYRING-GENSK(2)</action>                                 <action name=KEYRING-GENSK(2)>KEYRING-GENSK(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            keyring: genSK, genSKfromPK, sktopk, dhparams - generate
<style color=#00ffffff size=1>.</style>            keys

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "keyring.m"\;
<style color=#00ffffff size=1>.</style>            keyring := load Keyring Keyring->PATH\;
<style color=#00ffffff size=1>.</style>            genSK:  fn(algname, owner: string, length: int): ref SK\;
<style color=#00ffffff size=1>.</style>            genSKfromPK:  fn(pk: ref PK, owner: string): ref SK\;
<style color=#00ffffff size=1>.</style>            sktopk:  fn(sk: ref SK): ref PK\;
<style color=#00ffffff size=1>.</style>            dhparams:  fn(nbits: int): (ref IPint, ref IPint)\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            GenSK generates a public/private key pair, represented by SK
<style color=#00ffffff size=1>.</style>            . (Although we call it a `private key', SK contains both the
<style color=#00ffffff size=1>.</style>            private and public parts of a public key.) Algname is the
<style color=#00ffffff size=1>.</style>            name of the algorithm to use\; in the current implementation,
<style color=#00ffffff size=1>.</style>            only elgamal and rsa are possible. Owner is the user name to
<style color=#00ffffff size=1>.</style>            be associated with the key. Length gives the length of the
<style color=#00ffffff size=1>.</style>            key modulus in bits. GenSK returns nil if an unknown
<style color=#00ffffff size=1>.</style>            algorithm has been specified.

<style color=#00ffffff size=1>.</style>            GenSKfromPK generates a private key that has the same system
<style color=#00ffffff size=1>.</style>            parameters as the public key pk. It is used to generate new
<style color=#00ffffff size=1>.</style>            keys that are of the same complexity as old keys.

<style color=#00ffffff size=1>.</style>            Sktopk extracts the public part of private key.

<style color=#00ffffff size=1>.</style>            Dhparams creates Diffie-Hellman parameters. The second IPint
<style color=#00ffffff size=1>.</style>            returned is an nbits long prime number that serves as the
<style color=#00ffffff size=1>.</style>            modulus. The first IPint is a primitive root in the integer
<style color=#00ffffff size=1>.</style>            field defined by that modulus.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
