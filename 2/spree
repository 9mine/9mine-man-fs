<action name=SPREE(2)>SPREE(2)</action>                                                 <action name=SPREE(2)>SPREE(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            Spree - distributed interactive sessions.

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "sys.m"\;
<style color=#00ffffff size=1>.</style>            include "draw.m"\;
<style color=#00ffffff size=1>.</style>            include "sets.m"\;
<style color=#00ffffff size=1>.</style>            include "spree.m"\;
<style color=#00ffffff size=1>.</style>            spree := load Spree Spree->PATH\;
<style color=#00ffffff size=1>.</style>            Range, Object, Clique, Member: import spree\;
<style color=#00ffffff size=1>.</style>            Set: import Sets\;
<style color=#00ffffff size=1>.</style>            Archive: import Archives\;

<style color=#00ffffff size=1>.</style>            Range: adt {
<style color=#00ffffff size=1>.</style>                start:  int\;
<style color=#00ffffff size=1>.</style>                end:    int\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Object: adt {
<style color=#00ffffff size=1>.</style>                transfer:           fn(o: self ref Object,
<style color=#00ffffff size=1>.</style>                        r: Range, dst: ref Object, i: int)\;
<style color=#00ffffff size=1>.</style>                setvisibility:      fn(o: self ref Object,
<style color=#00ffffff size=1>.</style>                        visibility: Set)\;
<style color=#00ffffff size=1>.</style>                setattrvisibility:  fn(o: self ref Object,
<style color=#00ffffff size=1>.</style>                        name: string, visibility: Set)\;
<style color=#00ffffff size=1>.</style>                setattr:        fn(o: self ref Object,
<style color=#00ffffff size=1>.</style>                        name: string, val: string, vis: Set)\;
<style color=#00ffffff size=1>.</style>                getattr:        fn(o: self ref Object, name: string): string\;
<style color=#00ffffff size=1>.</style>                delete:     fn(o: self ref Object)\;
<style color=#00ffffff size=1>.</style>                deletechildren: fn(o: self ref Object, r: Range)\;

<style color=#00ffffff size=1>.</style>                id:     int\;
<style color=#00ffffff size=1>.</style>                parentid:   int\;
<style color=#00ffffff size=1>.</style>                children:   array of ref Object\;
<style color=#00ffffff size=1>.</style>                objtype:    string\;
<style color=#00ffffff size=1>.</style>                visibility: Set\;
<style color=#00ffffff size=1>.</style>                # ...private data
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Clique: adt {
<style color=#00ffffff size=1>.</style>                new:       fn(parent: self ref Clique, archive: ref Archive,
<style color=#00ffffff size=1>.</style>            				owner: string): (int, string, string)\;
<style color=#00ffffff size=1>.</style>                newobject: fn(clique: self ref Clique, parent: ref Object,
<style color=#00ffffff size=1>.</style>                        visibility: int, objtype: string): ref Object\;
<style color=#00ffffff size=1>.</style>                action:   fn(clique: self ref Clique, cmd: string,
<style color=#00ffffff size=1>.</style>                           objs: list of int, rest: string, whoto: int)\;
<style color=#00ffffff size=1>.</style>                member:   fn(clique: self ref Clique, id: int): ref Member\;
<style color=#00ffffff size=1>.</style>                start:    fn(clique: self ref Clique)\;
<style color=#00ffffff size=1>.</style>                breakmsg: fn(clique: self ref Clique, whoto: Sets->Set)\;
<style color=#00ffffff size=1>.</style>                members:  fn(clique: self ref Clique): list of ref Member\;
<style color=#00ffffff size=1>.</style>                owner:    fn(clique: self ref Clique): string\;
<style color=#00ffffff size=1>.</style>                hangup:   fn(clique: self ref Clique)\;
<style color=#00ffffff size=1>.</style>                notify:   fn(clique: self ref Clique, cliqueid: int, msg: string)\;

<style color=#00ffffff size=1>.</style>                objects:  array of ref Object\;
<style color=#00ffffff size=1>.</style>                cliqueid: int\;
<style color=#00ffffff size=1>.</style>                # ...private data
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Member: adt {
<style color=#00ffffff size=1>.</style>                obj:    fn(m: self ref Member, id: int): ref Object\;
<style color=#00ffffff size=1>.</style>                del:    fn(m: self ref Member, suspend: int)\;

<style color=#00ffffff size=1>.</style>                id:     int\;
<style color=#00ffffff size=1>.</style>                name:   string\;
<style color=#00ffffff size=1>.</style>                # ...private data
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Engine: module {
<style color=#00ffffff size=1>.</style>            	init:			fn(srvmod: Spree, clique: ref Clique, argv: list of string): string\;
<style color=#00ffffff size=1>.</style>            	command:	fn(member: ref Member, e: string): string\;
<style color=#00ffffff size=1>.</style>            	join:			fn(member: ref Member , e: string, suspended: int): string\;
<style color=#00ffffff size=1>.</style>            	leave:		fn(member: ref Member): int\;
<style color=#00ffffff size=1>.</style>            	notify:		fn(fromid: int, s: string)\;
<style color=#00ffffff size=1>.</style>            	readfile:		fn(f: int, offset: big, count: int): array of byte\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Archives: module {
<style color=#00ffffff size=1>.</style>            	Archive: adt {
<style color=#00ffffff size=1>.</style>            		argv:		list of string\;			# how to restart the session.
<style color=#00ffffff size=1>.</style>            		members:	array of string\;			# members involved.
<style color=#00ffffff size=1>.</style>            		info:		list of (string, string)\;	# any other information.
<style color=#00ffffff size=1>.</style>            		objects:	array of ref Object\;
<style color=#00ffffff size=1>.</style>            	}\;
<style color=#00ffffff size=1>.</style>            	init:			fn(mod: Spree)\;
<style color=#00ffffff size=1>.</style>            	write:		fn(clique: ref Clique, info: list of (string, string), file: string, members: Set): string\;
<style color=#00ffffff size=1>.</style>            	read:			fn(file: string): (ref Archive, string)\;
<style color=#00ffffff size=1>.</style>            	readheader:	fn(file: string): (ref Archive, string)\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            rand:   fn(n: int): int\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Spree provides a general server interface that allows sets
<style color=#00ffffff size=1>.</style>            of distributed clients, cliques, to interact in a controlled
<style color=#00ffffff size=1>.</style>            manner, with the interaction mediated by Limbo modules,
<style color=#00ffffff size=1>.</style>            known as engines. Each engine decides on the rules of its
<style color=#00ffffff size=1>.</style>            particular clique\; the engine interface is described at the
<style color=#00ffffff size=1>.</style>            end of this manual page, under ``Module Interface''.

<style color=#00ffffff size=1>.</style>            This manual page describes the interface as presented to an
<style color=#00ffffff size=1>.</style>            engine once it has been loaded by spree. A loaded instance
<style color=#00ffffff size=1>.</style>            of an engine is responsible for a particular clique, in
<style color=#00ffffff size=1>.</style>            which one or more members participate. Messages sent by
<style color=#00ffffff size=1>.</style>            members are interpreted by the engine, which responds by
<style color=#00ffffff size=1>.</style>            making changes to the hierarchical object database held by
<style color=#00ffffff size=1>.</style>            the clique. Behind the scenes spree distributes updates to
<style color=#00ffffff size=1>.</style>            this database to members of the clique as appropriate (see
<style color=#00ffffff size=1>.</style>            <action name=spree(4)>spree(4)</action> for details).

<style color=#00ffffff size=1>.</style>         Objects and visibility
<style color=#00ffffff size=1>.</style>            Objects hold a clique's visible state. An object has a
<style color=#00ffffff size=1>.</style>            unique integer id, which is an index into the array clique
<style color=#00ffffff size=1>.</style>            .objects\; it also holds a set of attribute-value pairs, a
<style color=#00ffffff size=1>.</style>            type, and zero or more child objects. Together, all the
<style color=#00ffffff size=1>.</style>            objects in the clique form a hierarchical tree, rooted at
<style color=#00ffffff size=1>.</style>            the root object (id 0), which always exists. Each attribute
<style color=#00ffffff size=1>.</style>            and each object also has an associated visibility set, the
<style color=#00ffffff size=1>.</style>            set of member that sees updates to the attributes or the
<style color=#00ffffff size=1>.</style>            children of the object.  Each member has a unique id\; in a
<style color=#00ffffff size=1>.</style>            visibility set (see <action name=sets(2)>sets(2)</action>), a member is ``visible'' if the
<style color=#00ffffff size=1>.</style>            set contains the member's id.

<style color=#00ffffff size=1>.</style>            Note that the visibility set of an object does not alter the
<style color=#00ffffff size=1>.</style>            visibility of that object's attributes, but only that of its
<style color=#00ffffff size=1>.</style>            children (and of their children: in general an object is
<style color=#00ffffff size=1>.</style>            visible to a member if the intersection of all its
<style color=#00ffffff size=1>.</style>            ancestors' visibility sets contains that member).

<style color=#00ffffff size=1>.</style>            Objects can be transferred inside the hierarchy from one
<style color=#00ffffff size=1>.</style>            parent to another. If an object is moved to a parent whose
<style color=#00ffffff size=1>.</style>            visibility conceals it from a member, then it will appear to
<style color=#00ffffff size=1>.</style>            that member to have been deleted\; if it is later made
<style color=#00ffffff size=1>.</style>            visible, then it will be recreated for that member. A clique
<style color=#00ffffff size=1>.</style>            engine can almost always ignore this technicality, except
<style color=#00ffffff size=1>.</style>            for one thing: the identifier used by a particular member to
<style color=#00ffffff size=1>.</style>            identify an object is not necessarily the same as that used
<style color=#00ffffff size=1>.</style>            by the clique engine. Thus when an engine receives an object
<style color=#00ffffff size=1>.</style>            id in a member's message, it should convert it using the
<style color=#00ffffff size=1>.</style>            member.obj() function.

<style color=#00ffffff size=1>.</style>         \fBClique\fP
<style color=#00ffffff size=1>.</style>            The Clique type holds all the objects in a clique. It allows
<style color=#00ffffff size=1>.</style>            the creation of new objects, and provides a way of
<style color=#00ffffff size=1>.</style>            communicating with members directly. All data members of a
<style color=#00ffffff size=1>.</style>            Clique should be treated as read-only.

<style color=#00ffffff size=1>.</style>            clique.objects
<style color=#00ffffff size=1>.</style>                      This array holds the objects in the clique. An
<style color=#00ffffff size=1>.</style>                      object with identifier id is found at clique
<style color=#00ffffff size=1>.</style>                      .objects\[id\].

<style color=#00ffffff size=1>.</style>            clique.new(archive,owner)
<style color=#00ffffff size=1>.</style>                      New creates a new clique. Archive is an archive of
<style color=#00ffffff size=1>.</style>                      the game to be created\; archive.argv should be
<style color=#00ffffff size=1>.</style>                      non-nil\; its first element should name the engine
<style color=#00ffffff size=1>.</style>                      to be loaded (as a path relative to the engine
<style color=#00ffffff size=1>.</style>                      module directory, and without the .dis extension).

<style color=#00ffffff size=1>.</style>            clique.newobject(parent, visibility, objtype)
<style color=#00ffffff size=1>.</style>                      Newobject creates a new object at the end of
<style color=#00ffffff size=1>.</style>                      parent's children\; If parent is nil, the new
<style color=#00ffffff size=1>.</style>                      object is created under the root object. The new
<style color=#00ffffff size=1>.</style>                      object has visibility visibility, and type objtype
<style color=#00ffffff size=1>.</style>                      . An object's type cannot be changed once it has
<style color=#00ffffff size=1>.</style>                      been created.

<style color=#00ffffff size=1>.</style>            clique.action(cmd, objs, rest, whoto)
<style color=#00ffffff size=1>.</style>                      Action sends a message to some members without
<style color=#00ffffff size=1>.</style>                      affecting the object hierarchy. It can be used to
<style color=#00ffffff size=1>.</style>                      send transient events that have no meaning when
<style color=#00ffffff size=1>.</style>                      stored statically (for example, network latency
<style color=#00ffffff size=1>.</style>                      probes). The message is sent to the set of members
<style color=#00ffffff size=1>.</style>                      given by whoto. Objs is assumed to be a list of
<style color=#00ffffff size=1>.</style>                      object ids, which are converted appropriately for
<style color=#00ffffff size=1>.</style>                      each member receiving the message\; the final
<style color=#00ffffff size=1>.</style>                      message is a string built by concatenating cmd,
<style color=#00ffffff size=1>.</style>                      the list of object ids, and rest, separated by
<style color=#00ffffff size=1>.</style>                      spaces.

<style color=#00ffffff size=1>.</style>            clique.breakmsg(whoto)
<style color=#00ffffff size=1>.</style>                      Messages are usually sent to clients in an
<style color=#00ffffff size=1>.</style>                      uninterrupted stream (as documented in <action name=spree(4)>spree(4)</action>),
<style color=#00ffffff size=1>.</style>                      with a single read returning a potentially large
<style color=#00ffffff size=1>.</style>                      set of messages. Breakmsg arranges that subsequent
<style color=#00ffffff size=1>.</style>                      messages received by the members specified in
<style color=#00ffffff size=1>.</style>                      whoto will see not be merged with messages sent
<style color=#00ffffff size=1>.</style>                      prior to the call to breakmsg. This is used to
<style color=#00ffffff size=1>.</style>                      enable a new client module to be started without
<style color=#00ffffff size=1>.</style>                      needing to pass it data received in the previous
<style color=#00ffffff size=1>.</style>                      read.

<style color=#00ffffff size=1>.</style>            clique.member(id)
<style color=#00ffffff size=1>.</style>                      Member yields the member corresponding to
<style color=#00ffffff size=1>.</style>                      identifier id, or nil if there is none.

<style color=#00ffffff size=1>.</style>            clique.membernamed(name)
<style color=#00ffffff size=1>.</style>                      Membernamed searches for a member of clique named
<style color=#00ffffff size=1>.</style>                      name and returns it if it finds it, otherwise nil.

<style color=#00ffffff size=1>.</style>            clique.members()
<style color=#00ffffff size=1>.</style>                      Members returns a list of all the members of
<style color=#00ffffff size=1>.</style>                      clique, including those that have been suspended.

<style color=#00ffffff size=1>.</style>            clique.owner()
<style color=#00ffffff size=1>.</style>                      Owner returns the name of the owner of the clique\;
<style color=#00ffffff size=1>.</style>                      i.e. the user that created it.

<style color=#00ffffff size=1>.</style>            clique.hangup()
<style color=#00ffffff size=1>.</style>                      Hangup terminates a game and informs all the
<style color=#00ffffff size=1>.</style>                      players of that fact.

<style color=#00ffffff size=1>.</style>            clique.notify(cliqueid,msg)
<style color=#00ffffff size=1>.</style>                      Notify sends an informational message to another
<style color=#00ffffff size=1>.</style>                      clique. The clique so referenced must be either
<style color=#00ffffff size=1>.</style>                      the parent or a child of clique. The message is
<style color=#00ffffff size=1>.</style>                      not sent synchronously, and care should be taken
<style color=#00ffffff size=1>.</style>                      not to send messages that can cause an indefinite
<style color=#00ffffff size=1>.</style>                      recursion.

<style color=#00ffffff size=1>.</style>         Member
<style color=#00ffffff size=1>.</style>            The Member type represents a member of a clique.

<style color=#00ffffff size=1>.</style>            member.id The member's identifier is an integer  unique
<style color=#00ffffff size=1>.</style>                      across all current members of the clique, but ids
<style color=#00ffffff size=1>.</style>                      of members that have left the clique will be
<style color=#00ffffff size=1>.</style>                      reused. There may not be two members of the same
<style color=#00ffffff size=1>.</style>                      name in the same clique.

<style color=#00ffffff size=1>.</style>            member.name
<style color=#00ffffff size=1>.</style>                      Name holds the authenticated name of the member.
<style color=#00ffffff size=1>.</style>                      This is necessarily unique over the members of a
<style color=#00ffffff size=1>.</style>                      clique.

<style color=#00ffffff size=1>.</style>            member.obj(id)
<style color=#00ffffff size=1>.</style>                      Obj converts from a member's external object
<style color=#00ffffff size=1>.</style>                      identifier to the clique's local Object that it
<style color=#00ffffff size=1>.</style>                      represents. It returns nil if there is no such
<style color=#00ffffff size=1>.</style>                      object.

<style color=#00ffffff size=1>.</style>            member.del(suspend)
<style color=#00ffffff size=1>.</style>                      Del deletes member from the clique\; no more
<style color=#00ffffff size=1>.</style>                      requests from member will be received by the
<style color=#00ffffff size=1>.</style>                      clique engine. If suspend is non-zero, if a member
<style color=#00ffffff size=1>.</style>                      of the same name joins again it will be allocated
<style color=#00ffffff size=1>.</style>                      the same object id, allowing a member to leave and
<style color=#00ffffff size=1>.</style>                      join again without losing state.

<style color=#00ffffff size=1>.</style>         \fBObject\fP
<style color=#00ffffff size=1>.</style>            The Object type is the basic unit of clique engine state. An
<style color=#00ffffff size=1>.</style>            object's children can be selectively concealed from members\;
<style color=#00ffffff size=1>.</style>            it holds a set of (attribute, value) pairs, each of which
<style color=#00ffffff size=1>.</style>            can be concealed likewise. Where an argument r, of Range
<style color=#00ffffff size=1>.</style>            type is used, it refers to a range of an object's children
<style color=#00ffffff size=1>.</style>            starting at index r.start, and finishing at r.end-1. All the
<style color=#00ffffff size=1>.</style>            data members of an Object should be treated as read-only.

<style color=#00ffffff size=1>.</style>            obj.setattr(name, val, vis)
<style color=#00ffffff size=1>.</style>                      Setattr sets attribute name in obj to val. If the
<style color=#00ffffff size=1>.</style>                      attribute is being created for the first time,
<style color=#00ffffff size=1>.</style>                      then it will be given visibility vis. Name should
<style color=#00ffffff size=1>.</style>                      be non-empty, and should not contain any space
<style color=#00ffffff size=1>.</style>                      characters. Note that it is not possible for an
<style color=#00ffffff size=1>.</style>                      attribute to refer directly to an object by its
<style color=#00ffffff size=1>.</style>                      identifier\; if this facility is needed, another
<style color=#00ffffff size=1>.</style>                      identifying scheme should be used. This also
<style color=#00ffffff size=1>.</style>                      applies to member identifiers, which will change
<style color=#00ffffff size=1>.</style>                      if the clique is saved and loaded again.

<style color=#00ffffff size=1>.</style>            obj.getattr(name)
<style color=#00ffffff size=1>.</style>                      Getattr yields the current value of the attribute
<style color=#00ffffff size=1>.</style>                      name in obj. If an attribute is not set, it yields
<style color=#00ffffff size=1>.</style>                      nil.

<style color=#00ffffff size=1>.</style>            obj.delete()
<style color=#00ffffff size=1>.</style>                      Delete removes obj from the object hierarchy.

<style color=#00ffffff size=1>.</style>            obj.deletechildren(r)
<style color=#00ffffff size=1>.</style>                      Deletechildren deletes children in range r from
<style color=#00ffffff size=1>.</style>                      obj.

<style color=#00ffffff size=1>.</style>            obj.transfer(r, dst, i)
<style color=#00ffffff size=1>.</style>                      Transfer transfers the children in range r from
<style color=#00ffffff size=1>.</style>                      obj to just before the object at index i in dst.
<style color=#00ffffff size=1>.</style>                      It is permissible for obj and dst to be the same
<style color=#00ffffff size=1>.</style>                      object.

<style color=#00ffffff size=1>.</style>            obj.setvisibility(visibility)
<style color=#00ffffff size=1>.</style>                      Setvisibility allows the set of members given in
<style color=#00ffffff size=1>.</style>                      visibility to see the children of obj, and denies
<style color=#00ffffff size=1>.</style>                      access to all others. Members are notified of the
<style color=#00ffffff size=1>.</style>                      change.

<style color=#00ffffff size=1>.</style>            obj.setattrvisibility(name, visibility)
<style color=#00ffffff size=1>.</style>                      Setattrvisibility allows the set of members given
<style color=#00ffffff size=1>.</style>                      in visibility to see the value of obj's attribute
<style color=#00ffffff size=1>.</style>                      name, and denies access to all others. Members are
<style color=#00ffffff size=1>.</style>                      not notified of the change\; if there is a need to
<style color=#00ffffff size=1>.</style>                      communicate the fact of an attribute becoming
<style color=#00ffffff size=1>.</style>                      invisible to members, it should be done by using
<style color=#00ffffff size=1>.</style>                      another (visible) attribute to communicate the
<style color=#00ffffff size=1>.</style>                      change.

<style color=#00ffffff size=1>.</style>         Archives
<style color=#00ffffff size=1>.</style>            The Archives module provides a means of committing a clique
<style color=#00ffffff size=1>.</style>            to permanent storage and retrieving it later. It should
<style color=#00ffffff size=1>.</style>            first be initialised by calling init, passing the Spree
<style color=#00ffffff size=1>.</style>            module in mod. Write writes clique to the file file. Info
<style color=#00ffffff size=1>.</style>            gives a set of attributes and values associated with the
<style color=#00ffffff size=1>.</style>            clique\; members gives the set of clique members for which
<style color=#00ffffff size=1>.</style>            visibility information will be archived\; visibility
<style color=#00ffffff size=1>.</style>            information for other members is forgotten.

<style color=#00ffffff size=1>.</style>            Read opens file and returns it as an Archive adt, say a. A
<style color=#00ffffff size=1>.</style>            .argv holds the command line arguments to the clique module
<style color=#00ffffff size=1>.</style>            (including the name of the module, its first element)\; a
<style color=#00ffffff size=1>.</style>            .members gives the names of all archived members - the id of
<style color=#00ffffff size=1>.</style>            an archived member is given by its index in the array\; a
<style color=#00ffffff size=1>.</style>            .info gives the list of attributes an values as stored by
<style color=#00ffffff size=1>.</style>            write\; a.objects holds the clique objects. Readheader is
<style color=#00ffffff size=1>.</style>            just like read except that it parses the header only, so
<style color=#00ffffff size=1>.</style>            will return an Archive adt such that a.objects is nil.

<style color=#00ffffff size=1>.</style>         Module Interface
<style color=#00ffffff size=1>.</style>            An engine module, mod, must implement the following
<style color=#00ffffff size=1>.</style>            functions. Where a function returns a string, it is
<style color=#00ffffff size=1>.</style>            interpreted as an error response to the member responsible
<style color=#00ffffff size=1>.</style>            for the request\; an empty string signifies no error.

<style color=#00ffffff size=1>.</style>            mod->init(srvmod,clique,argv)
<style color=#00ffffff size=1>.</style>                 Init initialises the clique engine. Clique is the
<style color=#00ffffff size=1>.</style>                 clique that the engine is controlling, and srvmod is
<style color=#00ffffff size=1>.</style>                 the Spree module holding its associated data. An error
<style color=#00ffffff size=1>.</style>                 response from this function causes the clique to be
<style color=#00ffffff size=1>.</style>                 aborted. Argv gives a list of arguments to the engine,
<style color=#00ffffff size=1>.</style>                 starting with its module name.

<style color=#00ffffff size=1>.</style>            mod->join(member,e,suspended)
<style color=#00ffffff size=1>.</style>                 Member has made a request to join the clique\; an error
<style color=#00ffffff size=1>.</style>                 response causes the request to be refused, otherwise
<style color=#00ffffff size=1>.</style>                 the member joins the clique. E is a message from the
<style color=#00ffffff size=1>.</style>                 client about how it would like to join the clique (e.g.
<style color=#00ffffff size=1>.</style>                 join, watch, etc). Suspended is non-zero if the member
<style color=#00ffffff size=1>.</style>                 was previously suspended from the clique.

<style color=#00ffffff size=1>.</style>            mod->leave(member)
<style color=#00ffffff size=1>.</style>                 Member has left the clique. If leave returns zero, the
<style color=#00ffffff size=1>.</style>                 member will not be deleted from the clique, but merely
<style color=#00ffffff size=1>.</style>                 suspended until they should join again.

<style color=#00ffffff size=1>.</style>            mod->command(member, e)
<style color=#00ffffff size=1>.</style>                 Member has sent the command e. The command usually
<style color=#00ffffff size=1>.</style>                 follows the simple message conventions used in spree
<style color=#00ffffff size=1>.</style>                 (4), i.e. simple space-separated tokens.

<style color=#00ffffff size=1>.</style>            mod->notify(cliqueid,s)
<style color=#00ffffff size=1>.</style>                 A notification, s, has been posted to the current
<style color=#00ffffff size=1>.</style>                 clique by the clique identified by cliqueid. The
<style color=#00ffffff size=1>.</style>                 posting clique is either a parent or a child of the
<style color=#00ffffff size=1>.</style>                 current clique.

<style color=#00ffffff size=1>.</style>            mod.

EXAMPLE
<style color=#00ffffff size=1>.</style>            The following is a small, but working example of a clique
<style color=#00ffffff size=1>.</style>            engine that acts as a chat server (parsing error checking
<style color=#00ffffff size=1>.</style>            omitted, and white-space compressed to save paper):

<style color=#00ffffff size=1>.</style>            implement Cliquemodule\;
<style color=#00ffffff size=1>.</style>            include "sys.m"\;
<style color=#00ffffff size=1>.</style>                sys: Sys\;
<style color=#00ffffff size=1>.</style>            include "draw.m"\;
<style color=#00ffffff size=1>.</style>            include "../spree.m"\;
<style color=#00ffffff size=1>.</style>                spree: Spree\;
<style color=#00ffffff size=1>.</style>                Clique, Member: import spree\;
<style color=#00ffffff size=1>.</style>            clique: ref Clique\;
<style color=#00ffffff size=1>.</style>            clienttype(): string
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                return "chat"\;
<style color=#00ffffff size=1>.</style>            }
<style color=#00ffffff size=1>.</style>            init(g: ref Clique, srvmod: Spree): string
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                (sys, clique, spree) = (load Sys Sys->PATH, g, srvmod)\;
<style color=#00ffffff size=1>.</style>                return nil\;
<style color=#00ffffff size=1>.</style>            }
<style color=#00ffffff size=1>.</style>            join(nil: ref Member): string
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                return nil\;
<style color=#00ffffff size=1>.</style>            }
<style color=#00ffffff size=1>.</style>            leave(nil: ref Member)
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            }
<style color=#00ffffff size=1>.</style>            command(member: ref Member, cmd: string): string
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                clique.action("say " + string member.id + " " + cmd, nil, nil, ~0)\;
<style color=#00ffffff size=1>.</style>                return nil\;
<style color=#00ffffff size=1>.</style>            }

SOURCE
<style color=#00ffffff size=1>.</style>            /appl/cmd/cliques/spree.b

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=spree(4)>spree(4)</action>, <action name=spree-objstore(2)>spree-objstore(2)</action>, <action name=spree-cardlib(2)>spree-cardlib(2)</action>, spree-allow
<style color=#00ffffff size=1>.</style>            (2),

BUGS
<style color=#00ffffff size=1>.</style>            The reuse of object ids can lead to problems when objects
<style color=#00ffffff size=1>.</style>            are deleted and recreated on the server before clients
<style color=#00ffffff size=1>.</style>            become aware of the changes.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
