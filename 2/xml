<action name=XML(2)>XML(2)</action>                                                     <action name=XML(2)>XML(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            xml - XML navigation

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "xml.m"\;

<style color=#00ffffff size=1>.</style>            xml := load Xml Xml->PATH\;
<style color=#00ffffff size=1>.</style>            Parser, Item, Locator, Attributes, Mark: import xml\;

<style color=#00ffffff size=1>.</style>            init:   fn(): string\;
<style color=#00ffffff size=1>.</style>            open: fn(f: string, warning: chan of (Locator, string),
<style color=#00ffffff size=1>.</style>                            preelem: string): (ref Parser, string)\;
<style color=#00ffffff size=1>.</style>            fopen: fn(iob: ref Bufio->Iobuf, f: string, warning: chan of (Locator, string),
<style color=#00ffffff size=1>.</style>                            preelem: string): (ref Parser, string)\;

<style color=#00ffffff size=1>.</style>            Parser: adt {
<style color=#00ffffff size=1>.</style>                fileoffset: int\;

<style color=#00ffffff size=1>.</style>                next:       fn(p: self ref Parser): ref Item\;
<style color=#00ffffff size=1>.</style>                down:       fn(p: self ref Parser)\;
<style color=#00ffffff size=1>.</style>                up:         fn(p: self ref Parser)\;
<style color=#00ffffff size=1>.</style>                mark:       fn(p: self ref Parser): ref Mark\;
<style color=#00ffffff size=1>.</style>                atmark:     fn(p: self ref Parser, m: ref Mark): int\;
<style color=#00ffffff size=1>.</style>                goto:       fn(p: self ref Parser, m: ref Mark)\;
<style color=#00ffffff size=1>.</style>                str2mark:   fn(p: self ref Parser, s: string): ref Mark\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Item: adt {
<style color=#00ffffff size=1>.</style>                fileoffset: int\;
<style color=#00ffffff size=1>.</style>                pick {
<style color=#00ffffff size=1>.</style>                Tag =>
<style color=#00ffffff size=1>.</style>                    name:   string\;
<style color=#00ffffff size=1>.</style>                    attrs:  Attributes\;
<style color=#00ffffff size=1>.</style>                Text =>
<style color=#00ffffff size=1>.</style>                    ch:     string\;
<style color=#00ffffff size=1>.</style>                    ws1:	int\;
<style color=#00ffffff size=1>.</style>            		ws2:    int\;
<style color=#00ffffff size=1>.</style>                Process =>
<style color=#00ffffff size=1>.</style>                    target: string\;
<style color=#00ffffff size=1>.</style>                    data:   string\;
<style color=#00ffffff size=1>.</style>                Doctype =>
<style color=#00ffffff size=1>.</style>                    name:   string\;
<style color=#00ffffff size=1>.</style>                    public: int\;
<style color=#00ffffff size=1>.</style>                    params: list of string\;
<style color=#00ffffff size=1>.</style>                Stylesheet =>
<style color=#00ffffff size=1>.</style>                    attrs:  Attributes\;
<style color=#00ffffff size=1>.</style>                Error =>
<style color=#00ffffff size=1>.</style>                    loc:    Locator\;
<style color=#00ffffff size=1>.</style>                    msg:    string\;
<style color=#00ffffff size=1>.</style>                }
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Locator: adt {
<style color=#00ffffff size=1>.</style>                line:       int\;
<style color=#00ffffff size=1>.</style>                systemid:   string\;
<style color=#00ffffff size=1>.</style>                publicid:   string\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Attribute: adt {
<style color=#00ffffff size=1>.</style>                name:       string\;
<style color=#00ffffff size=1>.</style>                value:      string\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Attributes: adt {
<style color=#00ffffff size=1>.</style>                all:        fn(a: self Attributes): list of Attribute\;
<style color=#00ffffff size=1>.</style>                get:        fn(a: self Attributes, name: string): string\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Mark: adt {
<style color=#00ffffff size=1>.</style>                offset:     int\;
<style color=#00ffffff size=1>.</style>                str:        fn(m: self ref Mark): string\;   
<style color=#00ffffff size=1>.</style>            }\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Xml provides an interface for navigating XML files
<style color=#00ffffff size=1>.</style>            (`documents'). Once loaded, the module must first be
<style color=#00ffffff size=1>.</style>            initialised by calling init. A new parser instance is
<style color=#00ffffff size=1>.</style>            created by calling open(f, warning, preelem), which opens
<style color=#00ffffff size=1>.</style>            the file f for parsing as an XML document, or fopen(iob, 
<style color=#00ffffff size=1>.</style>            name, warning, preelem), which does the same for an already
<style color=#00ffffff size=1>.</style>            open Iobuf (the string name will be used in diagnostics).
<style color=#00ffffff size=1>.</style>            Both functions return a tuple (p, err). If there is an error
<style color=#00ffffff size=1>.</style>            opening the document, p is nil, and err contains a
<style color=#00ffffff size=1>.</style>            description of the error\; otherwise p can be used to examine
<style color=#00ffffff size=1>.</style>            the contents of the document. If warning is not nil,
<style color=#00ffffff size=1>.</style>            non-fatal errors encountered when parsing will be sent on
<style color=#00ffffff size=1>.</style>            this channel - a separate process will be needed to received
<style color=#00ffffff size=1>.</style>            them. Each error is represented by a tuple (loc, msg),
<style color=#00ffffff size=1>.</style>            containing the location loc, and the description, msg, of
<style color=#00ffffff size=1>.</style>            the error encountered. One XML tag, preelem, may be marked
<style color=#00ffffff size=1>.</style>            for special treatment by the XML parser: within this tag all
<style color=#00ffffff size=1>.</style>            white space will be passed through as-is.

<style color=#00ffffff size=1>.</style>            Once an XML document has been opened, the following Parser
<style color=#00ffffff size=1>.</style>            methods may be used to examine the items contained within:

<style color=#00ffffff size=1>.</style>            p.next()  An XML document is represented by a
<style color=#00ffffff size=1>.</style>                      tree-structure. Next returns the next item in the
<style color=#00ffffff size=1>.</style>                      document at the current level of the tree within
<style color=#00ffffff size=1>.</style>                      the current parent element. If there are no more
<style color=#00ffffff size=1>.</style>                      such items, it returns nil.

<style color=#00ffffff size=1>.</style>            p.down()  Down descends into the element that has just been
<style color=#00ffffff size=1>.</style>                      returned by next, which should be a Tag item.
<style color=#00ffffff size=1>.</style>                      Subsequent items returned by next will be those
<style color=#00ffffff size=1>.</style>                      within that tag.

<style color=#00ffffff size=1>.</style>            p.up()    Up moves up one level in the XML tree.

<style color=#00ffffff size=1>.</style>            p.mark()  Mark returns a mark that can be used to return
<style color=#00ffffff size=1>.</style>                      later to the current position in the document. The
<style color=#00ffffff size=1>.</style>                      underlying file must be seekable for this to work.

<style color=#00ffffff size=1>.</style>            p.goto(m) Goes back to a previously marked position, m, in
<style color=#00ffffff size=1>.</style>                      the document.

<style color=#00ffffff size=1>.</style>            p.atmark(m)
<style color=#00ffffff size=1>.</style>                      Atmark returns non-zero if the current position in
<style color=#00ffffff size=1>.</style>                      the document is the same as that marked by m. The
<style color=#00ffffff size=1>.</style>                      current tree level is ignored in the comparison.

<style color=#00ffffff size=1>.</style>            p.str2mark(s)
<style color=#00ffffff size=1>.</style>                      Str2mark turns a string as created by Mark.str
<style color=#00ffffff size=1>.</style>                      back into a mark as returned by Parser.mark.

<style color=#00ffffff size=1>.</style>         Items
<style color=#00ffffff size=1>.</style>            Various species of items live in XML documents\; they are
<style color=#00ffffff size=1>.</style>            encapsulated in the Item adt. This contains one member in
<style color=#00ffffff size=1>.</style>            common to all its subtypes: fileoffset, the position in the
<style color=#00ffffff size=1>.</style>            XML document of the start of the item. The various kinds of
<style color=#00ffffff size=1>.</style>            item are as follows:

<style color=#00ffffff size=1>.</style>            Tag  A generic XML tag. Name names the tag, and attrs holds
<style color=#00ffffff size=1>.</style>                 its attributes, if any.

<style color=#00ffffff size=1>.</style>            Text Text represents inline text in the XML document. With
<style color=#00ffffff size=1>.</style>                 the exception of text inside the tag named by preelem
<style color=#00ffffff size=1>.</style>                 in open, any runs of white space are compressed to a
<style color=#00ffffff size=1>.</style>                 single space, and white space at the start or end of
<style color=#00ffffff size=1>.</style>                 the text is elided. Ch contains the resulting text\; ws1
<style color=#00ffffff size=1>.</style>                 and ws2 are non-zero if there was originally white
<style color=#00ffffff size=1>.</style>                 space at the start or end of the text respectively.

<style color=#00ffffff size=1>.</style>            Process
<style color=#00ffffff size=1>.</style>                 Process represents an XML document processing
<style color=#00ffffff size=1>.</style>                 directive. Target is the processing instruction's
<style color=#00ffffff size=1>.</style>                 target, and data holds the rest of the text inside the
<style color=#00ffffff size=1>.</style>                 directive. XML stylesheet directives are recognised
<style color=#00ffffff size=1>.</style>                 directly and have their own item type.

<style color=#00ffffff size=1>.</style>            Doctype
<style color=#00ffffff size=1>.</style>                 Doctype should only occur at the start of an xml
<style color=#00ffffff size=1>.</style>                 document, and represents the type of the XML document.

<style color=#00ffffff size=1>.</style>            Stylesheet
<style color=#00ffffff size=1>.</style>                 Stylesheet represents an XML stylesheet processing
<style color=#00ffffff size=1>.</style>                 request. The data of the processing request is parsed
<style color=#00ffffff size=1>.</style>                 as per the RFC into attribute-value pairs.

<style color=#00ffffff size=1>.</style>            Error
<style color=#00ffffff size=1>.</style>                 If an unrecoverable error occurs processing the
<style color=#00ffffff size=1>.</style>                 document, an Error item is returned holding the
<style color=#00ffffff size=1>.</style>                 location (loc), and description (msg) of the error.
<style color=#00ffffff size=1>.</style>                 This will be the last item returned by the parser.

<style color=#00ffffff size=1>.</style>            The attribute-value pairs in Tag and Stylesheet items are
<style color=#00ffffff size=1>.</style>            held in an Atttributes adt, say a. A.all() yields a list
<style color=#00ffffff size=1>.</style>            holding all the attributes\; a.get(name) yields the value of
<style color=#00ffffff size=1>.</style>            the attribute name.

<style color=#00ffffff size=1>.</style>            The location returned when an error is reported is held
<style color=#00ffffff size=1>.</style>            inside a Locator adt, which holds the line number on which
<style color=#00ffffff size=1>.</style>            the error occurred, the ``system id'' of the document (in
<style color=#00ffffff size=1>.</style>            this implementation, its file name), and the "public id" of
<style color=#00ffffff size=1>.</style>            the document (not currently used).

<style color=#00ffffff size=1>.</style>            A Mark m may be converted to a string with m.str()\; this
<style color=#00ffffff size=1>.</style>            enables marks to be written out to external storage, to
<style color=#00ffffff size=1>.</style>            index a large XML document, for example. Note that if the
<style color=#00ffffff size=1>.</style>            XML document changes, any stored marks will no longer be
<style color=#00ffffff size=1>.</style>            valid.

SOURCE
<style color=#00ffffff size=1>.</style>            /appl/lib/xml.b

SEE ALSO
<style color=#00ffffff size=1>.</style>            ``Extensible Markup Language (XML) 1.0 (Second Edition)'',
<style color=#00ffffff size=1>.</style>            http://www.w3.org/TR/REC-xml

<style color=#00ffffff size=1>.</style>            ``Navigating Large XML Documents on Small Devices'' in
<style color=#00ffffff size=1>.</style>            Volume 2.

BUGS
<style color=#00ffffff size=1>.</style>            XML's definition makes it tricky to handle leading and
<style color=#00ffffff size=1>.</style>            trailing white space efficiently\; ws1 and ws2 in Item.Text
<style color=#00ffffff size=1>.</style>            is the current compromise.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
