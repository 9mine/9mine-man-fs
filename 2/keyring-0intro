<action name=KEYRING-INTRO(2)>KEYRING-INTRO(2)</action>                                 <action name=KEYRING-INTRO(2)>KEYRING-INTRO(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            Keyring intro - introduction to the Keyring module

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "keyring.m"\;
<style color=#00ffffff size=1>.</style>            keyring := load Keyring Keyring->PATH\;

<style color=#00ffffff size=1>.</style>            SigAlg: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                name:   string\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            PK: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                sa:     ref SigAlg\;
<style color=#00ffffff size=1>.</style>                owner:  string\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            SK: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                sa:     ref SigAlg\;
<style color=#00ffffff size=1>.</style>                owner:  string\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Certificate: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                sa:     ref SigAlg\;
<style color=#00ffffff size=1>.</style>                ha:     string\;
<style color=#00ffffff size=1>.</style>                signer: string\;
<style color=#00ffffff size=1>.</style>                exp:    int\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            DigestState: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                # hidden state
<style color=#00ffffff size=1>.</style>                copy:   fn(d: self ref DigestState): ref DigestState\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Authinfo: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                mysk:   ref SK\;
<style color=#00ffffff size=1>.</style>                mypk:   ref PK\;
<style color=#00ffffff size=1>.</style>                cert:   ref Certificate\;
<style color=#00ffffff size=1>.</style>                spk:    ref PK\;
<style color=#00ffffff size=1>.</style>                alpha:  ref IPint\;
<style color=#00ffffff size=1>.</style>                p:      ref IPint\;
<style color=#00ffffff size=1>.</style>            }\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            This module contains a mixed set of functions that
<style color=#00ffffff size=1>.</style>            variously:

<style color=#00ffffff size=1>.</style>            •    perform infinite precision modular arithmetic\; see
<style color=#00ffffff size=1>.</style>                 <action name=keyring-ipint(2)>keyring-ipint(2)</action>

<style color=#00ffffff size=1>.</style>            •    form cryptographically secure digests\; see keyring-sha1
<style color=#00ffffff size=1>.</style>                 (2)

<style color=#00ffffff size=1>.</style>            •    generate public/private key pairs and transform them to
<style color=#00ffffff size=1>.</style>                 and from textual form\; see <action name=keyring-gensk(2)>keyring-gensk(2)</action> and
<style color=#00ffffff size=1>.</style>                 <action name=keyring-certtostr(2)>keyring-certtostr(2)</action>

<style color=#00ffffff size=1>.</style>            •    encrypt data, using AES, DES, or IDEA\; see
<style color=#00ffffff size=1>.</style>                 <action name=keyring-crypt(2)>keyring-crypt(2)</action>

<style color=#00ffffff size=1>.</style>            •    create and verify cryptographic signatures using the
<style color=#00ffffff size=1>.</style>                 public keys\; see <action name=keyring-auth(2)>keyring-auth(2)</action>

<style color=#00ffffff size=1>.</style>            •    authenticate the parties on a connection\; see
<style color=#00ffffff size=1>.</style>                 <action name=keyring-auth(2)>keyring-auth(2)</action>

<style color=#00ffffff size=1>.</style>            •    read and write files containing the information needed
<style color=#00ffffff size=1>.</style>                 to authenticate the parties on a connection\; see
<style color=#00ffffff size=1>.</style>                 <action name=keyring-auth(2)>keyring-auth(2)</action>

<style color=#00ffffff size=1>.</style>            •    send Limbo byte arrays and strings across a connection\;
<style color=#00ffffff size=1>.</style>                 see <action name=keyring-getstring(2)>keyring-getstring(2)</action>

<style color=#00ffffff size=1>.</style>            Each collection is discussed in turn.

<style color=#00ffffff size=1>.</style>         Large Precision Arithmetic
<style color=#00ffffff size=1>.</style>            The IPint adt is provided to allow some cryptographic
<style color=#00ffffff size=1>.</style>            functions to be implemented in Limbo. IPint stands for
<style color=#00ffffff size=1>.</style>            infinite precision integer, though, for space
<style color=#00ffffff size=1>.</style>            considerations, our implementation limits the maximum
<style color=#00ffffff size=1>.</style>            integer to 2\u\s-28192\s0\d-1.

<style color=#00ffffff size=1>.</style>            An IPint can be converted into two external formats. The
<style color=#00ffffff size=1>.</style>            first is an array of bytes in which the first byte is the
<style color=#00ffffff size=1>.</style>            highest order byte of the integer.  This format is useful
<style color=#00ffffff size=1>.</style>            when communicating with the <action name=ssl(3)>ssl(3)</action> device. The second is a
<style color=#00ffffff size=1>.</style>            MIME base 64 format, that allows IPints to be stored in
<style color=#00ffffff size=1>.</style>            files or transmitted across networks in a human readable
<style color=#00ffffff size=1>.</style>            form.

<style color=#00ffffff size=1>.</style>         Public Key Cryptography
<style color=#00ffffff size=1>.</style>            Public key cryptography has many uses. Inferno relies on it
<style color=#00ffffff size=1>.</style>            only for digital signatures. Each Inferno user may generate
<style color=#00ffffff size=1>.</style>            a pair of matched keys, one public and one private. The
<style color=#00ffffff size=1>.</style>            private key may be used to digitally sign data, the public
<style color=#00ffffff size=1>.</style>            one to verify the signature. Public key algorithms have been
<style color=#00ffffff size=1>.</style>            chosen to make it difficult to spoof a signature or guess
<style color=#00ffffff size=1>.</style>            the private key.

<style color=#00ffffff size=1>.</style>            For public keys algorithms to work, there must be a way to
<style color=#00ffffff size=1>.</style>            distribute the public keys: in order to verify that X signed
<style color=#00ffffff size=1>.</style>            something, we must know X's public key. To simplify the
<style color=#00ffffff size=1>.</style>            problem, we have instituted a trust hierarchy that requires
<style color=#00ffffff size=1>.</style>            people to know only the public keys of certifying
<style color=#00ffffff size=1>.</style>            authorities (CAs). After generating a public key, one can
<style color=#00ffffff size=1>.</style>            have the concatenation of one's name, expiration date, and
<style color=#00ffffff size=1>.</style>            key signed by a CA. The information together with the name
<style color=#00ffffff size=1>.</style>            of the CA and the signature is called a certificate.

<style color=#00ffffff size=1>.</style>            At the beginning of a conversation, the parties exchange
<style color=#00ffffff size=1>.</style>            certificates. They then use the CA's public key to verify
<style color=#00ffffff size=1>.</style>            each other's public keys. The CA's public key, a system wide
<style color=#00ffffff size=1>.</style>            Diffie-Hellman base and modulus, one's private key, one's
<style color=#00ffffff size=1>.</style>            public key and certificate are kept in a Limbo adt called
<style color=#00ffffff size=1>.</style>            Keyring->Authinfo. An Authinfo adt can be read from from a
<style color=#00ffffff size=1>.</style>            file using readauthinfo or written to a file using
<style color=#00ffffff size=1>.</style>            writeauthinfo, both from <action name=keyring-auth(2)>keyring-auth(2)</action>.

<style color=#00ffffff size=1>.</style>            Authinfo adts are normally created during the login and
<style color=#00ffffff size=1>.</style>            registration procedures described below.

<style color=#00ffffff size=1>.</style>         Authentication
<style color=#00ffffff size=1>.</style>            Two parties conversing on a network connection can
<style color=#00ffffff size=1>.</style>            authenticate each other's identity using the functions in
<style color=#00ffffff size=1>.</style>            <action name=keyring-auth(2)>keyring-auth(2)</action>. They use the Keyring->Authinfo information
<style color=#00ffffff size=1>.</style>            to run the Station to Station (STS) authentication protocol.
<style color=#00ffffff size=1>.</style>            STS not only authenticates each party's identity to the
<style color=#00ffffff size=1>.</style>            other but also establishes a random bit string known only to
<style color=#00ffffff size=1>.</style>            the two parties. This bit string can be used as a key to
<style color=#00ffffff size=1>.</style>            encrypt or authenticate subsequent messages sent between the
<style color=#00ffffff size=1>.</style>            two parties.

<style color=#00ffffff size=1>.</style>         Secure Communications
<style color=#00ffffff size=1>.</style>            After exchanging secrets, communicating parties may encode
<style color=#00ffffff size=1>.</style>            the conversation to guarantee varying levels of security:

<style color=#00ffffff size=1>.</style>            •    none

<style color=#00ffffff size=1>.</style>            •    messages cannot be forged

<style color=#00ffffff size=1>.</style>            •    messages cannot be intercepted

<style color=#00ffffff size=1>.</style>            Encoding uses the line formats provided by the Secure
<style color=#00ffffff size=1>.</style>            Sockets Layer. See <action name=security-intro(2)>security-intro(2)</action> for more detail.

<style color=#00ffffff size=1>.</style>         Login and registration
<style color=#00ffffff size=1>.</style>            The Inferno authentication procedure requires that both
<style color=#00ffffff size=1>.</style>            parties possess an Authinfo adt containing a locally
<style color=#00ffffff size=1>.</style>            generated public/private key pair, the public key of a
<style color=#00ffffff size=1>.</style>            commonly trusted CA, and a signed certificate from the CA
<style color=#00ffffff size=1>.</style>            that links the party's identity and public key. This
<style color=#00ffffff size=1>.</style>            Authinfo adt is normally kept in a file. At some point,
<style color=#00ffffff size=1>.</style>            however, it must be created, and later conveyed securely
<style color=#00ffffff size=1>.</style>            between the user's machine and the CA. There are two ways to
<style color=#00ffffff size=1>.</style>            do this, the login procedure and the registration procedure.
<style color=#00ffffff size=1>.</style>            Both require an out of band channel between the CA and the
<style color=#00ffffff size=1>.</style>            user.

<style color=#00ffffff size=1>.</style>            The login procedures are used by typed commands and by
<style color=#00ffffff size=1>.</style>            programs using Tk. The login procedure relies on the CA and
<style color=#00ffffff size=1>.</style>            the user having established a common secret or password.
<style color=#00ffffff size=1>.</style>            This is done securely off line, perhaps by mail or
<style color=#00ffffff size=1>.</style>            telephone. This secret is then used to provide a secure path
<style color=#00ffffff size=1>.</style>            between CA and user machine to transfer the certificate and
<style color=#00ffffff size=1>.</style>            CA public key. See <action name=security-intro(2)>security-intro(2)</action> for more detail.

<style color=#00ffffff size=1>.</style>            The registration procedure is built into the <action name=mux(1)>mux(1)</action>
<style color=#00ffffff size=1>.</style>            interface and is intended for the set top box environment.
<style color=#00ffffff size=1>.</style>            When the set top box is first turned on, it creates a
<style color=#00ffffff size=1>.</style>            public/private key pair and dials the service provider's CA
<style color=#00ffffff size=1>.</style>            to get a key signed. The CA returns its public key and a
<style color=#00ffffff size=1>.</style>            signed certificate, blinded by a random bit string known
<style color=#00ffffff size=1>.</style>            only to the CA. A hash of the information is then displayed
<style color=#00ffffff size=1>.</style>            on the user screen. The user must then telephone the CA and
<style color=#00ffffff size=1>.</style>            compare this hashed foot print with the one at the CA. If
<style color=#00ffffff size=1>.</style>            they match and the user proves that he is a customer, the CA
<style color=#00ffffff size=1>.</style>            makes the blinding string publicly known.

<style color=#00ffffff size=1>.</style>         Data Types
<style color=#00ffffff size=1>.</style>            SigAlg
<style color=#00ffffff size=1>.</style>                 The SigAlg adt contains a single string that specifies
<style color=#00ffffff size=1>.</style>                 the algorithm used for digital signatures. The
<style color=#00ffffff size=1>.</style>                 allowable values are md5, md4 and sha1 that specify
<style color=#00ffffff size=1>.</style>                 which one-way hash function is used to produce a
<style color=#00ffffff size=1>.</style>                 digital signature or message digest.

<style color=#00ffffff size=1>.</style>            PK and SK
<style color=#00ffffff size=1>.</style>                 The PK adt contains the data necessary to construct a
<style color=#00ffffff size=1>.</style>                 public key\; the SK adt contains the data necessary to
<style color=#00ffffff size=1>.</style>                 construct a secret key. Both keys are built from the
<style color=#00ffffff size=1>.</style>                 combination of a specified signature algorithm and a
<style color=#00ffffff size=1>.</style>                 string representing the name of the owner of the key.

<style color=#00ffffff size=1>.</style>            Certificate
<style color=#00ffffff size=1>.</style>                 The Certificate adt contains a digital signature with
<style color=#00ffffff size=1>.</style>                 the certification of the trusted authority (CA).

<style color=#00ffffff size=1>.</style>            DigestState
<style color=#00ffffff size=1>.</style>                 The DigestState adt contains the hidden state of
<style color=#00ffffff size=1>.</style>                 partially completed hash functions during processing.
<style color=#00ffffff size=1>.</style>                 Its copy operation returns a reference to a copy of a
<style color=#00ffffff size=1>.</style>                 given state.

<style color=#00ffffff size=1>.</style>            Authinfo
<style color=#00ffffff size=1>.</style>                 The Authinfo adt contains an individual user's private
<style color=#00ffffff size=1>.</style>                 and public key, the signer's certificate and the
<style color=#00ffffff size=1>.</style>                 signer's public key, and the Diffie-Hellman parameters.

SOURCE
<style color=#00ffffff size=1>.</style>            /libcrypt/*.c
<style color=#00ffffff size=1>.</style>            /libinterp/keyring.c
<style color=#00ffffff size=1>.</style>            /libkeyring/*.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=security-intro(2)>security-intro(2)</action>
<style color=#00ffffff size=1>.</style>            B. Schneier, Applied Cryptography, 1996, J. Wiley & Sons,
<style color=#00ffffff size=1>.</style>            Inc.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
