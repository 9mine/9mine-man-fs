<action name=IPINTS(2)>IPINTS(2)</action>                                               <action name=IPINTS(2)>IPINTS(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            ipints: IPint - `infinite' precision integer utility
<style color=#00ffffff size=1>.</style>            functions

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "ipints.m"
<style color=#00ffffff size=1>.</style>            ipints:= load IPints IPints->PATH\;

<style color=#00ffffff size=1>.</style>            IPint: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>              iptob64:   fn(i: self ref IPint): string\;
<style color=#00ffffff size=1>.</style>              iptob64z:  fn(i: self ref IPint): string\;
<style color=#00ffffff size=1>.</style>              b64toip:   fn(str: string)  : ref IPint\;
<style color=#00ffffff size=1>.</style>              iptobytes: fn(i: self ref IPint): array of byte\;
<style color=#00ffffff size=1>.</style>              bytestoip: fn(buf: array of byte): ref IPint\;
<style color=#00ffffff size=1>.</style>              iptobebytes: fn(i: self ref IPint): array of byte\;
<style color=#00ffffff size=1>.</style>              bebytestoip: fn(buf: array of byte): ref IPint\;
<style color=#00ffffff size=1>.</style>              inttoip:   fn(i: int): ref IPint\;
<style color=#00ffffff size=1>.</style>              iptoint:   fn(i: self ref IPint): int\;
<style color=#00ffffff size=1>.</style>              iptostr:   fn(i: self ref IPint, base: int): string\;
<style color=#00ffffff size=1>.</style>              strtoip:   fn(str: string, base: int): ref IPint\;
<style color=#00ffffff size=1>.</style>              random:    fn(nbits: int): ref IPint\;
<style color=#00ffffff size=1>.</style>              copy:      fn(i: self ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              bits:      fn(i:  self ref IPint): int\;
<style color=#00ffffff size=1>.</style>              expmod:    fn(base: self ref IPint, exp, mod: ref IPint):ref IPint\;
<style color=#00ffffff size=1>.</style>              add:  fn(i1: self ref IPint, i2: ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              sub:  fn(i1: self ref IPint, i2: ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              neg:  fn(i: self ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              mul:  fn(i1: self ref IPint, i2: ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              div:  fn(i1: self ref IPint, i2: ref IPint): (ref IPint, ref IPint)\;
<style color=#00ffffff size=1>.</style>              mod:  fn(i1: self ref IPint, i2: ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              eq:   fn(i1:  self ref IPint, i2: ref IPint): int\;
<style color=#00ffffff size=1>.</style>              cmp:  fn(i1: self ref IPint, i2: ref IPint): int\;
<style color=#00ffffff size=1>.</style>              shl:  fn(i: self ref IPint, n: int): ref IPint\;
<style color=#00ffffff size=1>.</style>              shr:  fn(i: self ref IPint, n: int): ref IPint\;
<style color=#00ffffff size=1>.</style>              and:  fn(i1: self ref IPint, i2: ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              ori:  fn(i1: self ref IPint, i2: ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              not:  fn(i: self ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>              xor:  fn(i1: self ref IPint, i2: ref IPint): ref IPint\;
<style color=#00ffffff size=1>.</style>            }\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            IPint provides the following arbitrary-length integer
<style color=#00ffffff size=1>.</style>            manipulation functions required for cryptographic support in
<style color=#00ffffff size=1>.</style>            Limbo:

<style color=#00ffffff size=1>.</style>            i.iptob64()
<style color=#00ffffff size=1>.</style>                 Returns a string that represents a large integer
<style color=#00ffffff size=1>.</style>                 textually in base 64 for convenient transmission over a
<style color=#00ffffff size=1>.</style>                 network connection.

<style color=#00ffffff size=1>.</style>            i.iptob64z()
<style color=#00ffffff size=1>.</style>                 Returns a similar representation to iptob64 but ensures
<style color=#00ffffff size=1>.</style>                 that the top bit of the received value is zero.

<style color=#00ffffff size=1>.</style>            b64toip(str)
<style color=#00ffffff size=1>.</style>                 Returns the IPint represented by the base-64 encoded
<style color=#00ffffff size=1>.</style>                 str.

<style color=#00ffffff size=1>.</style>            i.iptobytes()
<style color=#00ffffff size=1>.</style>                 Returns an array of bytes representing a large integer.
<style color=#00ffffff size=1>.</style>                 The representation includes both positive and negative
<style color=#00ffffff size=1>.</style>                 numbers.

<style color=#00ffffff size=1>.</style>            bytestoip(buf)
<style color=#00ffffff size=1>.</style>                 The inverse operation of iptobytes.

<style color=#00ffffff size=1>.</style>            i.iptobebytes()
<style color=#00ffffff size=1>.</style>                 Returns an array of bytes in big-endian format
<style color=#00ffffff size=1>.</style>                 representing the magnitude of a large integer\; used for
<style color=#00ffffff size=1>.</style>                 instance to pass a value to <action name=ssl(3)>ssl(3)</action>. Only non-negative
<style color=#00ffffff size=1>.</style>                 numbers are represented.

<style color=#00ffffff size=1>.</style>            bebytestoip(buf)
<style color=#00ffffff size=1>.</style>                 The inverse operation of iptobebytes.

<style color=#00ffffff size=1>.</style>            inttoip(i)
<style color=#00ffffff size=1>.</style>                 Creates a new large integer from integer i.

<style color=#00ffffff size=1>.</style>            i.iptoint()
<style color=#00ffffff size=1>.</style>                 Converts a large integer i to an int\; returns 0 on
<style color=#00ffffff size=1>.</style>                 error.

<style color=#00ffffff size=1>.</style>            i.iptostr(base)
<style color=#00ffffff size=1>.</style>                 Converts a large integer to a string in base base\;
<style color=#00ffffff size=1>.</style>                 returns nil on error. Only the bases 10, 16, 32, and 64
<style color=#00ffffff size=1>.</style>                 are supported.  Anything else defaults to 16.

<style color=#00ffffff size=1>.</style>            strtoip(str,base)
<style color=#00ffffff size=1>.</style>                 Converts a string str representing a number in in base
<style color=#00ffffff size=1>.</style>                 base to a large integer\; returns nil on error. Only the
<style color=#00ffffff size=1>.</style>                 bases 10, 16, 32, and 64 are supported.

<style color=#00ffffff size=1>.</style>            random(nbits)
<style color=#00ffffff size=1>.</style>                 Returns a large random number of length at most minbits
<style color=#00ffffff size=1>.</style>                 . The largest number allowed in the current
<style color=#00ffffff size=1>.</style>                 implementation is 2^8192-1 . The seed for the generator
<style color=#00ffffff size=1>.</style>                 is obtained by duelling clocks.

<style color=#00ffffff size=1>.</style>            i.copy()
<style color=#00ffffff size=1>.</style>                 Returns a reference to the same value as i.

<style color=#00ffffff size=1>.</style>            i.bits()
<style color=#00ffffff size=1>.</style>                 Returns the number of bits of precision of i.

<style color=#00ffffff size=1>.</style>            base.expmod(exp , mod)
<style color=#00ffffff size=1>.</style>                 Returns (base**exp) mod mod.

<style color=#00ffffff size=1>.</style>            i1.add(i2)
<style color=#00ffffff size=1>.</style>                 Returns (i1+i2).

<style color=#00ffffff size=1>.</style>            i1.sub(i2)
<style color=#00ffffff size=1>.</style>                 Returns (i1-i2).

<style color=#00ffffff size=1>.</style>            i1.mul(i2)
<style color=#00ffffff size=1>.</style>                 Returns i1*i2.

<style color=#00ffffff size=1>.</style>            i1.div(i2)
<style color=#00ffffff size=1>.</style>                 Returns (i1/i2, i1remi2).

<style color=#00ffffff size=1>.</style>            i1.mod(i2)
<style color=#00ffffff size=1>.</style>                 Returns (i1modi2).

<style color=#00ffffff size=1>.</style>            i1.eq(i2)
<style color=#00ffffff size=1>.</style>                 Returns 1 if i1 and i2 are equal\; 0 otherwise.

<style color=#00ffffff size=1>.</style>            i1.cmp(i2)
<style color=#00ffffff size=1>.</style>                 Compares two large integers, returning 1 if i1 is
<style color=#00ffffff size=1>.</style>                 larger, -1 if i2 is larger, and 0 if they are equal.

<style color=#00ffffff size=1>.</style>            i.shl(n)
<style color=#00ffffff size=1>.</style>                 Returns i<<n

<style color=#00ffffff size=1>.</style>            i.shr(n)
<style color=#00ffffff size=1>.</style>                 Returns i>>n

<style color=#00ffffff size=1>.</style>            i1.and(i2)
<style color=#00ffffff size=1>.</style>                 Returns i&n, bitwise AND

<style color=#00ffffff size=1>.</style>            i1.ori(i2)
<style color=#00ffffff size=1>.</style>                 Returns i|n, bitwise inclusive-OR (it is ori because
<style color=#00ffffff size=1>.</style>                 plain or is a Limbo keyword)

<style color=#00ffffff size=1>.</style>            i.not()
<style color=#00ffffff size=1>.</style>                 Returns ~i, bitwise ones-complement

<style color=#00ffffff size=1>.</style>            i1.xor(i2)
<style color=#00ffffff size=1>.</style>                 Returns i^n, bitwise exclusive-OR

SOURCE
<style color=#00ffffff size=1>.</style>            /libinterp/ipint.c
<style color=#00ffffff size=1>.</style>            /libmp

<style color=#00ffffff size=1>.</style>                                Inferno Manual
