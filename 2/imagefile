<action name=IMAGEFILE(2)>IMAGEFILE(2)</action>                                         <action name=IMAGEFILE(2)>IMAGEFILE(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            imagefile: readgif, readjpg, readpicfile, readpng,
<style color=#00ffffff size=1>.</style>            readxbitmap, remap - processing external image file formats

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "imagefile.m"\;

<style color=#00ffffff size=1>.</style>            gifreader  := load RImagefile RImagefile->READGIFPATH\;
<style color=#00ffffff size=1>.</style>            jpgreader  := load RImagefile RImagefile->READJPGPATH\;
<style color=#00ffffff size=1>.</style>            xbmreader  := load RImagefile RImagefile->READXBMPATH\;
<style color=#00ffffff size=1>.</style>            picreader  := load RImagefile RImagefile->READPICPATH\;
<style color=#00ffffff size=1>.</style>            pngreader := load RImagefile RImagefile->READPNGPATH\;

<style color=#00ffffff size=1>.</style>            imageremap := load Imageremap Imageremap->PATH\;

<style color=#00ffffff size=1>.</style>            Rawimage: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>                r:         Draw->Rect\;
<style color=#00ffffff size=1>.</style>                cmap:      array of byte\;
<style color=#00ffffff size=1>.</style>                nchans:    int\;
<style color=#00ffffff size=1>.</style>                chans:     array of array of byte\;
<style color=#00ffffff size=1>.</style>                chandesc:  int\;

<style color=#00ffffff size=1>.</style>                init:      fn(bufio: Bufio)\;
<style color=#00ffffff size=1>.</style>                read:      fn(fd: ref Bufio->Iobuf): (ref Rawimage, string)\;
<style color=#00ffffff size=1>.</style>                readmulti: fn(fd: ref Bufio->Iobuf):
<style color=#00ffffff size=1>.</style>                            (array of ref Rawimage, string)\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            init:          fn(bufio: Bufio)\;
<style color=#00ffffff size=1>.</style>            writeimage:    fn(fd: ref Bufio->Iobuf, image: ref Draw->Image)
<style color=#00ffffff size=1>.</style>                                            : string\;

<style color=#00ffffff size=1>.</style>            remap:         fn(i: ref RImagefile->Rawimage, d: ref Draw->Display,
<style color=#00ffffff size=1>.</style>                            errdiff: int): (ref Draw->Image, string)\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            The Rawimage adt of module RImagefile defines an internal
<style color=#00ffffff size=1>.</style>            representation and routines for reading images such as GIF
<style color=#00ffffff size=1>.</style>            and JPEG files. To read a set of files of a given format,
<style color=#00ffffff size=1>.</style>            load the appropriate module, pass its init function an
<style color=#00ffffff size=1>.</style>            implementation of the Bufio module, and pass read an
<style color=#00ffffff size=1>.</style>            Bufio->Iobuf for each file. Read returns a tuple: a ref
<style color=#00ffffff size=1>.</style>            Rawimage that holds the image and an error string. If the
<style color=#00ffffff size=1>.</style>            Rawimage is nil, the error string will report the reason.
<style color=#00ffffff size=1>.</style>            Files (particularly GIF files) are often incorrectly encoded
<style color=#00ffffff size=1>.</style>            but yield usable pictures, so even if a Rawimage is
<style color=#00ffffff size=1>.</style>            returned, the error string may still report problems.

<style color=#00ffffff size=1>.</style>            Some image file types (eg, GIF) support having several
<style color=#00ffffff size=1>.</style>            images in a single file. They can be read in all at once
<style color=#00ffffff size=1>.</style>            using readmulti, which returns a tuple with the array of
<style color=#00ffffff size=1>.</style>            images, and an error string as above.

<style color=#00ffffff size=1>.</style>            The Rawimage is always defined as one or more bytes per
<style color=#00ffffff size=1>.</style>            pixel, with nchans channels of data stored in the array
<style color=#00ffffff size=1>.</style>            chans. The chandesc field, described below, specifies the
<style color=#00ffffff size=1>.</style>            contents of chans. The rectangle r describes the shape of
<style color=#00ffffff size=1>.</style>            the picture.

<style color=#00ffffff size=1>.</style>            The Rawimage type can be converted to a regular Image (see
<style color=#00ffffff size=1>.</style>            <action name=draw-image(2)>draw-image(2)</action>) by calling module Imageremap's function
<style color=#00ffffff size=1>.</style>            remap. Remap is passed the Rawimage, a Display on which to
<style color=#00ffffff size=1>.</style>            create the image, and a flag that specifies whether to apply
<style color=#00ffffff size=1>.</style>            Floyd-Steinberg error diffusion code to the result, for
<style color=#00ffffff size=1>.</style>            smoother rendering of colours at the cost of some noise in
<style color=#00ffffff size=1>.</style>            the image.

<style color=#00ffffff size=1>.</style>            How to remap is defined by the RImagefile itself: the field
<style color=#00ffffff size=1>.</style>            chandesc specifies the type of the various chans of data:
<style color=#00ffffff size=1>.</style>            RImagefile->CRGB specifies a 3-colour RGB image with no
<style color=#00ffffff size=1>.</style>            colour map\; RImagefile->CY a monotone (luminance-only,
<style color=#00ffffff size=1>.</style>            grey-scale) image with no colour map\; and RImagefile->CRGB1
<style color=#00ffffff size=1>.</style>            a single-channel image with RGB colour map in cmap. The file
<style color=#00ffffff size=1>.</style>            readers set chandesc as appropriate for the format of the
<style color=#00ffffff size=1>.</style>            file.

<style color=#00ffffff size=1>.</style>            The writing of image files is defined by the module 
<style color=#00ffffff size=1>.</style>            WImagefile. To initialize the module, call its init function
<style color=#00ffffff size=1>.</style>            with an instance of the Bufio module and pass its writeimage
<style color=#00ffffff size=1>.</style>            function a Bufio->Iobuf representing the output stream and
<style color=#00ffffff size=1>.</style>            an image of type Draw->Image.

<style color=#00ffffff size=1>.</style>            These functions are split into separate modules to give
<style color=#00ffffff size=1>.</style>            applications control over the memory they need to process
<style color=#00ffffff size=1>.</style>            images.

SOURCE
<style color=#00ffffff size=1>.</style>            /appl/lib/readgif.b
<style color=#00ffffff size=1>.</style>            /appl/lib/readjpg.b
<style color=#00ffffff size=1>.</style>            /appl/lib/readxbitmap.b
<style color=#00ffffff size=1>.</style>            /appl/lib/readpicfile.b
<style color=#00ffffff size=1>.</style>            /appl/lib/readpng.b

NOTES
<style color=#00ffffff size=1>.</style>            The JPEG reader handles only the Baseline sequential format
<style color=#00ffffff size=1>.</style>            as defined by the JFIF 1.02 file exchange format.

<style color=#00ffffff size=1>.</style>            Functions to write these formats are as yet unimplemented.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
