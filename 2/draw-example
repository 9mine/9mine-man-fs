<action name=DRAW-EXAMPLE(2)>DRAW-EXAMPLE(2)</action>                                   <action name=DRAW-EXAMPLE(2)>DRAW-EXAMPLE(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            draw: example - simple program illustrating image primitives

DESCRIPTION
<style color=#00ffffff size=1>.</style>            This manual page presents a self-contained simple program
<style color=#00ffffff size=1>.</style>            that illustrates most of the feature of the basic draw
<style color=#00ffffff size=1>.</style>            library. It must be run at the top-level Inferno shell
<style color=#00ffffff size=1>.</style>            prompt, not within a window system, as it establishes its
<style color=#00ffffff size=1>.</style>            own connection to the display and writes directly on the
<style color=#00ffffff size=1>.</style>            display, not in a private window.

<style color=#00ffffff size=1>.</style>            The program exercises the drawing primitives, taking
<style color=#00ffffff size=1>.</style>            particular care to maintain a consistent coordinate system
<style color=#00ffffff size=1>.</style>            for the combinations of images on the display.  Comments in
<style color=#00ffffff size=1>.</style>            the code introduce each step.

<style color=#00ffffff size=1>.</style>            implement Test\;

<style color=#00ffffff size=1>.</style>            include "sys.m"\;

<style color=#00ffffff size=1>.</style>            include "draw.m"\;

<style color=#00ffffff size=1>.</style>            Test: module
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            	init:	fn(ctxt: ref Draw->Context, argv: list of string)\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            init(nil: ref Draw->Context, nil: list of string)
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            	sys := load Sys Sys->PATH\;
<style color=#00ffffff size=1>.</style>            	draw := load Draw Draw->PATH\;
<style color=#00ffffff size=1>.</style>            	Display, Font, Rect, Point, Image, Screen: import draw\;

<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	# Set up connection to display and initialize colours.
<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	display := draw->Display.allocate(nil)\;
<style color=#00ffffff size=1>.</style>            	disp := display.image\;
<style color=#00ffffff size=1>.</style>            	red := display.color(Draw->Red)\;
<style color=#00ffffff size=1>.</style>            	blue := display.color(Draw->Blue)\;
<style color=#00ffffff size=1>.</style>            	white := display.color(Draw->White)\;
<style color=#00ffffff size=1>.</style>            	yellow := display.color(Draw->Yellow)\;

<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	# Paint the screen red.
<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	disp.draw(disp.r, red, nil, disp.r.min)\;
<style color=#00ffffff size=1>.</style>            	sys->sleep(5000)\;

<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	# Texture a region with rectangular tiles.
<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	texture := display.newimage(((0,0),(2,3)),
<style color=#00ffffff size=1>.</style>            		disp.chans, 1, Draw->Black)\;
<style color=#00ffffff size=1>.</style>            	texture.clipr = ((-10000,-10000),(10000,10000))\;
<style color=#00ffffff size=1>.</style>            	# put something in the texture
<style color=#00ffffff size=1>.</style>            	texture.draw(((0,0),(1,3)), white, nil, (0,0))\;
<style color=#00ffffff size=1>.</style>            	texture.draw(((0,0),(2, 1)), white, nil, (0,0))\;
<style color=#00ffffff size=1>.</style>            	# use texture as both source and mask to let
<style color=#00ffffff size=1>.</style>            	# destination colour show through
<style color=#00ffffff size=1>.</style>            	disp.draw(((100,100),(200,300)), texture,
<style color=#00ffffff size=1>.</style>            		texture, (0,0))\;
<style color=#00ffffff size=1>.</style>            	sys->sleep(5000)\;

<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	# White-out a quarter of the pixels in a region,
<style color=#00ffffff size=1>.</style>            	# to make the region appear shaded.
<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	stipple := display.newimage(((0,0),(2,2)),
<style color=#00ffffff size=1>.</style>            				disp.chans, 1, Draw->Transparent)\;
<style color=#00ffffff size=1>.</style>            	stipple.draw(((0,0),(1,1)), display.opaque,
<style color=#00ffffff size=1>.</style>            				nil, (0,0))\;
<style color=#00ffffff size=1>.</style>            	disp.draw(((100,100),(300,250)), white,
<style color=#00ffffff size=1>.</style>            				stipple, (0,0))\;
<style color=#00ffffff size=1>.</style>            	sys->sleep(5000)\;

<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	# Draw textured characters.
<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	font := Font.open(display, "*default*")\;
<style color=#00ffffff size=1>.</style>            	disp.text((100,310), texture, (0,0), font,
<style color=#00ffffff size=1>.</style>            			"Hello world")\;
<style color=#00ffffff size=1>.</style>            	sys->sleep(5000)\;

<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	# Draw picture in elliptical frame.
<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	delight := display.open("/icons/delight.bit")\;
<style color=#00ffffff size=1>.</style>            	piccenter := delight.r.min.add(delight.r.max).<action name=div(2)>div(2)</action>\;
<style color=#00ffffff size=1>.</style>            	disp.fillellipse((250,250), 150, 50,
<style color=#00ffffff size=1>.</style>            		delight, piccenter)\;
<style color=#00ffffff size=1>.</style>            	disp.ellipse((250,250), 150, 50, 3, yellow, (0,0))\;
<style color=#00ffffff size=1>.</style>            	sys->sleep(5000)\;

<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	# Draw a parabolic brush stroke using an elliptical brush
<style color=#00ffffff size=1>.</style>            	# to reveal more of the picture, consistent with what's
<style color=#00ffffff size=1>.</style>            	# already visible.
<style color=#00ffffff size=1>.</style>            	#
<style color=#00ffffff size=1>.</style>            	dx : con 15\;
<style color=#00ffffff size=1>.</style>            	dy : con 3\;
<style color=#00ffffff size=1>.</style>            	brush := display.newimage(((0,0),(2*dx+1,2*dy+1)), disp.chans,
<style color=#00ffffff size=1>.</style>                                           0, Draw->Black)\;
<style color=#00ffffff size=1>.</style>            	brush.fillellipse((dx,dy), dx, dy, display.white,
<style color=#00ffffff size=1>.</style>            				(0,0))\;
<style color=#00ffffff size=1>.</style>            	for(x:=delight.r.min.x\; x<delight.r.max.x\; x++){
<style color=#00ffffff size=1>.</style>            		y := (x-piccenter.x)*(x-piccenter.x)/80\;
<style color=#00ffffff size=1>.</style>            		y += 2*dy+1\;	# so whole brush is visible at top
<style color=#00ffffff size=1>.</style>            		xx := x+(250-piccenter.x)-dx\;
<style color=#00ffffff size=1>.</style>            		yy := y+(250-piccenter.y)-dy\;
<style color=#00ffffff size=1>.</style>            		disp.gendraw(((xx,yy),(xx+2*dx+1,yy+2*dy+1)),
<style color=#00ffffff size=1>.</style>                                   delight, (x-dx, y-dy), brush,
<style color=#00ffffff size=1>.</style>            			(0,0))\;
<style color=#00ffffff size=1>.</style>            	}
<style color=#00ffffff size=1>.</style>            }

<style color=#00ffffff size=1>.</style>                                Inferno Manual
