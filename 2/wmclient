<action name=WMCLIENT(2)>WMCLIENT(2)</action>                                           <action name=WMCLIENT(2)>WMCLIENT(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            wmclient: makedrawcontext, window, snarfput, snarfget -
<style color=#00ffffff size=1>.</style>            window manager interface for Draw-based applications.

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "tk.m"\;
<style color=#00ffffff size=1>.</style>            include "wmclient.m"\;
<style color=#00ffffff size=1>.</style>            wmclient := load Wmclient Wmclient->PATH\;

<style color=#00ffffff size=1>.</style>            Resize,
<style color=#00ffffff size=1>.</style>            Hide,
<style color=#00ffffff size=1>.</style>            Help,
<style color=#00ffffff size=1>.</style>            OK,
<style color=#00ffffff size=1>.</style>            Plain:     con 1 << iota\;

<style color=#00ffffff size=1>.</style>            Appl:   con Resize | Hide\;

<style color=#00ffffff size=1>.</style>            init:       fn()\;
<style color=#00ffffff size=1>.</style>            makedrawcontext: fn():  ref Draw->Context\;
<style color=#00ffffff size=1>.</style>            window:	fn(ctxt: ref Draw->Context, title: string, buts: int): ref Window\;
<style color=#00ffffff size=1>.</style>            snarfput:   fn(buf: string)\;
<style color=#00ffffff size=1>.</style>            snarfget:   fn(): string\;
<style color=#00ffffff size=1>.</style>            Window: adt{
<style color=#00ffffff size=1>.</style>            	display:	ref Draw->Display\;
<style color=#00ffffff size=1>.</style>            	r: Draw->Rect\;		# full rectangle of window, including titlebar.
<style color=#00ffffff size=1>.</style>            	image: ref Draw->Image\;
<style color=#00ffffff size=1>.</style>            	screenr: Draw->Rect\;
<style color=#00ffffff size=1>.</style>            	ctxt: ref Draw->Wmcontext\;
<style color=#00ffffff size=1>.</style>            	focused:	int\;
<style color=#00ffffff size=1>.</style>            	ctl:		chan of string\;

<style color=#00ffffff size=1>.</style>            	startinput:	fn(w: self ref Window, devs: list of string)\;
<style color=#00ffffff size=1>.</style>            	wmctl:	fn(w: self ref Window, request: string): string\;
<style color=#00ffffff size=1>.</style>            	settitle:	fn(w: self ref Window, name: string): string\;
<style color=#00ffffff size=1>.</style>            	reshape:	fn(w: self ref Window, r: Draw->Rect)\;
<style color=#00ffffff size=1>.</style>            	onscreen:	fn(w: self ref Window, how: string)\;
<style color=#00ffffff size=1>.</style>            	screenr2imager:	fn(w: self ref Window, sr: Draw->Rect): Draw->Rect\;
<style color=#00ffffff size=1>.</style>            	imager2screenr:	fn(w: self ref Window, ir: Draw->Rect): Draw->Rect\;
<style color=#00ffffff size=1>.</style>            	pointer:	fn(w: self ref Window, p: Draw->Pointer): int\;
<style color=#00ffffff size=1>.</style>            }\;


DESCRIPTION
<style color=#00ffffff size=1>.</style>            The Wmclient module provides routines for making windows
<style color=#00ffffff size=1>.</style>            controlled by <action name=wm(1)>wm(1)</action> containing an image that can be drawn on
<style color=#00ffffff size=1>.</style>            with the routines described in <action name=draw-image(2)>draw-image(2)</action>.

<style color=#00ffffff size=1>.</style>            Init should be called once to initialise the internal state
<style color=#00ffffff size=1>.</style>            of wmclient.

<style color=#00ffffff size=1>.</style>            Makedrawcontext establishes an initial connection with the
<style color=#00ffffff size=1>.</style>            window manager, creating a new Draw context suitable for
<style color=#00ffffff size=1>.</style>            creating new windows. It is only necessary to call this if
<style color=#00ffffff size=1>.</style>            the application has not already been provided with a
<style color=#00ffffff size=1>.</style>            context.

<style color=#00ffffff size=1>.</style>            Window creates a new window through ctxt and returns it.
<style color=#00ffffff size=1>.</style>            Title gives a label that will be displayed in the title bar
<style color=#00ffffff size=1>.</style>            of the window\; buts determines which buttons are created in
<style color=#00ffffff size=1>.</style>            the titlebar, a bitwise combination of the constants Resize,
<style color=#00ffffff size=1>.</style>            Help, OK, and Hide. If Plain is given, the window is given
<style color=#00ffffff size=1>.</style>            no decoration at all.

<style color=#00ffffff size=1>.</style>            When a window, say w, is first created, its size has not
<style color=#00ffffff size=1>.</style>            been determined and its image is not yet allocated. W
<style color=#00ffffff size=1>.</style>            .reshape sets the requested rectangle for the window, (and
<style color=#00ffffff size=1>.</style>            requests a new image for the window if it has already been
<style color=#00ffffff size=1>.</style>            made visible), where r gives the requested rectangle of the
<style color=#00ffffff size=1>.</style>            new image, excluding window decoration, such as the title
<style color=#00ffffff size=1>.</style>            bar and the window border. An application can use w
<style color=#00ffffff size=1>.</style>            .screenr2imager to find out the usable rectangle within
<style color=#00ffffff size=1>.</style>            screen rectangle sr when window decorations are taken into
<style color=#00ffffff size=1>.</style>            account. W.imager2screenr converts in the other direction. W
<style color=#00ffffff size=1>.</style>            .screenr contains the current rectangle of the screen
<style color=#00ffffff size=1>.</style>            containing the window.

<style color=#00ffffff size=1>.</style>            W.image holds the window's image when it has been
<style color=#00ffffff size=1>.</style>            successfully created\; w.ctxt holds the window manager
<style color=#00ffffff size=1>.</style>            context for the window, from which keyboard and mouse events
<style color=#00ffffff size=1>.</style>            can be received. No such events will be received until w
<style color=#00ffffff size=1>.</style>            .startinput is called, with a list of devices (e.g. ptr, kbd
<style color=#00ffffff size=1>.</style>            ) to start input for. W.settitle sets the title that is
<style color=#00ffffff size=1>.</style>            shown on the window's title bar\; it can make the window's
<style color=#00ffffff size=1>.</style>            size (and therefore the window's image) change.

<style color=#00ffffff size=1>.</style>            W.ctl is a channel down which requests from the titlebar are
<style color=#00ffffff size=1>.</style>            sent. Messages received on it should be processed by the
<style color=#00ffffff size=1>.</style>            application or passed to w.wmctl. Requests are formatted as
<style color=#00ffffff size=1>.</style>            with quoted in <action name=string(2)>string(2)</action>. The messages include:

<style color=#00ffffff size=1>.</style>            exit The window should be closed. W.wmctl will kill all
<style color=#00ffffff size=1>.</style>                 processes in the current process group.

<style color=#00ffffff size=1>.</style>            !move x y
<style color=#00ffffff size=1>.</style>                 The user has started to try to drag the window. X and y
<style color=#00ffffff size=1>.</style>                 give the location of the initial pointer click.

<style color=#00ffffff size=1>.</style>            !size mindx mindy
<style color=#00ffffff size=1>.</style>                 The user wishes to resize the window. Mindx and mindy
<style color=#00ffffff size=1>.</style>                 give the minimum size acceptable for the window.

<style color=#00ffffff size=1>.</style>            help The help button has been clicked.

<style color=#00ffffff size=1>.</style>            ok   The OK  button has been clicked.

<style color=#00ffffff size=1>.</style>            hide The Hide button has been clicked. W.wmctl will delete
<style color=#00ffffff size=1>.</style>                 the window, and an entry will be shown on the toolbar.

<style color=#00ffffff size=1>.</style>            In order to function correctly, an application should
<style color=#00ffffff size=1>.</style>            process not only events from the title bar channel, but also
<style color=#00ffffff size=1>.</style>            events received from the window manager itself (via w
<style color=#00ffffff size=1>.</style>            .ctxt.ctl), and pointer and keyboard events received from
<style color=#00ffffff size=1>.</style>            the window manager (via top.ctxt.ptr and top.ctxt.kbd
<style color=#00ffffff size=1>.</style>            respectively). Control events can be passed to w.wmctl\;
<style color=#00ffffff size=1>.</style>            keyboard events can be processed by the application\; pointer
<style color=#00ffffff size=1>.</style>            events should be passed to w.pointer for processing\; if this
<style color=#00ffffff size=1>.</style>            returns zero, the application should process the pointer
<style color=#00ffffff size=1>.</style>            event, otherwise the event has been consumed by the
<style color=#00ffffff size=1>.</style>            titlebar.

<style color=#00ffffff size=1>.</style>            When created, the window is not visible\; w.onscreen makes it
<style color=#00ffffff size=1>.</style>            visible, and possibly chooses a position and a size for it.
<style color=#00ffffff size=1>.</style>            How specifies what sort of placement is required for the
<style color=#00ffffff size=1>.</style>            window\; it can be one of

<style color=#00ffffff size=1>.</style>            place
<style color=#00ffffff size=1>.</style>                 tries to choose a suitable place on the screen with
<style color=#00ffffff size=1>.</style>                 respect to other windows\; it may size the window as it
<style color=#00ffffff size=1>.</style>                 feels appropriate. This the default (if how is nil).

<style color=#00ffffff size=1>.</style>            onscreen
<style color=#00ffffff size=1>.</style>                 tries to keep the position and size the same as
<style color=#00ffffff size=1>.</style>                 specified on the window, adjusting them only to bring
<style color=#00ffffff size=1>.</style>                 the window fully on screen, and making sure that the
<style color=#00ffffff size=1>.</style>                 window is no bigger than the entire display.

<style color=#00ffffff size=1>.</style>            exact
<style color=#00ffffff size=1>.</style>                 does not change the specified size or position of the
<style color=#00ffffff size=1>.</style>                 window unless absolutely necessary.

<style color=#00ffffff size=1>.</style>            Snarfget and snarfput retrieve and replace the contents of
<style color=#00ffffff size=1>.</style>            the window manager's snarf buffer.

FILES
<style color=#00ffffff size=1>.</style>            /chan/snarf  snarf buffer maintained by <action name=wm(1)>wm(1)</action>
<style color=#00ffffff size=1>.</style>            /chan/wm     channel for interaction with <action name=wm(1)>wm(1)</action>
SOURCE
<style color=#00ffffff size=1>.</style>            /appl/lib/wmclient.b

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=wm(1)>wm(1)</action>, <action name=tk(2)>tk(2)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
