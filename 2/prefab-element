<action name=PREFAB-ELEMENT(2)>PREFAB-ELEMENT(2)</action>                               <action name=PREFAB-ELEMENT(2)>PREFAB-ELEMENT(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            prefab: Element - menu and display elements for ITV toolkit

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "draw.m"\;
<style color=#00ffffff size=1>.</style>            include "prefab.m"\;
<style color=#00ffffff size=1>.</style>            prefab := load Prefab Prefab->PATH\;

<style color=#00ffffff size=1>.</style>            # types of Elements
<style color=#00ffffff size=1>.</style>            EIcon:      con 0\;
<style color=#00ffffff size=1>.</style>            EText:      con 1\;
<style color=#00ffffff size=1>.</style>            ETitle:     con 2\;
<style color=#00ffffff size=1>.</style>            EHorizontal:con 3\;
<style color=#00ffffff size=1>.</style>            EVertical:  con 4\;
<style color=#00ffffff size=1>.</style>            ESeparator: con 5\;

<style color=#00ffffff size=1>.</style>            # first arg to Element.adjust: size of elements
<style color=#00ffffff size=1>.</style>            Adjpack:    con 10\; # leave alone, pack tightly
<style color=#00ffffff size=1>.</style>            Adjequal:   con 11\; # make equal
<style color=#00ffffff size=1>.</style>            Adjfill:    con 12\; # make equal, filling available space

<style color=#00ffffff size=1>.</style>            # second arg: position of element within space
<style color=#00ffffff size=1>.</style>            Adjleft:    con 20\;
<style color=#00ffffff size=1>.</style>            Adjup:      con 20\;
<style color=#00ffffff size=1>.</style>            Adjcenter:  con 21\;
<style color=#00ffffff size=1>.</style>            Adjright:   con 22\;
<style color=#00ffffff size=1>.</style>            Adjdown:    con 22\;

<style color=#00ffffff size=1>.</style>            Layout: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>              font:    ref Draw->Font\;
<style color=#00ffffff size=1>.</style>              color:   ref Draw->Image\;
<style color=#00ffffff size=1>.</style>              text:    string\;
<style color=#00ffffff size=1>.</style>              icon:    ref Draw->Image\;
<style color=#00ffffff size=1>.</style>              mask:    ref Draw->Image\;
<style color=#00ffffff size=1>.</style>              tag:     string\;
<style color=#00ffffff size=1>.</style>            }\;

<style color=#00ffffff size=1>.</style>            Element: adt
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>              kind:   int\;
<style color=#00ffffff size=1>.</style>              r:      Draw->Rect\;
<style color=#00ffffff size=1>.</style>              environ:ref Environ\;  
<style color=#00ffffff size=1>.</style>              tag:    string\;       
<style color=#00ffffff size=1>.</style>              
<style color=#00ffffff size=1>.</style>              # different fields defined for different kinds of Elements
<style color=#00ffffff size=1>.</style>              kids:   cyclic list of ref Element\; # children of elists
<style color=#00ffffff size=1>.</style>              str:    string\;           # text in an EText element
<style color=#00ffffff size=1>.</style>              mask:   ref Draw->Image\;  # part of Eicon, ESeparator
<style color=#00ffffff size=1>.</style>              image:  ref Draw->Image\;  # part of Eicon, ESeparator, EText, Etitle
<style color=#00ffffff size=1>.</style>              font:   ref Draw->Font\;   # part of EText, Etitle
<style color=#00ffffff size=1>.</style>              
<style color=#00ffffff size=1>.</style>              icon:      fn(env: ref Environ, r: Draw->Rect,
<style color=#00ffffff size=1>.</style>                           icon, mask: ref Draw->Image):
<style color=#00ffffff size=1>.</style>                           ref Element\;
<style color=#00ffffff size=1>.</style>              text:      fn(env: ref Environ, text: string,
<style color=#00ffffff size=1>.</style>                           r: Draw->Rect, kind: int): ref Element\;
<style color=#00ffffff size=1>.</style>              layout:    fn(env: ref Environ, lay: list of Layout,
<style color=#00ffffff size=1>.</style>                           r: Draw->Rect, kind: int): ref Element\;
<style color=#00ffffff size=1>.</style>              elist:     fn(env: ref Environ, elem: ref Element, kind: int):
<style color=#00ffffff size=1>.</style>                           ref Element\;
<style color=#00ffffff size=1>.</style>              separator: fn(env:ref Environ, r: Draw->Rect,
<style color=#00ffffff size=1>.</style>                           icon, mask: ref Draw->Image): ref Element\;

<style color=#00ffffff size=1>.</style>              append:    fn(elist: self ref Element, elem: ref Element): int\;
<style color=#00ffffff size=1>.</style>              adjust:    fn(elem: self ref Element, equal: int, dir: int)\;
<style color=#00ffffff size=1>.</style>              clip:      fn(elem: self ref Element, r: Draw->Rect)\;
<style color=#00ffffff size=1>.</style>              scroll:    fn(elem:self ref Element, d: Draw->Point)\;
<style color=#00ffffff size=1>.</style>              translate: fn(elem:self ref Element, d: Draw->Point)\;
<style color=#00ffffff size=1>.</style>              show:      fn(elist: self ref Element, elem: ref Element): int\;
<style color=#00ffffff size=1>.</style>            }\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Prefab Elements are the building blocks of the ITV toolkit.
<style color=#00ffffff size=1>.</style>            They represent and display text and pictures that can be
<style color=#00ffffff size=1>.</style>            grouped in arbitrary two-dimensional menus to be walked by
<style color=#00ffffff size=1>.</style>            the infrared remote control. Elements are packaged within
<style color=#00ffffff size=1>.</style>            Compounds (see <action name=prefab-compound(2)>prefab-compound(2)</action>) for display.

<style color=#00ffffff size=1>.</style>            environ  This specifies the element's environment.

<style color=#00ffffff size=1>.</style>            image    If the element needs an Image object (see kind
<style color=#00ffffff size=1>.</style>                     below), this member specifies it.

<style color=#00ffffff size=1>.</style>            kind     The Prefab module defines six Element varieties,
<style color=#00ffffff size=1>.</style>                     each labelled by a defined constant in the kind
<style color=#00ffffff size=1>.</style>                     member.

<style color=#00ffffff size=1>.</style>                     EIcon
<style color=#00ffffff size=1>.</style>                          An image.

<style color=#00ffffff size=1>.</style>                     EHorizontal
<style color=#00ffffff size=1>.</style>                          A horizontal list of elements.

<style color=#00ffffff size=1>.</style>                     ESeparator
<style color=#00ffffff size=1>.</style>                          An Image object, like an EIcon, but intended
<style color=#00ffffff size=1>.</style>                          to fill space in a list, rather than to serve
<style color=#00ffffff size=1>.</style>                          as an element of the list. Separators are
<style color=#00ffffff size=1>.</style>                          ignored when selecting or highlighting list
<style color=#00ffffff size=1>.</style>                          elements.

<style color=#00ffffff size=1>.</style>                     EText
<style color=#00ffffff size=1>.</style>                          A single line of text. Text for this element
<style color=#00ffffff size=1>.</style>                          will be drawn with Style.textfont and
<style color=#00ffffff size=1>.</style>                          Style.textcolor.

<style color=#00ffffff size=1>.</style>                     ETitle
<style color=#00ffffff size=1>.</style>                          A single line of text, usually giving the
<style color=#00ffffff size=1>.</style>                          title of a Compound object. Text for this
<style color=#00ffffff size=1>.</style>                          element will be drawn with Style.titlefont and
<style color=#00ffffff size=1>.</style>                          Style.titlecolor.

<style color=#00ffffff size=1>.</style>                     EVertical
<style color=#00ffffff size=1>.</style>                          A vertical list of elements.

<style color=#00ffffff size=1>.</style>            mask     When an element contains an Image object, the
<style color=#00ffffff size=1>.</style>                     Image.draw function will be used to display it on
<style color=#00ffffff size=1>.</style>                     the screen. The mask image is used as an argument
<style color=#00ffffff size=1>.</style>                     to Image.draw\; see <action name=draw-intro(2)>draw-intro(2)</action> for more
<style color=#00ffffff size=1>.</style>                     information.

<style color=#00ffffff size=1>.</style>            r        All Elements are rectangular, occupying the
<style color=#00ffffff size=1>.</style>                     position on the display specified by r.min. The
<style color=#00ffffff size=1>.</style>                     size of the element also depends on r. During
<style color=#00ffffff size=1>.</style>                     creation, if the rectangle is degenerate (has zero
<style color=#00ffffff size=1>.</style>                     size), the element takes its size from the sizes of
<style color=#00ffffff size=1>.</style>                     its components: the image size for icons, text
<style color=#00ffffff size=1>.</style>                     width for strings, etc. Otherwise, the element's
<style color=#00ffffff size=1>.</style>                     size matches the rectangle.

<style color=#00ffffff size=1>.</style>            tag      The tag of an element serves two purposes: it
<style color=#00ffffff size=1>.</style>                     allows an element to be labelled with arbitrary
<style color=#00ffffff size=1>.</style>                     invisible text, and provides a mechanism to control
<style color=#00ffffff size=1>.</style>                     which elements of a list may be selected: see the
<style color=#00ffffff size=1>.</style>                     description of Compound.tagselect in
<style color=#00ffffff size=1>.</style>                     <action name=prefab-compound(2)>prefab-compound(2)</action>. The tag field of an element may
<style color=#00ffffff size=1>.</style>                     be modified freely after the element is created.

<style color=#00ffffff size=1>.</style>            icon(env, r, icon, mask)
<style color=#00ffffff size=1>.</style>                     Build one EIcon element to be drawn with the icon
<style color=#00ffffff size=1>.</style>                     and mask. The rectangle, r, gives the element's
<style color=#00ffffff size=1>.</style>                     position and size.

<style color=#00ffffff size=1>.</style>            text(env, text, r, kind)
<style color=#00ffffff size=1>.</style>                     Build a textual element or a list of textual
<style color=#00ffffff size=1>.</style>                     elements. Kind may be EText or ETitle, determining
<style color=#00ffffff size=1>.</style>                     the style of the drawn text. The resulting Element
<style color=#00ffffff size=1>.</style>                     object may be a single element or a EVertical list
<style color=#00ffffff size=1>.</style>                     of the appropriate kind, if the text occupies more
<style color=#00ffffff size=1>.</style>                     than one line. The text is folded as necessary to
<style color=#00ffffff size=1>.</style>                     accommodate the available horizontal space\;
<style color=#00ffffff size=1>.</style>                     newlines in the text cause line breaks. The width
<style color=#00ffffff size=1>.</style>                     of the text is determined by r, but if r has no
<style color=#00ffffff size=1>.</style>                     width, it will be set by the text itself. The
<style color=#00ffffff size=1>.</style>                     height of the Element is also determined by r\;
<style color=#00ffffff size=1>.</style>                     again, if the height of r is zero, the Element will
<style color=#00ffffff size=1>.</style>                     be made as tall as necessary (if r is not tall
<style color=#00ffffff size=1>.</style>                     enough, the rest of the text may be made visible by
<style color=#00ffffff size=1>.</style>                     calls to Element.scroll). Thus one may choose a
<style color=#00ffffff size=1>.</style>                     specific size or let the text determine the size by
<style color=#00ffffff size=1>.</style>                     setting r suitably.

<style color=#00ffffff size=1>.</style>            layout(env, lay, r, kind)
<style color=#00ffffff size=1>.</style>                     Like Element.text, but builds a structure using the
<style color=#00ffffff size=1>.</style>                     contents of the list lay of Layout structures.  The
<style color=#00ffffff size=1>.</style>                     Layout type allows construction of a more general
<style color=#00ffffff size=1>.</style>                     form of textual display by providing fine control
<style color=#00ffffff size=1>.</style>                     over the font and colour in which to display text
<style color=#00ffffff size=1>.</style>                     and the inclusion of images as textual elements. It
<style color=#00ffffff size=1>.</style>                     also allows setting of the tag for each component
<style color=#00ffffff size=1>.</style>                     of the resulting element or list of elements. If
<style color=#00ffffff size=1>.</style>                     the Layout has a non-nil image field, it is taken
<style color=#00ffffff size=1>.</style>                     as a description of a picture to be incorporated in
<style color=#00ffffff size=1>.</style>                     the text as an EIcon element (and the text field is
<style color=#00ffffff size=1>.</style>                     ignored)\; otherwise the text field specifies the
<style color=#00ffffff size=1>.</style>                     text to be drawn in the indicated font and color.
<style color=#00ffffff size=1>.</style>                     As with Element.text, Element.layout does all the
<style color=#00ffffff size=1>.</style>                     geometry management, text line breaking and
<style color=#00ffffff size=1>.</style>                     folding, etc.

<style color=#00ffffff size=1>.</style>            elist(env, elem, kind)
<style color=#00ffffff size=1>.</style>                     Start a list of Element objects. The kind may be
<style color=#00ffffff size=1>.</style>                     Prefab->EHorizontal or Prefab->EVertical,
<style color=#00ffffff size=1>.</style>                     specifying the orientation of the list. Elem will
<style color=#00ffffff size=1>.</style>                     be the first element of the list. It may be nil,
<style color=#00ffffff size=1>.</style>                     which creates an empty list of the requested
<style color=#00ffffff size=1>.</style>                     orientation. Subsequent Element.append calls build
<style color=#00ffffff size=1>.</style>                     the list.

<style color=#00ffffff size=1>.</style>            separator(env, r, icon, mask)
<style color=#00ffffff size=1>.</style>                     Build one ESeparator element to be drawn with the
<style color=#00ffffff size=1>.</style>                     icon and mask. The rectangle, r, gives the
<style color=#00ffffff size=1>.</style>                     element's position and size.

<style color=#00ffffff size=1>.</style>            elist.append(elem)
<style color=#00ffffff size=1>.</style>                     Append one Element, elem, to an existing list,
<style color=#00ffffff size=1>.</style>                     elist. The new element will appear after those
<style color=#00ffffff size=1>.</style>                     already there, either to the right for EHorizontal
<style color=#00ffffff size=1>.</style>                     or below for EVertical lists.

<style color=#00ffffff size=1>.</style>            elem.adjust(spacing, dir)
<style color=#00ffffff size=1>.</style>                     Format the list so its elements abut. The
<style color=#00ffffff size=1>.</style>                     list-building functions such as append attempt to
<style color=#00ffffff size=1>.</style>                     build a sensible geometry. Alternatively, one can
<style color=#00ffffff size=1>.</style>                     build a list using degenerate geometry and then let
<style color=#00ffffff size=1>.</style>                     adjust compute the geometry for the whole list. For
<style color=#00ffffff size=1>.</style>                     example, one could place all the elements at (0, 0)
<style color=#00ffffff size=1>.</style>                     and then call adjust to decide where the elements
<style color=#00ffffff size=1>.</style>                     belong.

<style color=#00ffffff size=1>.</style>                 Spacing specifies how the elements fit together:

<style color=#00ffffff size=1>.</style>                 Adjequal
<style color=#00ffffff size=1>.</style>                      Makes them all equal sized in the dimension of the
<style color=#00ffffff size=1>.</style>                      list, but only as big as the largest element. For
<style color=#00ffffff size=1>.</style>                      example, if the element is a horizontal list, all
<style color=#00ffffff size=1>.</style>                      elements will be as wide as the widest item. If
<style color=#00ffffff size=1>.</style>                      the list is too big for the allocated space, only
<style color=#00ffffff size=1>.</style>                      some will be visible. 

<style color=#00ffffff size=1>.</style>                 Adjfill
<style color=#00ffffff size=1>.</style>                      Makes them all equal sized in the dimension of the
<style color=#00ffffff size=1>.</style>                      list, expanding the elements to fit the space of
<style color=#00ffffff size=1>.</style>                      the list's Element.r. If the list is too big for
<style color=#00ffffff size=1>.</style>                      the allocated space, only some will be visible. 

<style color=#00ffffff size=1>.</style>                 Adjpack
<style color=#00ffffff size=1>.</style>                      Packs elements as tightly as possible, using the
<style color=#00ffffff size=1>.</style>                      ``natural'' size of each element and setting their
<style color=#00ffffff size=1>.</style>                      rectangles against one another.

<style color=#00ffffff size=1>.</style>                 Dir controls how each element is placed in its allotted
<style color=#00ffffff size=1>.</style>                 space:

<style color=#00ffffff size=1>.</style>                 Adjcenter
<style color=#00ffffff size=1>.</style>                      Place each element in the middle of its space.

<style color=#00ffffff size=1>.</style>                 Adjdown
<style color=#00ffffff size=1>.</style>                      In a vertical list, move each element to the
<style color=#00ffffff size=1>.</style>                      bottom.

<style color=#00ffffff size=1>.</style>                 Adjleft
<style color=#00ffffff size=1>.</style>                      In a horizontal list, move each element to the
<style color=#00ffffff size=1>.</style>                      left.

<style color=#00ffffff size=1>.</style>                 Adjright
<style color=#00ffffff size=1>.</style>                      In a horizontal list, move each element to the
<style color=#00ffffff size=1>.</style>                      right.

<style color=#00ffffff size=1>.</style>                 Adjup
<style color=#00ffffff size=1>.</style>                      In a vertical list, move each element to the top.

<style color=#00ffffff size=1>.</style>            elem.clip(r)
<style color=#00ffffff size=1>.</style>                 The drawing model for Element objects is that they
<style color=#00ffffff size=1>.</style>                 occupy some space in the plane, which may be larger or
<style color=#00ffffff size=1>.</style>                 smaller than the space occupied by its constituent
<style color=#00ffffff size=1>.</style>                 text, icons, sub-elements, etc. The clip function sets
<style color=#00ffffff size=1>.</style>                 the rectangle of elem to r, without changing its
<style color=#00ffffff size=1>.</style>                 internal geometry. Any space made newly visible by this
<style color=#00ffffff size=1>.</style>                 will be filled in by the list's Style.elemcolor. For
<style color=#00ffffff size=1>.</style>                 example, if e is an icon element just large enough to
<style color=#00ffffff size=1>.</style>                 display its image, e.clip(e.r.inset(-2)) will make a
<style color=#00ffffff size=1>.</style>                 two-pixel-wide border around the icon when it is drawn.
<style color=#00ffffff size=1>.</style>                 As another example, lists are scrolled by leaving their
<style color=#00ffffff size=1>.</style>                 clip rectangle intact while translating the list
<style color=#00ffffff size=1>.</style>                 elements' coordinates.

<style color=#00ffffff size=1>.</style>            elem.scroll(d)
<style color=#00ffffff size=1>.</style>                 D is a Point, representing a vector\; elem is an Element
<style color=#00ffffff size=1>.</style>                 object to be scrolled. The scroll function leaves the
<style color=#00ffffff size=1>.</style>                 element's r alone and translates all the constituent
<style color=#00ffffff size=1>.</style>                 pieces of the list by d, causing a different portion of
<style color=#00ffffff size=1>.</style>                 elem to be visible in its rectangle.

<style color=#00ffffff size=1>.</style>            elem.translate(d)
<style color=#00ffffff size=1>.</style>                 Like elem.scroll(d), but moves r too, thus translating
<style color=#00ffffff size=1>.</style>                 the entire Element rather than just the visible part
<style color=#00ffffff size=1>.</style>                 within a fixed rectangle.

<style color=#00ffffff size=1>.</style>            elist.show(elem)
<style color=#00ffffff size=1>.</style>                 Show does nothing if elem is not a list. If it is a
<style color=#00ffffff size=1>.</style>                 list, the list is scrolled so elem, which must be a
<style color=#00ffffff size=1>.</style>                 member of the list, is visible through elist.r.

<style color=#00ffffff size=1>.</style>            The geometry of elements and the membership of lists may be
<style color=#00ffffff size=1>.</style>            modified only through the provided functions\; the
<style color=#00ffffff size=1>.</style>            Limbo-visible structure is (intended to be) read-only. Tags,
<style color=#00ffffff size=1>.</style>            text, and images may be modified freely by the application,
<style color=#00ffffff size=1>.</style>            but at the moment there is no way to recalculate the
<style color=#00ffffff size=1>.</style>            geometry if the components of an textual or image icon
<style color=#00ffffff size=1>.</style>            change size.

<style color=#00ffffff size=1>.</style>            Element objects are never drawn explicitly, nor are they
<style color=#00ffffff size=1>.</style>            drawn after any Element operation. They are made visible
<style color=#00ffffff size=1>.</style>            only by calls to Compound.draw, described by prefab-compound
<style color=#00ffffff size=1>.</style>            (2).

SOURCE
<style color=#00ffffff size=1>.</style>            /libinterp/prefab.c /libprefab/*.c

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=prefab-compound(2)>prefab-compound(2)</action> <action name=prefab-environ(2)>prefab-environ(2)</action> <action name=prefab-style(2)>prefab-style(2)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
