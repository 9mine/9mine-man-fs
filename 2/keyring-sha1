<action name=KEYRING-SHA1(2)>KEYRING-SHA1(2)</action>                                   <action name=KEYRING-SHA1(2)>KEYRING-SHA1(2)</action>

NAME
<style color=#00ffffff size=1>.</style>            keyring: sha1, md4, md5, hmac_sha1, hmac_md5, sign, verify -
<style color=#00ffffff size=1>.</style>            cryptographic digests and digital signatures

SYNOPSIS
<style color=#00ffffff size=1>.</style>            include "keyring.m"\;
<style color=#00ffffff size=1>.</style>            keyring := load Keyring Keyring->PATH\;

<style color=#00ffffff size=1>.</style>            sha1:	fn(buf: array of byte, n: int, digest: array of byte,
<style color=#00ffffff size=1>.</style>            		state: ref DigestState): ref DigestState\;
<style color=#00ffffff size=1>.</style>            md4:	fn(buf: array of byte, n: int, digest: array of byte,
<style color=#00ffffff size=1>.</style>            		state: ref DigestState): ref DigestState\;
<style color=#00ffffff size=1>.</style>            md5:	fn(buf: array of byte, n: int, digest: array of byte,
<style color=#00ffffff size=1>.</style>            		state: ref DigestState): ref DigestState\;
<style color=#00ffffff size=1>.</style>            hmac_sha1:	fn(buf: array of byte, n: int, key: array of byte, digest: array of byte,
<style color=#00ffffff size=1>.</style>            		state: ref DigestState): ref DigestState\;
<style color=#00ffffff size=1>.</style>            hmac_md5:	fn(buf: array of byte, n: int, key: array of byte, digest: array of byte,
<style color=#00ffffff size=1>.</style>            		state: ref DigestState): ref DigestState\;
<style color=#00ffffff size=1>.</style>            sign:	fn(sk: ref SK, exp: int, state: ref DigestState,
<style color=#00ffffff size=1>.</style>            		ha: string): ref Certificate\;
<style color=#00ffffff size=1>.</style>            verify:	fn(pk: ref PK, cert: ref Certificate,
<style color=#00ffffff size=1>.</style>            		state: ref DigestState): int\;

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Sha1, md4 and md5 are cryptographically secure hash
<style color=#00ffffff size=1>.</style>            functions that produce output called a message digest. Each
<style color=#00ffffff size=1>.</style>            function computes a hash of n bytes of the data in buf, and
<style color=#00ffffff size=1>.</style>            updates the current state. They can be called iteratively to
<style color=#00ffffff size=1>.</style>            form a single digest for many data blocks. The state is kept
<style color=#00ffffff size=1>.</style>            in the DigestState value referenced by state between calls.
<style color=#00ffffff size=1>.</style>            State should be nil on the first call, and a newly allocated
<style color=#00ffffff size=1>.</style>            DigestState will be returned for use in subsequent calls. On
<style color=#00ffffff size=1>.</style>            a call in which digest is not nil, the hash is completed and
<style color=#00ffffff size=1>.</style>            copied into the digest array. Sha1 produces a 20-byte hash (
<style color=#00ffffff size=1>.</style>            SHA1dlen), md4 and md5 a 16-byte one (MD4len and MD5len).

<style color=#00ffffff size=1>.</style>            Hmac_sha1 and hmac_md5 are keyed versions of the hashing
<style color=#00ffffff size=1>.</style>            functions, following Internet RFC2104. The key must be
<style color=#00ffffff size=1>.</style>            provided in each call, but otherwise the calling conventions
<style color=#00ffffff size=1>.</style>            are those of sha1. The key must currently be no more than 64
<style color=#00ffffff size=1>.</style>            bytes.

<style color=#00ffffff size=1>.</style>            Sign creates a digital signature of a digest from the
<style color=#00ffffff size=1>.</style>            concatenation of: a message, the name of the signer, and an
<style color=#00ffffff size=1>.</style>            expiration time. State is the digest state after running
<style color=#00ffffff size=1>.</style>            sha1, md4 or md5 over the message. Ha is a string specifying
<style color=#00ffffff size=1>.</style>            the hash algorithm to use: "sha", "sha1", "md4" or "md5".
<style color=#00ffffff size=1>.</style>            Sign extends the digest to cover the signer's name (taken
<style color=#00ffffff size=1>.</style>            from the private key, sk) and the expiration time. It
<style color=#00ffffff size=1>.</style>            returns a certificate containing the digital signature of
<style color=#00ffffff size=1>.</style>            the digest, signer name, hash algorithm and signature
<style color=#00ffffff size=1>.</style>            algorithm. If any parameter is invalid, sign returns nil.
<style color=#00ffffff size=1>.</style>            The signature algorithm is implied by the type of the
<style color=#00ffffff size=1>.</style>            private key.

<style color=#00ffffff size=1>.</style>            Verify uses public key pk to verify a certificate. It
<style color=#00ffffff size=1>.</style>            returns non-zero (true) if the certificate is valid\; zero
<style color=#00ffffff size=1>.</style>            (false) otherwise. State is the digest state after running
<style color=#00ffffff size=1>.</style>            the chosen digest algorithm over the message.

EXAMPLES
<style color=#00ffffff size=1>.</style>            A program to read a file and hash it using SHA might contain
<style color=#00ffffff size=1>.</style>            the following inner loop:

<style color=#00ffffff size=1>.</style>                 state: ref DigestState = nil\;
<style color=#00ffffff size=1>.</style>                 while((n := sys->read(fd, buf, len buf)) > 0)
<style color=#00ffffff size=1>.</style>                 	state = kr->sha1(buf, n, nil, state)\;
<style color=#00ffffff size=1>.</style>                 digest := array\[kr->SHA1dlen\] of byte\;
<style color=#00ffffff size=1>.</style>                 kr->sha1(buf, 0, digest, state)\;

SOURCE
<style color=#00ffffff size=1>.</style>            /libinterp/keyring.c
<style color=#00ffffff size=1>.</style>            /libcrypt/hmac.c
<style color=#00ffffff size=1>.</style>            /libcrypt/md4.c
<style color=#00ffffff size=1>.</style>            /libcrypt/md5.c
<style color=#00ffffff size=1>.</style>            /libcrypt/sha1.c

BUGS
<style color=#00ffffff size=1>.</style>            The MD4 algorithm is included only to allow communication
<style color=#00ffffff size=1>.</style>            with software that might still use it\; it should not
<style color=#00ffffff size=1>.</style>            otherwise be used now, because it is easily broken.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
