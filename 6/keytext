<action name=KEYTEXT(6)>KEYTEXT(6)</action>                                             <action name=KEYTEXT(6)>KEYTEXT(6)</action>

NAME
<style color=#00ffffff size=1>.</style>            keytext - textual form of Inferno public/private keys

DESCRIPTION
<style color=#00ffffff size=1>.</style>            <action name=Keyring-certtostr(2)>Keyring-certtostr(2)</action> defines a set of functions that convert
<style color=#00ffffff size=1>.</style>            between textual forms of the elements of the Inferno
<style color=#00ffffff size=1>.</style>            public-key authentication system and their internal data
<style color=#00ffffff size=1>.</style>            types. The textual form is used for key storage and as the
<style color=#00ffffff size=1>.</style>            transport format for the authentication protocol <action name=auth(6)>auth(6)</action>. In
<style color=#00ffffff size=1>.</style>            storage and transport each encoded value is encapsulated by
<style color=#00ffffff size=1>.</style>            the record-oriented encoding defined in <action name=keyring-getmsg(2)>keyring-getmsg(2)</action>.
<style color=#00ffffff size=1>.</style>            The format represents public and private keys, and signer's
<style color=#00ffffff size=1>.</style>            certificates. In this context a certificate is a
<style color=#00ffffff size=1>.</style>            time-limited cryptographically signed hash of some other
<style color=#00ffffff size=1>.</style>            value (usually a public key) and contains neither that value
<style color=#00ffffff size=1>.</style>            nor the signer's key, which is assumed to be available
<style color=#00ffffff size=1>.</style>            elsewhere.

<style color=#00ffffff size=1>.</style>            All values are represented by a sequence of
<style color=#00ffffff size=1>.</style>            newline-separated text fields. The type of any given value
<style color=#00ffffff size=1>.</style>            is determined by its context. Each type of value has a
<style color=#00ffffff size=1>.</style>            common prefix that includes an algorithm identifier,
<style color=#00ffffff size=1>.</style>            followed by a sequence of algorithm-dependent fields:

<style color=#00ffffff size=1>.</style>                 authinfo	::=	signer-public-key certificate !private-key
<style color=#00ffffff size=1>.</style>                 big-alpha big-p
<style color=#00ffffff size=1>.</style>                 certificate	::=	sigalg hashalg signer-name exp-time
<style color=#00ffffff size=1>.</style>                 *-sig
<style color=#00ffffff size=1>.</style>                 sigalg	::=	 rsa | dsa | elgamal
<style color=#00ffffff size=1>.</style>                 hashalg	::=	 sha1 | md5
<style color=#00ffffff size=1>.</style>                 *-key	::=	sigalg owner-name ...

<style color=#00ffffff size=1>.</style>            rsa-public-key	::=	 rsa owner-name big-n big-ek
<style color=#00ffffff size=1>.</style>                 rsa-private-key	::=	 rsa owner-name big-n big-ek
<style color=#00ffffff size=1>.</style>                 		!big-dk  !big-p !big-q !big-kp !big-kq !big-c2
<style color=#00ffffff size=1>.</style>                 dsa-public-key	::=	 dsa owner-name big-p big-q
<style color=#00ffffff size=1>.</style>                 big-alpha big-key
<style color=#00ffffff size=1>.</style>                 dsa-private-key	::=	 dsa owner-name big-p big-q
<style color=#00ffffff size=1>.</style>                 big-alpha big-key !big-secret

<style color=#00ffffff size=1>.</style>            rsa-sig	::=	big-val
<style color=#00ffffff size=1>.</style>                 dsa-sig	::=	big-r big-s
<style color=#00ffffff size=1>.</style>                 elgamal-sig	::=	big-r big-s

<style color=#00ffffff size=1>.</style>            Each value labelled as `big-' is an unsigned
<style color=#00ffffff size=1>.</style>            multiple-precision integer from <action name=keyring-ipint(2)>keyring-ipint(2)</action>,
<style color=#00ffffff size=1>.</style>            represented as a sequence of bytes with in big-endian order,
<style color=#00ffffff size=1>.</style>            as produced by IPint->iptobytes with an extra leading zero
<style color=#00ffffff size=1>.</style>            byte added if the top bit of the first byte is set, and then
<style color=#00ffffff size=1>.</style>            encoded in base-64 (as by <action name=encoding(2)>encoding(2)</action>). Each value labelled
<style color=#00ffffff size=1>.</style>            `-name' is utf (6) text not containing a newline\; it is
<style color=#00ffffff size=1>.</style>            interpreted by an application and need not be a name. The
<style color=#00ffffff size=1>.</style>            expiry time exp-time is represented in decimal as seconds
<style color=#00ffffff size=1>.</style>            from the Epoch (1 January 1970 00:00 GMT)\; if it is zero, no
<style color=#00ffffff size=1>.</style>            expiry time is set. A label prefixed by `!' marks a value
<style color=#00ffffff size=1>.</style>            that should be considered secret.

<style color=#00ffffff size=1>.</style>            The hash of a key is computed over its textual encoding
<style color=#00ffffff size=1>.</style>            according to the syntax above. A certificate's signature
<style color=#00ffffff size=1>.</style>            value is produced by digitally signing using sigalg the hash
<style color=#00ffffff size=1>.</style>            (using hashalg) of the concatenation of the value to be
<style color=#00ffffff size=1>.</style>            authenticated, the signer-name in <action name=utf(6)>utf(6)</action>, a single space,
<style color=#00ffffff size=1>.</style>            and the exp-time in decimal (with no leading zeroes). When
<style color=#00ffffff size=1>.</style>            checking a signature, comparisons are done with values in
<style color=#00ffffff size=1>.</style>            internal multiple-precision form (ie, as IPints), not in
<style color=#00ffffff size=1>.</style>            base-64 form.

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=keyring-certtostr(2)>keyring-certtostr(2)</action>, <action name=keyring-getmsg(2)>keyring-getmsg(2)</action>, <action name=factotum(4)>factotum(4)</action>, keys
<style color=#00ffffff size=1>.</style>            (6), <action name=getauthinfo(8)>getauthinfo(8)</action>

BUGS
<style color=#00ffffff size=1>.</style>            The byte-array encoding of IPint should not require the
<style color=#00ffffff size=1>.</style>            leading zero\; it does so for compatibility with old keys.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
