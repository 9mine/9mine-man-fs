<action name=DBFS(4)>DBFS(4)</action>                                                   <action name=DBFS(4)>DBFS(4)</action>

NAME
<style color=#00ffffff size=1>.</style>            dbfs, rawdbfs - simple database file system

SYNOPSIS
<style color=#00ffffff size=1>.</style>            dbfs \[ -abcer \] file mountpoint
<style color=#00ffffff size=1>.</style>            rawdbfs \[ -abcelx \] \[ -u cmd \] file mountpoint

<style color=#00ffffff size=1>.</style>            mountpoint/new
<style color=#00ffffff size=1>.</style>            mountpoint/0
<style color=#00ffffff size=1>.</style>            mountpoint/1
<style color=#00ffffff size=1>.</style>            mountpoint/...

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Dbfs and rawdbfs both expose a simple, record-based
<style color=#00ffffff size=1>.</style>            filesystem stored in file. The -a, -b and -c options have
<style color=#00ffffff size=1>.</style>            the same meaning as the options accepted by <action name=bind(1)>bind(1)</action>. If the
<style color=#00ffffff size=1>.</style>            -e option is given, then file will be created if it does not
<style color=#00ffffff size=1>.</style>            already exist. The filesystem provided by both dbfs and
<style color=#00ffffff size=1>.</style>            rawdbfs is substantially the same: when started, mountpoint
<style color=#00ffffff size=1>.</style>            is populated with numbered files, one for each record found
<style color=#00ffffff size=1>.</style>            in file. A read of one of these files yields the data in the
<style color=#00ffffff size=1>.</style>            record\; a write stores data in the record. A new record can
<style color=#00ffffff size=1>.</style>            be created by opening the new file\; writes to this file
<style color=#00ffffff size=1>.</style>            write to the new record. The name of the new file can be
<style color=#00ffffff size=1>.</style>            discovered by using fstat in <action name=sys-stat(2)>sys-stat(2)</action>. Records can be
<style color=#00ffffff size=1>.</style>            removed by removing the appropriate record file.

<style color=#00ffffff size=1>.</style>            Rawdbfs has additional features for database use: -x causes
<style color=#00ffffff size=1>.</style>            two additional files ("index" and "stats") to  appear in the
<style color=#00ffffff size=1>.</style>            mounted directory, -l specifies that a record can only be
<style color=#00ffffff size=1>.</style>            opened for writing by one process at once, and -u cmd
<style color=#00ffffff size=1>.</style>            specifies a <action name=sh(1)>sh(1)</action> command to be run whenever the contents of
<style color=#00ffffff size=1>.</style>            the database change. The index file is provided as a
<style color=#00ffffff size=1>.</style>            convenience for database client applications. Once
<style color=#00ffffff size=1>.</style>            initialised (by writing an integer value to it), subsequent
<style color=#00ffffff size=1>.</style>            reads return an ever-increasing integer value. Reading the
<style color=#00ffffff size=1>.</style>            stats file returns counts of database read, write, create
<style color=#00ffffff size=1>.</style>            and delete operations as a string of four integers.

<style color=#00ffffff size=1>.</style>            Dbfs and rawdbfs differ in the way that they store their
<style color=#00ffffff size=1>.</style>            data. Dbfs stores its records in file in a simple text
<style color=#00ffffff size=1>.</style>            format: the end of a record is indicated by an empty line.
<style color=#00ffffff size=1>.</style>            The file is completely rewritten every time a record is
<style color=#00ffffff size=1>.</style>            written. Storing records containing blank lines will lead to
<style color=#00ffffff size=1>.</style>            confusion when the database is re-read. Rawdbfs can store
<style color=#00ffffff size=1>.</style>            arbitrary data, but the format of the data storage is known
<style color=#00ffffff size=1>.</style>            only to itself. It does not rewrite the whole file on every
<style color=#00ffffff size=1>.</style>            record change, so can be more suitable for flash-based
<style color=#00ffffff size=1>.</style>            storage, where it is important to minimise the number of
<style color=#00ffffff size=1>.</style>            writes.

<style color=#00ffffff size=1>.</style>            Note that the record numbers always get their initial
<style color=#00ffffff size=1>.</style>            numbering from the order of the records in file. You cannot
<style color=#00ffffff size=1>.</style>            assume that the filename given to a record will remain the
<style color=#00ffffff size=1>.</style>            same between runs of dbfs.

SOURCE
<style color=#00ffffff size=1>.</style>            /appl/cmd/dbfs.b
<style color=#00ffffff size=1>.</style>            /appl/cmd/rawdbfs.b

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=memfs(4)>memfs(4)</action>, <action name=ramfile(4)>ramfile(4)</action>, <action name=calendar(1)>calendar(1)</action>

BUGS
<style color=#00ffffff size=1>.</style>            Write offsets are ignored, so the maximum amount of data
<style color=#00ffffff size=1>.</style>            that can be stored in a record is ATOMICIO bytes (i.e. 8K).

<style color=#00ffffff size=1>.</style>            There is no way to compact a file maintained by dbfs.

<style color=#00ffffff size=1>.</style>                                Inferno Manual
