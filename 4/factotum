<action name=FACTOTUM(4)>FACTOTUM(4)</action>                                           <action name=FACTOTUM(4)>FACTOTUM(4)</action>

NAME
<style color=#00ffffff size=1>.</style>            factotum, feedkey - authentication agent

SYNOPSIS
<style color=#00ffffff size=1>.</style>            auth/factotum \[ -d \] \[ -s srvname \] \[ -m mtpt \] ...
<style color=#00ffffff size=1>.</style>            attribute? ...

<style color=#00ffffff size=1>.</style>            auth/feedkey

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Factotum is a user-level file system that acts as the
<style color=#00ffffff size=1>.</style>            authentication agent for a user. It does so by managing a
<style color=#00ffffff size=1>.</style>            set of keys. A key is a collection of information used to
<style color=#00ffffff size=1>.</style>            authenticate a particular action. Stored as a list of
<style color=#00ffffff size=1>.</style>            attribute=value pairs, a key typically contains a user, an
<style color=#00ffffff size=1>.</style>            authentication domain, a protocol, and some secret data.

<style color=#00ffffff size=1>.</style>            Factotum serves <action name=srv(3)>srv(3)</action> directory #sfactotum, which it binds
<style color=#00ffffff size=1>.</style>            to /mnt/factotum. It serves the following files:
<style color=#00ffffff size=1>.</style>            rpc      each open represents a new private channel to
<style color=#00ffffff size=1>.</style>                     factotum
<style color=#00ffffff size=1>.</style>            proto    when read lists the protocols available
<style color=#00ffffff size=1>.</style>            needkey  allows external programs to control the addition of
<style color=#00ffffff size=1>.</style>                     new keys
<style color=#00ffffff size=1>.</style>            log      a log of actions
<style color=#00ffffff size=1>.</style>            ctl      for maintaining keys\; when read, it returns a list
<style color=#00ffffff size=1>.</style>                     of keys. For secret attributes, only the attribute
<style color=#00ffffff size=1>.</style>                     name follow by a ``?'' is returned.

<style color=#00ffffff size=1>.</style>            In any authentication, the caller typically acts as a client
<style color=#00ffffff size=1>.</style>            and the callee as a server.  The server determines the
<style color=#00ffffff size=1>.</style>            authentication domain, sometimes after a negotiation with
<style color=#00ffffff size=1>.</style>            the client.  Authentication always requires the client to
<style color=#00ffffff size=1>.</style>            prove its identity to the server.  Under some protocols,
<style color=#00ffffff size=1>.</style>            including the one normally used by Inferno, the
<style color=#00ffffff size=1>.</style>            authentication is mutual. Proof is accomplished using secret
<style color=#00ffffff size=1>.</style>            information kept by factotum in conjunction with a
<style color=#00ffffff size=1>.</style>            cryptographic protocol.

<style color=#00ffffff size=1>.</style>            Factotum can act in the role of client for any process
<style color=#00ffffff size=1>.</style>            possessing the same user id as it. Factotum can act in the
<style color=#00ffffff size=1>.</style>            role of server for any process.

<style color=#00ffffff size=1>.</style>            Factotum's structure is independent of any particular
<style color=#00ffffff size=1>.</style>            authentication protocol. Factotum currently supports the
<style color=#00ffffff size=1>.</style>            following protocols:
<style color=#00ffffff size=1>.</style>            infauth Inferno's authentication protocol <action name=auth(6)>auth(6)</action>
<style color=#00ffffff size=1>.</style>            p9any   a metaprotocol used to negotiate which actual
<style color=#00ffffff size=1>.</style>                    protocol to use.
<style color=#00ffffff size=1>.</style>            p9sk1   a Plan 9 shared key protocol described in authsrv in
<style color=#00ffffff size=1>.</style>                    section 6 of Plan 9's Programmer's Manual
<style color=#00ffffff size=1>.</style>            pass    passwords in the clear.

<style color=#00ffffff size=1>.</style>            The options are:

<style color=#00ffffff size=1>.</style>            -m   specifies the mount point to use, by default
<style color=#00ffffff size=1>.</style>                 /mnt/factotum.

<style color=#00ffffff size=1>.</style>            -s   specifies the service name to use, by default it is
<style color=#00ffffff size=1>.</style>                 factotum.

<style color=#00ffffff size=1>.</style>            -d   turns on debugging, written to standard error.

<style color=#00ffffff size=1>.</style>            Feedkey is a <action name=wm(1)>wm(1)</action> user interface for entering new keys.  It
<style color=#00ffffff size=1>.</style>            puts its window in the <action name=wm(1)>wm(1)</action> toolbar, and waits, reading
<style color=#00ffffff size=1>.</style>            requests from needkey. For each request, it pops open a
<style color=#00ffffff size=1>.</style>            window containing suitable prompts and waits for user input.
<style color=#00ffffff size=1>.</style>            See the sections on key confirmation and key prompting
<style color=#00ffffff size=1>.</style>            below.

<style color=#00ffffff size=1>.</style>         Key Tuples
<style color=#00ffffff size=1>.</style>            A key tuple is a space-delimited list of attribute=value
<style color=#00ffffff size=1>.</style>            pairs.  Values containing spaces must be quoted following
<style color=#00ffffff size=1>.</style>            the conventions of <action name=sh(1)>sh(1)</action>. An attribute whose name begins
<style color=#00ffffff size=1>.</style>            with an exclamation point (!) is `secret' and does not
<style color=#00ffffff size=1>.</style>            appear when reading the ctl file. See the `Protocols'
<style color=#00ffffff size=1>.</style>            section below. Here are some examples:

<style color=#00ffffff size=1>.</style>                proto=p9sk1 dom=avayalabs.com user=presotto !password=lucent
<style color=#00ffffff size=1>.</style>                proto=pass user=tb !password=does.it.matter

<style color=#00ffffff size=1>.</style>            The required attributes depend on the authentication
<style color=#00ffffff size=1>.</style>            protocol. The `Protocols' section below describes the
<style color=#00ffffff size=1>.</style>            attributes specific to each supported protocol.

<style color=#00ffffff size=1>.</style>            All keys can have additional attributes that act either as
<style color=#00ffffff size=1>.</style>            comments or as selectors to distinguish them in the factotum
<style color=#00ffffff size=1>.</style>            (2) and other library calls.

<style color=#00ffffff size=1>.</style>            The factotum owner can use any key stored by factotum. Any
<style color=#00ffffff size=1>.</style>            key may have one or more owner attributes listing the users
<style color=#00ffffff size=1>.</style>            who can use the key as though they were the owner. For
<style color=#00ffffff size=1>.</style>            example, the TLS and SSH host keys on a server often have an
<style color=#00ffffff size=1>.</style>            attribute owner=* to allow any user (and in particular,
<style color=#00ffffff size=1>.</style>            ``none )'' to run the TLS or SSH server-side protocol.

<style color=#00ffffff size=1>.</style>            Any key may have a role attribute for restricting how it can
<style color=#00ffffff size=1>.</style>            be used. If this attribute is missing, the key can be used
<style color=#00ffffff size=1>.</style>            in any role. The possible values are:

<style color=#00ffffff size=1>.</style>            client
<style color=#00ffffff size=1>.</style>                 for authenticating outbound calls

<style color=#00ffffff size=1>.</style>            server
<style color=#00ffffff size=1>.</style>                 for authenticating inbound calls

<style color=#00ffffff size=1>.</style>            speaksfor
<style color=#00ffffff size=1>.</style>                 for authenticating processes whose user id does not
<style color=#00ffffff size=1>.</style>                 match factotum's.

<style color=#00ffffff size=1>.</style>            If a key has a disabled attribute (with any value), the key
<style color=#00ffffff size=1>.</style>            is not used during any protocols.

<style color=#00ffffff size=1>.</style>         Key Templates
<style color=#00ffffff size=1>.</style>            Key templates are used by routines that interface to
<style color=#00ffffff size=1>.</style>            factotum, such as those in <action name=factotum(2)>factotum(2)</action>, to specify which key
<style color=#00ffffff size=1>.</style>            and protocol to use for an authentication. Like a key tuple,
<style color=#00ffffff size=1>.</style>            a key template is also a list of attribute=value pairs. It
<style color=#00ffffff size=1>.</style>            must specify at least the protocol and enough other
<style color=#00ffffff size=1>.</style>            attributes to uniquely identify a key, or set of keys, to
<style color=#00ffffff size=1>.</style>            use. The keys chosen are those that match all the attributes
<style color=#00ffffff size=1>.</style>            specified in the template.  The possible attribute/value
<style color=#00ffffff size=1>.</style>            formats are:

<style color=#00ffffff size=1>.</style>            attr=val
<style color=#00ffffff size=1>.</style>             The attribute attr must exist in the key and its value must
<style color=#00ffffff size=1>.</style>             exactly match val

<style color=#00ffffff size=1>.</style>            attr?
<style color=#00ffffff size=1>.</style>             The attribute attr must exist in the key but its value
<style color=#00ffffff size=1>.</style>             doesn't matter.

<style color=#00ffffff size=1>.</style>            attr
<style color=#00ffffff size=1>.</style>             The attribute attr must exist in the key with a null value

<style color=#00ffffff size=1>.</style>            Key templates are also used by factotum to request a key
<style color=#00ffffff size=1>.</style>            either via an RPC error or via the needkey interface. The
<style color=#00ffffff size=1>.</style>            possible attribute/value formats are:

<style color=#00ffffff size=1>.</style>            attr=val
<style color=#00ffffff size=1>.</style>             This pair must remain unchanged

<style color=#00ffffff size=1>.</style>            attr?
<style color=#00ffffff size=1>.</style>             This attribute needs a value

<style color=#00ffffff size=1>.</style>            attr
<style color=#00ffffff size=1>.</style>             The pair must remain unchanged

<style color=#00ffffff size=1>.</style>         Control and Key Management
<style color=#00ffffff size=1>.</style>            A number of messages can be written to the control file. The
<style color=#00ffffff size=1>.</style>            messages are:

<style color=#00ffffff size=1>.</style>            key attribute-value-list
<style color=#00ffffff size=1>.</style>                 add a new key.  This will replace any old key whose
<style color=#00ffffff size=1>.</style>                 public attributes match (ie, non ! attributes).

<style color=#00ffffff size=1>.</style>            delkey attribute-value-list
<style color=#00ffffff size=1>.</style>                 delete a key whose attributes match those given.

<style color=#00ffffff size=1>.</style>            debug
<style color=#00ffffff size=1>.</style>                 toggle debugging on and off, i.e., the debugging also
<style color=#00ffffff size=1>.</style>                 turned on by the -d option.

<style color=#00ffffff size=1>.</style>         Prompting for keys
<style color=#00ffffff size=1>.</style>            The needkey file provides a connection from factotum to a
<style color=#00ffffff size=1>.</style>            key server, normally the program auth/fgui. Whenever
<style color=#00ffffff size=1>.</style>            factotum needs a new key, it first checks to see if needkey
<style color=#00ffffff size=1>.</style>            is opened.  If it isn't, it returns a error to its client.
<style color=#00ffffff size=1>.</style>            If the file is opened a request can be read from it with the
<style color=#00ffffff size=1>.</style>            following format:

<style color=#00ffffff size=1>.</style>            needkey tag=tagno <key template>

<style color=#00ffffff size=1>.</style>            It is up to the reader to then query the user for any
<style color=#00ffffff size=1>.</style>            missing fields, write the key tuple into the ctl file, and
<style color=#00ffffff size=1>.</style>            then reply by writing into the needkey file the string:

<style color=#00ffffff size=1>.</style>            tag=tagno

<style color=#00ffffff size=1>.</style>            Needkey is exclusive open and can only be opened by a
<style color=#00ffffff size=1>.</style>            process with the same user id as factotum.

<style color=#00ffffff size=1>.</style>         The RPC Protocol
<style color=#00ffffff size=1>.</style>            Authentication is performed by

<style color=#00ffffff size=1>.</style>            1)   opening rpc

<style color=#00ffffff size=1>.</style>            2)   setting up the protocol and key to be used (see the
<style color=#00ffffff size=1>.</style>                 start RPC below),

<style color=#00ffffff size=1>.</style>            3)   shuttling messages back and forth between factotum and
<style color=#00ffffff size=1>.</style>                 the other party (see the read and write RPC's) until
<style color=#00ffffff size=1>.</style>                 done

<style color=#00ffffff size=1>.</style>            4)   if successful, reading back an AuthInfo structure (see
<style color=#00ffffff size=1>.</style>                 <action name=factotum(2)>factotum(2)</action>).

<style color=#00ffffff size=1>.</style>            The RPC protocol is normally embodied by one of the routines
<style color=#00ffffff size=1>.</style>            in <action name=factotum(2)>factotum(2)</action>. We describe it here should anyone want to
<style color=#00ffffff size=1>.</style>            extend that module.

<style color=#00ffffff size=1>.</style>            An RPC consists of writing a request message to rpc followed
<style color=#00ffffff size=1>.</style>            by reading a reply message back. RPC's are strictly ordered\;
<style color=#00ffffff size=1>.</style>            requests and replies of different RPC's cannot be
<style color=#00ffffff size=1>.</style>            interleaved. Messages consist of a verb, a single space, and
<style color=#00ffffff size=1>.</style>            data. The data format depends on the verb.  The request
<style color=#00ffffff size=1>.</style>            verbs are:

<style color=#00ffffff size=1>.</style>            start attribute-value-list
<style color=#00ffffff size=1>.</style>                 start a new authentication. Attribute-value-pair-list
<style color=#00ffffff size=1>.</style>                 must include a proto attribute, a role attribute with
<style color=#00ffffff size=1>.</style>                 value client or server, and enough other attibutes to
<style color=#00ffffff size=1>.</style>                 uniquely identify a key to use. A start RPC is required
<style color=#00ffffff size=1>.</style>                 before any others.    The possible replies are:

<style color=#00ffffff size=1>.</style>                 ok   start succeeded.

<style color=#00ffffff size=1>.</style>                 error string
<style color=#00ffffff size=1>.</style>                      where string is the reason.

<style color=#00ffffff size=1>.</style>            read get data from factotum to send to the other party.  The
<style color=#00ffffff size=1>.</style>                 possible replies are:

<style color=#00ffffff size=1>.</style>                 ok   read succeeded, this is zero length message.

<style color=#00ffffff size=1>.</style>                 ok data
<style color=#00ffffff size=1>.</style>                      read succeeded, the data follows the space and is
<style color=#00ffffff size=1>.</style>                      unformatted.

<style color=#00ffffff size=1>.</style>                 done authentication has succeeded, no further RPC's are
<style color=#00ffffff size=1>.</style>                      necessary

<style color=#00ffffff size=1>.</style>                 done haveai
<style color=#00ffffff size=1>.</style>                      authentication has succeeded, an AuthInfo
<style color=#00ffffff size=1>.</style>                      structure (see <action name=factotum(2)>factotum(2)</action>) can be retrieved with
<style color=#00ffffff size=1>.</style>                      an authinfo RPC

<style color=#00ffffff size=1>.</style>                 phase string
<style color=#00ffffff size=1>.</style>                      its not your turn to read, get some data from the
<style color=#00ffffff size=1>.</style>                      other party and return it with a write RPC.

<style color=#00ffffff size=1>.</style>                 error string
<style color=#00ffffff size=1>.</style>                      authentication failed, string is the reason.

<style color=#00ffffff size=1>.</style>                 protocol not started
<style color=#00ffffff size=1>.</style>                      a start RPC needs to precede reads and writes

<style color=#00ffffff size=1>.</style>                 needkey attribute-value-list
<style color=#00ffffff size=1>.</style>                      a key matching the argument is needed. This will
<style color=#00ffffff size=1>.</style>                      not appear if the needkey file is in use.
<style color=#00ffffff size=1>.</style>                      Otherwise, a suitable key can be written to ctl
<style color=#00ffffff size=1>.</style>                      and after that, authentication may proceed (ie,
<style color=#00ffffff size=1>.</style>                      the read restarted).

<style color=#00ffffff size=1>.</style>            write data
<style color=#00ffffff size=1>.</style>                 send data from the other party to factotum. The
<style color=#00ffffff size=1>.</style>                 possible replies are:

<style color=#00ffffff size=1>.</style>                 ok   the write succeeded

<style color=#00ffffff size=1>.</style>                 needkey attribute-value-list
<style color=#00ffffff size=1>.</style>                      see above

<style color=#00ffffff size=1>.</style>                 toosmall n
<style color=#00ffffff size=1>.</style>                      the write is too short, get more data from the
<style color=#00ffffff size=1>.</style>                      other party and retry the write. n specifies the
<style color=#00ffffff size=1>.</style>                      maximun total number of bytes.

<style color=#00ffffff size=1>.</style>                 phase string
<style color=#00ffffff size=1>.</style>                      its not your turn to write, get some data from
<style color=#00ffffff size=1>.</style>                      factotum first.

<style color=#00ffffff size=1>.</style>                 done see above

<style color=#00ffffff size=1>.</style>                 done haveai
<style color=#00ffffff size=1>.</style>                      see above

<style color=#00ffffff size=1>.</style>            authinfo
<style color=#00ffffff size=1>.</style>                 retrieve the AuthInfo structure.  The possible replies
<style color=#00ffffff size=1>.</style>                 are:

<style color=#00ffffff size=1>.</style>                 ok data
<style color=#00ffffff size=1>.</style>                      data is a marshaled form of the AuthInfo
<style color=#00ffffff size=1>.</style>                      structure.

<style color=#00ffffff size=1>.</style>                 error string
<style color=#00ffffff size=1>.</style>                      where string is the reason for the error.

<style color=#00ffffff size=1>.</style>            attr retrieve the attributes used in the start RPC. The
<style color=#00ffffff size=1>.</style>                 possible replies are:

<style color=#00ffffff size=1>.</style>                 ok attribute-value-list

<style color=#00ffffff size=1>.</style>                 error string
<style color=#00ffffff size=1>.</style>                      where string is the reason for the error.

<style color=#00ffffff size=1>.</style>         Protocols
<style color=#00ffffff size=1>.</style>            Factotum can support many authentication protocols, each
<style color=#00ffffff size=1>.</style>            implemented by a separate module in the directory
<style color=#00ffffff size=1>.</style>            /dis/auth/proto. Currently only a few are implemented in
<style color=#00ffffff size=1>.</style>            Inferno:

<style color=#00ffffff size=1>.</style>            Infauth is the Inferno public-key authentication protocol
<style color=#00ffffff size=1>.</style>            described by <action name=auth(6)>auth(6)</action>. It requires a key with proto=infauth,
<style color=#00ffffff size=1>.</style>            and a !authinfo attribute providing Inferno authentication
<style color=#00ffffff size=1>.</style>            data as an S-expression (see <action name=sexprs(6)>sexprs(6)</action>). The S-expression
<style color=#00ffffff size=1>.</style>            has five string elements: the signer's public key, the
<style color=#00ffffff size=1>.</style>            certificate for the user's public key, the user's secret
<style color=#00ffffff size=1>.</style>            key, and the values for parameters alpha and p, selected by
<style color=#00ffffff size=1>.</style>            the signer when the key was generated. The keys and
<style color=#00ffffff size=1>.</style>            certificates are represented as strings of the form produced
<style color=#00ffffff size=1>.</style>            by <action name=keyring-certtostr(2)>keyring-certtostr(2)</action>\; the parameter values are
<style color=#00ffffff size=1>.</style>            represented as binary in the form produced by
<style color=#00ffffff size=1>.</style>            IPint.iptobytes (see <action name=keyring-ipint(2)>keyring-ipint(2)</action>). Normally infauth
<style color=#00ffffff size=1>.</style>            checks that the other party's key was signed by the signer
<style color=#00ffffff size=1>.</style>            in the !authinfo data, but if the key has the attribute
<style color=#00ffffff size=1>.</style>            anysigner with non-zero integer value, infauth will accept
<style color=#00ffffff size=1>.</style>            keys signed by any signer. The actual signer can be
<style color=#00ffffff size=1>.</style>            determined by inspecting the data returned by the authinfo
<style color=#00ffffff size=1>.</style>            request\; the option is intended for use by services that
<style color=#00ffffff size=1>.</style>            support calls from many domains, each with its own signer.

<style color=#00ffffff size=1>.</style>            P9sk1 is the shared-secret protocol used to authenticate to
<style color=#00ffffff size=1>.</style>            various Plan 9 services. It requires a key with proto=p9sk1,
<style color=#00ffffff size=1>.</style>            a dom attribute identifying the authentication domain, a
<style color=#00ffffff size=1>.</style>            user name valid in that domain, and either a !password or
<style color=#00ffffff size=1>.</style>            !hex attribute specifying the password or hexadecimal secret
<style color=#00ffffff size=1>.</style>            to be used. P9sk1 normally is invoked by Plan 9's general
<style color=#00ffffff size=1>.</style>            authentication protocol, p9any, which is supported by
<style color=#00ffffff size=1>.</style>            Inferno's factotum.

<style color=#00ffffff size=1>.</style>            Pass requires a key with proto=pass in addition to user and
<style color=#00ffffff size=1>.</style>            !password attributes.

SOURCE
<style color=#00ffffff size=1>.</style>            /appl/cmd/auth/factotum

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=factotum(2)>factotum(2)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
