<action name=SPREE(4)>SPREE(4)</action>                                                 <action name=SPREE(4)>SPREE(4)</action>

NAME
<style color=#00ffffff size=1>.</style>            spree - distributed interactive sessions.

SYNOPSIS
<style color=#00ffffff size=1>.</style>            mount {spree/spree} /n/remote

<style color=#00ffffff size=1>.</style>            /n/remote/name
<style color=#00ffffff size=1>.</style>            /n/remote/n
<style color=#00ffffff size=1>.</style>            /n/remote/n/ctl

DESCRIPTION
<style color=#00ffffff size=1>.</style>            Spree serves a file system that allows clients to interact
<style color=#00ffffff size=1>.</style>            through various types of engine (see <action name=spree(2)>spree(2)</action> for an
<style color=#00ffffff size=1>.</style>            explanation of engines). It serves styx messages through
<style color=#00ffffff size=1>.</style>            file descriptor 0\; thus it can be mounted directly with
<style color=#00ffffff size=1>.</style>            <action name=mount(1)>mount(1)</action>, or made available across the network with
<style color=#00ffffff size=1>.</style>            styxlisten (see <action name=listen(1)>listen(1)</action>).

<style color=#00ffffff size=1>.</style>            Spree serves a name-space consisting of a directory for each
<style color=#00ffffff size=1>.</style>            clique that is currently active, and a file, name, that
<style color=#00ffffff size=1>.</style>            holds the authenticated name of the user that has mounted
<style color=#00ffffff size=1>.</style>            the spree namespace. A clique's directory holds at least one
<style color=#00ffffff size=1>.</style>            file, ctl\; if a client opens this file, it can write to it
<style color=#00ffffff size=1>.</style>            communicate with the clique's engine, and read from it to
<style color=#00ffffff size=1>.</style>            find updates to the state of the clique. Messages written to
<style color=#00ffffff size=1>.</style>            the file are formed as text and the write yields an error if
<style color=#00ffffff size=1>.</style>            there is an error executing the command. The first message
<style color=#00ffffff size=1>.</style>            written to the file is the initial request to join the
<style color=#00ffffff size=1>.</style>            clique\; conventionally it is the string join, but some
<style color=#00ffffff size=1>.</style>            engines accept other kinds of message (e.g. watch). If the
<style color=#00ffffff size=1>.</style>            initial request succeeds, the client will be informed of the
<style color=#00ffffff size=1>.</style>            current state of the clique by means of update messages read
<style color=#00ffffff size=1>.</style>            from the same file. Reading from the file will block until
<style color=#00ffffff size=1>.</style>            an update is available, whereupon the read request will
<style color=#00ffffff size=1>.</style>            return as many updates are available, separated by newline
<style color=#00ffffff size=1>.</style>            characters. If there are more updates available than can fit
<style color=#00ffffff size=1>.</style>            in the read request, the last two bytes of the buffer read
<style color=#00ffffff size=1>.</style>            will be a newline character and an asterisk (*)
<style color=#00ffffff size=1>.</style>            respectively, indicating that there are more updates to
<style color=#00ffffff size=1>.</style>            come.

<style color=#00ffffff size=1>.</style>            When spree is first started, it creates one clique, a
<style color=#00ffffff size=1>.</style>            ``lobby'' (see <action name=spree-lobby(4)>spree-lobby(4)</action>) that allows other cliques to
<style color=#00ffffff size=1>.</style>            be created\; this is named 0).

<style color=#00ffffff size=1>.</style>            A client cannot join a particular clique more than once.

<style color=#00ffffff size=1>.</style>            A zero-length write to the ctl file causes any reads of that
<style color=#00ffffff size=1>.</style>            file from the same file descriptor to yield EOF (no bytes).
<style color=#00ffffff size=1>.</style>            This is necessary to force a hangup under systems such as
<style color=#00ffffff size=1>.</style>            Windows, where it is not possible to interrupt a kproc
<style color=#00ffffff size=1>.</style>            blocked on a network read.

<style color=#00ffffff size=1>.</style>            The update messages generated by spree are as follows:

<style color=#00ffffff size=1>.</style>            create objid parentid visibility objtype
<style color=#00ffffff size=1>.</style>                 Create an object, identified by objid, at the end of
<style color=#00ffffff size=1>.</style>                 parentid's children (parentid is -1 for the root
<style color=#00ffffff size=1>.</style>                 object). Visibility is non-zero if the object's
<style color=#00ffffff size=1>.</style>                 children are visible to the member reading the update.
<style color=#00ffffff size=1>.</style>                 Objtype is the object's type (engine dependent).

<style color=#00ffffff size=1>.</style>            tx srcid dstid start end index
<style color=#00ffffff size=1>.</style>                 Transfer objects from srcid to dstid. Take the objects
<style color=#00ffffff size=1>.</style>                 from the range \[start, end) in the children of srcid,
<style color=#00ffffff size=1>.</style>                 and insert them just before index in dstid. When
<style color=#00ffffff size=1>.</style>                 objects are transferred to an object that conceals its
<style color=#00ffffff size=1>.</style>                 children, and the object is itself visible, the objects
<style color=#00ffffff size=1>.</style>                 will first be transferred to the destination and then
<style color=#00ffffff size=1>.</style>                 deleted\; objects transferred out of such an object will
<style color=#00ffffff size=1>.</style>                 first be created and then transferred to their
<style color=#00ffffff size=1>.</style>                 destination. This enables a client to maintain some
<style color=#00ffffff size=1>.</style>                 knowledge of where an object has been transferred to,
<style color=#00ffffff size=1>.</style>                 even if the object is no longer visible, and means that
<style color=#00ffffff size=1>.</style>                 a client is unable to keep track of objects that are
<style color=#00ffffff size=1>.</style>                 concealed from it.

<style color=#00ffffff size=1>.</style>            del parentid start end objid...
<style color=#00ffffff size=1>.</style>                 Delete the range \[start, end) of children from the
<style color=#00ffffff size=1>.</style>                 object identified by parentid. Spree guarantees that
<style color=#00ffffff size=1>.</style>                 those objects will themselves not have any children.
<style color=#00ffffff size=1>.</style>                 The list of objids gives the actual identifiers of the
<style color=#00ffffff size=1>.</style>                 objects deleted, for the benefit of clients that do not
<style color=#00ffffff size=1>.</style>                 wish to keep lists of objects' children.

<style color=#00ffffff size=1>.</style>            set objid attr val
<style color=#00ffffff size=1>.</style>                 Set the attribute named attr on object objid to val.

<style color=#00ffffff size=1>.</style>            vis objid visibility
<style color=#00ffffff size=1>.</style>                 The visibility of object to the reading member objid
<style color=#00ffffff size=1>.</style>                 has changed to visibility (non-zero if visible).

<style color=#00ffffff size=1>.</style>            action
<style color=#00ffffff size=1>.</style>                 Game engines can generate arbitrary messages of their
<style color=#00ffffff size=1>.</style>                 own devising\; such messages are specific to particular
<style color=#00ffffff size=1>.</style>                 engine types.

<style color=#00ffffff size=1>.</style>            Note that a given client does not have to interpret all the
<style color=#00ffffff size=1>.</style>            above messages - different client types have their own
<style color=#00ffffff size=1>.</style>            conventions. The card client type uses most of the above
<style color=#00ffffff size=1>.</style>            functionality, for example, whereas a client for the chat
<style color=#00ffffff size=1>.</style>            engine listed in <action name=spree(2)>spree(2)</action> can get away with interpreting
<style color=#00ffffff size=1>.</style>            only one message, the custom action chat.

<style color=#00ffffff size=1>.</style>            Writes to the opened clique file are interpreted as clique
<style color=#00ffffff size=1>.</style>            actions by the clique that has been loaded, and acted on
<style color=#00ffffff size=1>.</style>            accordingly. Invalid actions will draw a write error.

EXAMPLE
<style color=#00ffffff size=1>.</style>            The simplest client!

<style color=#00ffffff size=1>.</style>            mount tcp!somehost.com!3242 /n/remote
<style color=#00ffffff size=1>.</style>            {
<style color=#00ffffff size=1>.</style>            	echo create chat >\[1=0\]
<style color=#00ffffff size=1>.</style>            	cat &
<style color=#00ffffff size=1>.</style>            	cat  >\[1=0\] < /dev/cons
<style color=#00ffffff size=1>.</style>            } <> /n/remote/new

SOURCE
<style color=#00ffffff size=1>.</style>            /appl/cmd/cliques/spree.b

SEE ALSO
<style color=#00ffffff size=1>.</style>            <action name=spree(2)>spree(2)</action>

<style color=#00ffffff size=1>.</style>                                Inferno Manual
